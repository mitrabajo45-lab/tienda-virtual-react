import { Component, FirebaseError, LogLevel, Logger, SDK_VERSION, _getProvider, _isFirebaseServerApp, _registerComponent, _removeServiceInstance, createMockUserToken, deepEqual, getApp, getDefaultEmulatorHostnameAndPort, getGlobal, getModularInstance, getUA, isCloudWorkstation, isIndexedDBAvailable, isSafari, isSafariOrWebkit, pingServer, registerVersion, updateEmulatorBanner } from "./index.esm-B5c9mIdk.js";

//#region node_modules/@firebase/webchannel-wrapper/dist/bloom-blob/esm/bloom_blob_es2018.js
var commonjsGlobal$1 = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
var bloom_blob_es2018 = {};
/** @license
Copyright The Closure Library Authors.
SPDX-License-Identifier: Apache-2.0
*/
var Integer;
var Md5;
(function() {
	var h;
	function k$1(d, a) {
		function c() {}
		c.prototype = a.prototype;
		d.F = a.prototype;
		d.prototype = new c();
		d.prototype.constructor = d;
		d.D = function(f, e, g) {
			for (var b = Array(arguments.length - 2), r = 2; r < arguments.length; r++) b[r - 2] = arguments[r];
			return a.prototype[e].apply(f, b);
		};
	}
	function l() {
		this.blockSize = -1;
	}
	function m() {
		this.blockSize = -1;
		this.blockSize = 64;
		this.g = Array(4);
		this.C = Array(this.blockSize);
		this.o = this.h = 0;
		this.u();
	}
	k$1(m, l);
	m.prototype.u = function() {
		this.g[0] = 1732584193;
		this.g[1] = 4023233417;
		this.g[2] = 2562383102;
		this.g[3] = 271733878;
		this.o = this.h = 0;
	};
	function n(d, a, c) {
		c || (c = 0);
		const f = Array(16);
		if (typeof a === "string") for (var e = 0; e < 16; ++e) f[e] = a.charCodeAt(c++) | a.charCodeAt(c++) << 8 | a.charCodeAt(c++) << 16 | a.charCodeAt(c++) << 24;
		else for (e = 0; e < 16; ++e) f[e] = a[c++] | a[c++] << 8 | a[c++] << 16 | a[c++] << 24;
		a = d.g[0];
		c = d.g[1];
		e = d.g[2];
		let g = d.g[3], b;
		b = a + (g ^ c & (e ^ g)) + f[0] + 3614090360 & 4294967295;
		a = c + (b << 7 & 4294967295 | b >>> 25);
		b = g + (e ^ a & (c ^ e)) + f[1] + 3905402710 & 4294967295;
		g = a + (b << 12 & 4294967295 | b >>> 20);
		b = e + (c ^ g & (a ^ c)) + f[2] + 606105819 & 4294967295;
		e = g + (b << 17 & 4294967295 | b >>> 15);
		b = c + (a ^ e & (g ^ a)) + f[3] + 3250441966 & 4294967295;
		c = e + (b << 22 & 4294967295 | b >>> 10);
		b = a + (g ^ c & (e ^ g)) + f[4] + 4118548399 & 4294967295;
		a = c + (b << 7 & 4294967295 | b >>> 25);
		b = g + (e ^ a & (c ^ e)) + f[5] + 1200080426 & 4294967295;
		g = a + (b << 12 & 4294967295 | b >>> 20);
		b = e + (c ^ g & (a ^ c)) + f[6] + 2821735955 & 4294967295;
		e = g + (b << 17 & 4294967295 | b >>> 15);
		b = c + (a ^ e & (g ^ a)) + f[7] + 4249261313 & 4294967295;
		c = e + (b << 22 & 4294967295 | b >>> 10);
		b = a + (g ^ c & (e ^ g)) + f[8] + 1770035416 & 4294967295;
		a = c + (b << 7 & 4294967295 | b >>> 25);
		b = g + (e ^ a & (c ^ e)) + f[9] + 2336552879 & 4294967295;
		g = a + (b << 12 & 4294967295 | b >>> 20);
		b = e + (c ^ g & (a ^ c)) + f[10] + 4294925233 & 4294967295;
		e = g + (b << 17 & 4294967295 | b >>> 15);
		b = c + (a ^ e & (g ^ a)) + f[11] + 2304563134 & 4294967295;
		c = e + (b << 22 & 4294967295 | b >>> 10);
		b = a + (g ^ c & (e ^ g)) + f[12] + 1804603682 & 4294967295;
		a = c + (b << 7 & 4294967295 | b >>> 25);
		b = g + (e ^ a & (c ^ e)) + f[13] + 4254626195 & 4294967295;
		g = a + (b << 12 & 4294967295 | b >>> 20);
		b = e + (c ^ g & (a ^ c)) + f[14] + 2792965006 & 4294967295;
		e = g + (b << 17 & 4294967295 | b >>> 15);
		b = c + (a ^ e & (g ^ a)) + f[15] + 1236535329 & 4294967295;
		c = e + (b << 22 & 4294967295 | b >>> 10);
		b = a + (e ^ g & (c ^ e)) + f[1] + 4129170786 & 4294967295;
		a = c + (b << 5 & 4294967295 | b >>> 27);
		b = g + (c ^ e & (a ^ c)) + f[6] + 3225465664 & 4294967295;
		g = a + (b << 9 & 4294967295 | b >>> 23);
		b = e + (a ^ c & (g ^ a)) + f[11] + 643717713 & 4294967295;
		e = g + (b << 14 & 4294967295 | b >>> 18);
		b = c + (g ^ a & (e ^ g)) + f[0] + 3921069994 & 4294967295;
		c = e + (b << 20 & 4294967295 | b >>> 12);
		b = a + (e ^ g & (c ^ e)) + f[5] + 3593408605 & 4294967295;
		a = c + (b << 5 & 4294967295 | b >>> 27);
		b = g + (c ^ e & (a ^ c)) + f[10] + 38016083 & 4294967295;
		g = a + (b << 9 & 4294967295 | b >>> 23);
		b = e + (a ^ c & (g ^ a)) + f[15] + 3634488961 & 4294967295;
		e = g + (b << 14 & 4294967295 | b >>> 18);
		b = c + (g ^ a & (e ^ g)) + f[4] + 3889429448 & 4294967295;
		c = e + (b << 20 & 4294967295 | b >>> 12);
		b = a + (e ^ g & (c ^ e)) + f[9] + 568446438 & 4294967295;
		a = c + (b << 5 & 4294967295 | b >>> 27);
		b = g + (c ^ e & (a ^ c)) + f[14] + 3275163606 & 4294967295;
		g = a + (b << 9 & 4294967295 | b >>> 23);
		b = e + (a ^ c & (g ^ a)) + f[3] + 4107603335 & 4294967295;
		e = g + (b << 14 & 4294967295 | b >>> 18);
		b = c + (g ^ a & (e ^ g)) + f[8] + 1163531501 & 4294967295;
		c = e + (b << 20 & 4294967295 | b >>> 12);
		b = a + (e ^ g & (c ^ e)) + f[13] + 2850285829 & 4294967295;
		a = c + (b << 5 & 4294967295 | b >>> 27);
		b = g + (c ^ e & (a ^ c)) + f[2] + 4243563512 & 4294967295;
		g = a + (b << 9 & 4294967295 | b >>> 23);
		b = e + (a ^ c & (g ^ a)) + f[7] + 1735328473 & 4294967295;
		e = g + (b << 14 & 4294967295 | b >>> 18);
		b = c + (g ^ a & (e ^ g)) + f[12] + 2368359562 & 4294967295;
		c = e + (b << 20 & 4294967295 | b >>> 12);
		b = a + (c ^ e ^ g) + f[5] + 4294588738 & 4294967295;
		a = c + (b << 4 & 4294967295 | b >>> 28);
		b = g + (a ^ c ^ e) + f[8] + 2272392833 & 4294967295;
		g = a + (b << 11 & 4294967295 | b >>> 21);
		b = e + (g ^ a ^ c) + f[11] + 1839030562 & 4294967295;
		e = g + (b << 16 & 4294967295 | b >>> 16);
		b = c + (e ^ g ^ a) + f[14] + 4259657740 & 4294967295;
		c = e + (b << 23 & 4294967295 | b >>> 9);
		b = a + (c ^ e ^ g) + f[1] + 2763975236 & 4294967295;
		a = c + (b << 4 & 4294967295 | b >>> 28);
		b = g + (a ^ c ^ e) + f[4] + 1272893353 & 4294967295;
		g = a + (b << 11 & 4294967295 | b >>> 21);
		b = e + (g ^ a ^ c) + f[7] + 4139469664 & 4294967295;
		e = g + (b << 16 & 4294967295 | b >>> 16);
		b = c + (e ^ g ^ a) + f[10] + 3200236656 & 4294967295;
		c = e + (b << 23 & 4294967295 | b >>> 9);
		b = a + (c ^ e ^ g) + f[13] + 681279174 & 4294967295;
		a = c + (b << 4 & 4294967295 | b >>> 28);
		b = g + (a ^ c ^ e) + f[0] + 3936430074 & 4294967295;
		g = a + (b << 11 & 4294967295 | b >>> 21);
		b = e + (g ^ a ^ c) + f[3] + 3572445317 & 4294967295;
		e = g + (b << 16 & 4294967295 | b >>> 16);
		b = c + (e ^ g ^ a) + f[6] + 76029189 & 4294967295;
		c = e + (b << 23 & 4294967295 | b >>> 9);
		b = a + (c ^ e ^ g) + f[9] + 3654602809 & 4294967295;
		a = c + (b << 4 & 4294967295 | b >>> 28);
		b = g + (a ^ c ^ e) + f[12] + 3873151461 & 4294967295;
		g = a + (b << 11 & 4294967295 | b >>> 21);
		b = e + (g ^ a ^ c) + f[15] + 530742520 & 4294967295;
		e = g + (b << 16 & 4294967295 | b >>> 16);
		b = c + (e ^ g ^ a) + f[2] + 3299628645 & 4294967295;
		c = e + (b << 23 & 4294967295 | b >>> 9);
		b = a + (e ^ (c | ~g)) + f[0] + 4096336452 & 4294967295;
		a = c + (b << 6 & 4294967295 | b >>> 26);
		b = g + (c ^ (a | ~e)) + f[7] + 1126891415 & 4294967295;
		g = a + (b << 10 & 4294967295 | b >>> 22);
		b = e + (a ^ (g | ~c)) + f[14] + 2878612391 & 4294967295;
		e = g + (b << 15 & 4294967295 | b >>> 17);
		b = c + (g ^ (e | ~a)) + f[5] + 4237533241 & 4294967295;
		c = e + (b << 21 & 4294967295 | b >>> 11);
		b = a + (e ^ (c | ~g)) + f[12] + 1700485571 & 4294967295;
		a = c + (b << 6 & 4294967295 | b >>> 26);
		b = g + (c ^ (a | ~e)) + f[3] + 2399980690 & 4294967295;
		g = a + (b << 10 & 4294967295 | b >>> 22);
		b = e + (a ^ (g | ~c)) + f[10] + 4293915773 & 4294967295;
		e = g + (b << 15 & 4294967295 | b >>> 17);
		b = c + (g ^ (e | ~a)) + f[1] + 2240044497 & 4294967295;
		c = e + (b << 21 & 4294967295 | b >>> 11);
		b = a + (e ^ (c | ~g)) + f[8] + 1873313359 & 4294967295;
		a = c + (b << 6 & 4294967295 | b >>> 26);
		b = g + (c ^ (a | ~e)) + f[15] + 4264355552 & 4294967295;
		g = a + (b << 10 & 4294967295 | b >>> 22);
		b = e + (a ^ (g | ~c)) + f[6] + 2734768916 & 4294967295;
		e = g + (b << 15 & 4294967295 | b >>> 17);
		b = c + (g ^ (e | ~a)) + f[13] + 1309151649 & 4294967295;
		c = e + (b << 21 & 4294967295 | b >>> 11);
		b = a + (e ^ (c | ~g)) + f[4] + 4149444226 & 4294967295;
		a = c + (b << 6 & 4294967295 | b >>> 26);
		b = g + (c ^ (a | ~e)) + f[11] + 3174756917 & 4294967295;
		g = a + (b << 10 & 4294967295 | b >>> 22);
		b = e + (a ^ (g | ~c)) + f[2] + 718787259 & 4294967295;
		e = g + (b << 15 & 4294967295 | b >>> 17);
		b = c + (g ^ (e | ~a)) + f[9] + 3951481745 & 4294967295;
		d.g[0] = d.g[0] + a & 4294967295;
		d.g[1] = d.g[1] + (e + (b << 21 & 4294967295 | b >>> 11)) & 4294967295;
		d.g[2] = d.g[2] + e & 4294967295;
		d.g[3] = d.g[3] + g & 4294967295;
	}
	m.prototype.v = function(d, a) {
		a === void 0 && (a = d.length);
		const c = a - this.blockSize, f = this.C;
		let e = this.h, g = 0;
		for (; g < a;) {
			if (e == 0) for (; g <= c;) n(this, d, g), g += this.blockSize;
			if (typeof d === "string") {
				for (; g < a;) if (f[e++] = d.charCodeAt(g++), e == this.blockSize) {
					n(this, f);
					e = 0;
					break;
				}
			} else for (; g < a;) if (f[e++] = d[g++], e == this.blockSize) {
				n(this, f);
				e = 0;
				break;
			}
		}
		this.h = e;
		this.o += a;
	};
	m.prototype.A = function() {
		var d = Array((this.h < 56 ? this.blockSize : this.blockSize * 2) - this.h);
		d[0] = 128;
		for (var a = 1; a < d.length - 8; ++a) d[a] = 0;
		a = this.o * 8;
		for (var c = d.length - 8; c < d.length; ++c) d[c] = a & 255, a /= 256;
		this.v(d);
		d = Array(16);
		a = 0;
		for (c = 0; c < 4; ++c) for (let f = 0; f < 32; f += 8) d[a++] = this.g[c] >>> f & 255;
		return d;
	};
	function p(d, a) {
		var c = q$1;
		return Object.prototype.hasOwnProperty.call(c, d) ? c[d] : c[d] = a(d);
	}
	function t(d, a) {
		this.h = a;
		const c = [];
		let f = !0;
		for (let e = d.length - 1; e >= 0; e--) {
			const g = d[e] | 0;
			f && g == a || (c[e] = g, f = !1);
		}
		this.g = c;
	}
	var q$1 = {};
	function u(d) {
		return -128 <= d && d < 128 ? p(d, function(a) {
			return new t([a | 0], a < 0 ? -1 : 0);
		}) : new t([d | 0], d < 0 ? -1 : 0);
	}
	function v(d) {
		if (isNaN(d) || !isFinite(d)) return w;
		if (d < 0) return x$1(v(-d));
		const a = [];
		let c = 1;
		for (let f = 0; d >= c; f++) a[f] = d / c | 0, c *= 4294967296;
		return new t(a, 0);
	}
	function y(d, a) {
		if (d.length == 0) throw Error("number format error: empty string");
		a = a || 10;
		if (a < 2 || 36 < a) throw Error("radix out of range: " + a);
		if (d.charAt(0) == "-") return x$1(y(d.substring(1), a));
		if (d.indexOf("-") >= 0) throw Error("number format error: interior \"-\" character");
		const c = v(Math.pow(a, 8));
		let f = w;
		for (let g = 0; g < d.length; g += 8) {
			var e = Math.min(8, d.length - g);
			const b = parseInt(d.substring(g, g + e), a);
			e < 8 ? (e = v(Math.pow(a, e)), f = f.j(e).add(v(b))) : (f = f.j(c), f = f.add(v(b)));
		}
		return f;
	}
	var w = u(0), z$1 = u(1), A = u(16777216);
	h = t.prototype;
	h.m = function() {
		if (B$1(this)) return -x$1(this).m();
		let d = 0, a = 1;
		for (let c = 0; c < this.g.length; c++) {
			const f = this.i(c);
			d += (f >= 0 ? f : 4294967296 + f) * a;
			a *= 4294967296;
		}
		return d;
	};
	h.toString = function(d) {
		d = d || 10;
		if (d < 2 || 36 < d) throw Error("radix out of range: " + d);
		if (C(this)) return "0";
		if (B$1(this)) return "-" + x$1(this).toString(d);
		const a = v(Math.pow(d, 6));
		var c = this;
		let f = "";
		for (;;) {
			const e = D(c, a).g;
			c = F$1(c, e.j(a));
			let g = ((c.g.length > 0 ? c.g[0] : c.h) >>> 0).toString(d);
			c = e;
			if (C(c)) return g + f;
			for (; g.length < 6;) g = "0" + g;
			f = g + f;
		}
	};
	h.i = function(d) {
		return d < 0 ? 0 : d < this.g.length ? this.g[d] : this.h;
	};
	function C(d) {
		if (d.h != 0) return !1;
		for (let a = 0; a < d.g.length; a++) if (d.g[a] != 0) return !1;
		return !0;
	}
	function B$1(d) {
		return d.h == -1;
	}
	h.l = function(d) {
		d = F$1(this, d);
		return B$1(d) ? -1 : C(d) ? 0 : 1;
	};
	function x$1(d) {
		const a = d.g.length, c = [];
		for (let f = 0; f < a; f++) c[f] = ~d.g[f];
		return new t(c, ~d.h).add(z$1);
	}
	h.abs = function() {
		return B$1(this) ? x$1(this) : this;
	};
	h.add = function(d) {
		const a = Math.max(this.g.length, d.g.length), c = [];
		let f = 0;
		for (let e = 0; e <= a; e++) {
			let g = f + (this.i(e) & 65535) + (d.i(e) & 65535), b = (g >>> 16) + (this.i(e) >>> 16) + (d.i(e) >>> 16);
			f = b >>> 16;
			g &= 65535;
			b &= 65535;
			c[e] = b << 16 | g;
		}
		return new t(c, c[c.length - 1] & -2147483648 ? -1 : 0);
	};
	function F$1(d, a) {
		return d.add(x$1(a));
	}
	h.j = function(d) {
		if (C(this) || C(d)) return w;
		if (B$1(this)) return B$1(d) ? x$1(this).j(x$1(d)) : x$1(x$1(this).j(d));
		if (B$1(d)) return x$1(this.j(x$1(d)));
		if (this.l(A) < 0 && d.l(A) < 0) return v(this.m() * d.m());
		const a = this.g.length + d.g.length, c = [];
		for (var f = 0; f < 2 * a; f++) c[f] = 0;
		for (f = 0; f < this.g.length; f++) for (let e = 0; e < d.g.length; e++) {
			const g = this.i(f) >>> 16, b = this.i(f) & 65535, r = d.i(e) >>> 16, E = d.i(e) & 65535;
			c[2 * f + 2 * e] += b * E;
			G$1(c, 2 * f + 2 * e);
			c[2 * f + 2 * e + 1] += g * E;
			G$1(c, 2 * f + 2 * e + 1);
			c[2 * f + 2 * e + 1] += b * r;
			G$1(c, 2 * f + 2 * e + 1);
			c[2 * f + 2 * e + 2] += g * r;
			G$1(c, 2 * f + 2 * e + 2);
		}
		for (d = 0; d < a; d++) c[d] = c[2 * d + 1] << 16 | c[2 * d];
		for (d = a; d < 2 * a; d++) c[d] = 0;
		return new t(c, 0);
	};
	function G$1(d, a) {
		for (; (d[a] & 65535) != d[a];) d[a + 1] += d[a] >>> 16, d[a] &= 65535, a++;
	}
	function H$1(d, a) {
		this.g = d;
		this.h = a;
	}
	function D(d, a) {
		if (C(a)) throw Error("division by zero");
		if (C(d)) return new H$1(w, w);
		if (B$1(d)) return a = D(x$1(d), a), new H$1(x$1(a.g), x$1(a.h));
		if (B$1(a)) return a = D(d, x$1(a)), new H$1(x$1(a.g), a.h);
		if (d.g.length > 30) {
			if (B$1(d) || B$1(a)) throw Error("slowDivide_ only works with positive integers.");
			for (var c = z$1, f = a; f.l(d) <= 0;) c = I(c), f = I(f);
			var e = J$1(c, 1), g = J$1(f, 1);
			f = J$1(f, 2);
			for (c = J$1(c, 2); !C(f);) {
				var b = g.add(f);
				b.l(d) <= 0 && (e = e.add(c), g = b);
				f = J$1(f, 1);
				c = J$1(c, 1);
			}
			a = F$1(d, e.j(a));
			return new H$1(e, a);
		}
		for (e = w; d.l(a) >= 0;) {
			c = Math.max(1, Math.floor(d.m() / a.m()));
			f = Math.ceil(Math.log(c) / Math.LN2);
			f = f <= 48 ? 1 : Math.pow(2, f - 48);
			g = v(c);
			for (b = g.j(a); B$1(b) || b.l(d) > 0;) c -= f, g = v(c), b = g.j(a);
			C(g) && (g = z$1);
			e = e.add(g);
			d = F$1(d, b);
		}
		return new H$1(e, d);
	}
	h.B = function(d) {
		return D(this, d).h;
	};
	h.and = function(d) {
		const a = Math.max(this.g.length, d.g.length), c = [];
		for (let f = 0; f < a; f++) c[f] = this.i(f) & d.i(f);
		return new t(c, this.h & d.h);
	};
	h.or = function(d) {
		const a = Math.max(this.g.length, d.g.length), c = [];
		for (let f = 0; f < a; f++) c[f] = this.i(f) | d.i(f);
		return new t(c, this.h | d.h);
	};
	h.xor = function(d) {
		const a = Math.max(this.g.length, d.g.length), c = [];
		for (let f = 0; f < a; f++) c[f] = this.i(f) ^ d.i(f);
		return new t(c, this.h ^ d.h);
	};
	function I(d) {
		const a = d.g.length + 1, c = [];
		for (let f = 0; f < a; f++) c[f] = d.i(f) << 1 | d.i(f - 1) >>> 31;
		return new t(c, d.h);
	}
	function J$1(d, a) {
		const c = a >> 5;
		a %= 32;
		const f = d.g.length - c, e = [];
		for (let g = 0; g < f; g++) e[g] = a > 0 ? d.i(g + c) >>> a | d.i(g + c + 1) << 32 - a : d.i(g + c);
		return new t(e, d.h);
	}
	m.prototype.digest = m.prototype.A;
	m.prototype.reset = m.prototype.u;
	m.prototype.update = m.prototype.v;
	Md5 = bloom_blob_es2018.Md5 = m;
	t.prototype.add = t.prototype.add;
	t.prototype.multiply = t.prototype.j;
	t.prototype.modulo = t.prototype.B;
	t.prototype.compare = t.prototype.l;
	t.prototype.toNumber = t.prototype.m;
	t.prototype.toString = t.prototype.toString;
	t.prototype.getBits = t.prototype.i;
	t.fromNumber = v;
	t.fromString = y;
	Integer = bloom_blob_es2018.Integer = t;
}).apply(typeof commonjsGlobal$1 !== "undefined" ? commonjsGlobal$1 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});

//#endregion
//#region node_modules/@firebase/webchannel-wrapper/dist/webchannel-blob/esm/webchannel_blob_es2018.js
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
var webchannel_blob_es2018 = {};
/** @license
Copyright The Closure Library Authors.
SPDX-License-Identifier: Apache-2.0
*/
var XhrIo;
var FetchXmlHttpFactory;
var WebChannel;
var EventType;
var ErrorCode;
var Stat;
var Event;
var getStatEventTarget;
var createWebChannelTransport;
(function() {
	var h, aa = Object.defineProperty;
	function ba(a) {
		a = [
			"object" == typeof globalThis && globalThis,
			a,
			"object" == typeof window && window,
			"object" == typeof self && self,
			"object" == typeof commonjsGlobal && commonjsGlobal
		];
		for (var b = 0; b < a.length; ++b) {
			var c = a[b];
			if (c && c.Math == Math) return c;
		}
		throw Error("Cannot find global object");
	}
	var ca = ba(this);
	function da(a, b) {
		if (b) a: {
			var c = ca;
			a = a.split(".");
			for (var d = 0; d < a.length - 1; d++) {
				var e = a[d];
				if (!(e in c)) break a;
				c = c[e];
			}
			a = a[a.length - 1];
			d = c[a];
			b = b(d);
			b != d && b != null && aa(c, a, {
				configurable: !0,
				writable: !0,
				value: b
			});
		}
	}
	da("Symbol.dispose", function(a) {
		return a ? a : Symbol("Symbol.dispose");
	});
	da("Array.prototype.values", function(a) {
		return a ? a : function() {
			return this[Symbol.iterator]();
		};
	});
	da("Object.entries", function(a) {
		return a ? a : function(b) {
			var c = [], d;
			for (d in b) Object.prototype.hasOwnProperty.call(b, d) && c.push([d, b[d]]);
			return c;
		};
	});
	var ea = ea || {}, l = this || self;
	function n(a) {
		var b = typeof a;
		return b == "object" && a != null || b == "function";
	}
	function fa(a, b, c) {
		return a.call.apply(a.bind, arguments);
	}
	function p(a, b, c) {
		p = fa;
		return p.apply(null, arguments);
	}
	function ha(a, b) {
		var c = Array.prototype.slice.call(arguments, 1);
		return function() {
			var d = c.slice();
			d.push.apply(d, arguments);
			return a.apply(this, d);
		};
	}
	function t(a, b) {
		function c() {}
		c.prototype = b.prototype;
		a.Z = b.prototype;
		a.prototype = new c();
		a.prototype.constructor = a;
		a.Ob = function(d, e, f) {
			for (var g = Array(arguments.length - 2), k$1 = 2; k$1 < arguments.length; k$1++) g[k$1 - 2] = arguments[k$1];
			return b.prototype[e].apply(d, g);
		};
	}
	var ia = typeof AsyncContext !== "undefined" && typeof AsyncContext.Snapshot === "function" ? (a) => a && AsyncContext.Snapshot.wrap(a) : (a) => a;
	function ja(a) {
		const b = a.length;
		if (b > 0) {
			const c = Array(b);
			for (let d = 0; d < b; d++) c[d] = a[d];
			return c;
		}
		return [];
	}
	function ka(a, b) {
		for (let d = 1; d < arguments.length; d++) {
			const e = arguments[d];
			var c = typeof e;
			c = c != "object" ? c : e ? Array.isArray(e) ? "array" : c : "null";
			if (c == "array" || c == "object" && typeof e.length == "number") {
				c = a.length || 0;
				const f = e.length || 0;
				a.length = c + f;
				for (let g = 0; g < f; g++) a[c + g] = e[g];
			} else a.push(e);
		}
	}
	class la {
		constructor(a, b) {
			this.i = a;
			this.j = b;
			this.h = 0;
			this.g = null;
		}
		get() {
			let a;
			this.h > 0 ? (this.h--, a = this.g, this.g = a.next, a.next = null) : a = this.i();
			return a;
		}
	}
	function ma(a) {
		l.setTimeout(() => {
			throw a;
		}, 0);
	}
	function na() {
		var a = oa;
		let b = null;
		a.g && (b = a.g, a.g = a.g.next, a.g || (a.h = null), b.next = null);
		return b;
	}
	class pa {
		constructor() {
			this.h = this.g = null;
		}
		add(a, b) {
			const c = qa.get();
			c.set(a, b);
			this.h ? this.h.next = c : this.g = c;
			this.h = c;
		}
	}
	var qa = new la(() => new ra(), (a) => a.reset());
	class ra {
		constructor() {
			this.next = this.g = this.h = null;
		}
		set(a, b) {
			this.h = a;
			this.g = b;
			this.next = null;
		}
		reset() {
			this.next = this.g = this.h = null;
		}
	}
	let u, v = !1, oa = new pa(), ta = () => {
		const a = Promise.resolve(void 0);
		u = () => {
			a.then(sa);
		};
	};
	function sa() {
		for (var a; a = na();) {
			try {
				a.h.call(a.g);
			} catch (c) {
				ma(c);
			}
			var b = qa;
			b.j(a);
			b.h < 100 && (b.h++, a.next = b.g, b.g = a);
		}
		v = !1;
	}
	function w() {
		this.u = this.u;
		this.C = this.C;
	}
	w.prototype.u = !1;
	w.prototype.dispose = function() {
		this.u || (this.u = !0, this.N());
	};
	w.prototype[Symbol.dispose] = function() {
		this.dispose();
	};
	w.prototype.N = function() {
		if (this.C) for (; this.C.length;) this.C.shift()();
	};
	function x$1(a, b) {
		this.type = a;
		this.g = this.target = b;
		this.defaultPrevented = !1;
	}
	x$1.prototype.h = function() {
		this.defaultPrevented = !0;
	};
	var ua = function() {
		if (!l.addEventListener || !Object.defineProperty) return !1;
		var a = !1, b = Object.defineProperty({}, "passive", { get: function() {
			a = !0;
		} });
		try {
			const c = () => {};
			l.addEventListener("test", c, b);
			l.removeEventListener("test", c, b);
		} catch (c) {}
		return a;
	}();
	function y(a) {
		return /^[\s\xa0]*$/.test(a);
	}
	function z$1(a, b) {
		x$1.call(this, a ? a.type : "");
		this.relatedTarget = this.g = this.target = null;
		this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
		this.key = "";
		this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = !1;
		this.state = null;
		this.pointerId = 0;
		this.pointerType = "";
		this.i = null;
		a && this.init(a, b);
	}
	t(z$1, x$1);
	z$1.prototype.init = function(a, b) {
		const c = this.type = a.type, d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
		this.target = a.target || a.srcElement;
		this.g = b;
		b = a.relatedTarget;
		b || (c == "mouseover" ? b = a.fromElement : c == "mouseout" && (b = a.toElement));
		this.relatedTarget = b;
		d ? (this.clientX = d.clientX !== void 0 ? d.clientX : d.pageX, this.clientY = d.clientY !== void 0 ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = a.clientX !== void 0 ? a.clientX : a.pageX, this.clientY = a.clientY !== void 0 ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0);
		this.button = a.button;
		this.key = a.key || "";
		this.ctrlKey = a.ctrlKey;
		this.altKey = a.altKey;
		this.shiftKey = a.shiftKey;
		this.metaKey = a.metaKey;
		this.pointerId = a.pointerId || 0;
		this.pointerType = a.pointerType;
		this.state = a.state;
		this.i = a;
		a.defaultPrevented && z$1.Z.h.call(this);
	};
	z$1.prototype.h = function() {
		z$1.Z.h.call(this);
		const a = this.i;
		a.preventDefault ? a.preventDefault() : a.returnValue = !1;
	};
	var B$1 = "closure_listenable_" + (Math.random() * 1e6 | 0);
	var va = 0;
	function wa(a, b, c, d, e) {
		this.listener = a;
		this.proxy = null;
		this.src = b;
		this.type = c;
		this.capture = !!d;
		this.ha = e;
		this.key = ++va;
		this.da = this.fa = !1;
	}
	function xa(a) {
		a.da = !0;
		a.listener = null;
		a.proxy = null;
		a.src = null;
		a.ha = null;
	}
	function ya(a, b, c) {
		for (const d in a) b.call(c, a[d], d, a);
	}
	function Aa(a, b) {
		for (const c in a) b.call(void 0, a[c], c, a);
	}
	function Ba(a) {
		const b = {};
		for (const c in a) b[c] = a[c];
		return b;
	}
	const Ca = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
	function Da(a, b) {
		let c, d;
		for (let e = 1; e < arguments.length; e++) {
			d = arguments[e];
			for (c in d) a[c] = d[c];
			for (let f = 0; f < Ca.length; f++) c = Ca[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
		}
	}
	function Ea(a) {
		this.src = a;
		this.g = {};
		this.h = 0;
	}
	Ea.prototype.add = function(a, b, c, d, e) {
		const f = a.toString();
		a = this.g[f];
		a || (a = this.g[f] = [], this.h++);
		const g = Fa(a, b, d, e);
		g > -1 ? (b = a[g], c || (b.fa = !1)) : (b = new wa(b, this.src, f, !!d, e), b.fa = c, a.push(b));
		return b;
	};
	function Ga(a, b) {
		const c = b.type;
		if (c in a.g) {
			var d = a.g[c], e = Array.prototype.indexOf.call(d, b, void 0), f;
			(f = e >= 0) && Array.prototype.splice.call(d, e, 1);
			f && (xa(b), a.g[c].length == 0 && (delete a.g[c], a.h--));
		}
	}
	function Fa(a, b, c, d) {
		for (let e = 0; e < a.length; ++e) {
			const f = a[e];
			if (!f.da && f.listener == b && f.capture == !!c && f.ha == d) return e;
		}
		return -1;
	}
	var Ha = "closure_lm_" + (Math.random() * 1e6 | 0), Ia = {};
	function Ka(a, b, c, d, e) {
		if (d && d.once) return La(a, b, c, d, e);
		if (Array.isArray(b)) {
			for (let f = 0; f < b.length; f++) Ka(a, b[f], c, d, e);
			return null;
		}
		c = Ma(c);
		return a && a[B$1] ? a.J(b, c, n(d) ? !!d.capture : !!d, e) : Na(a, b, c, !1, d, e);
	}
	function Na(a, b, c, d, e, f) {
		if (!b) throw Error("Invalid event type");
		const g = n(e) ? !!e.capture : !!e;
		let k$1 = Oa(a);
		k$1 || (a[Ha] = k$1 = new Ea(a));
		c = k$1.add(b, c, d, g, f);
		if (c.proxy) return c;
		d = Pa();
		c.proxy = d;
		d.src = a;
		d.listener = c;
		if (a.addEventListener) ua || (e = g), e === void 0 && (e = !1), a.addEventListener(b.toString(), d, e);
		else if (a.attachEvent) a.attachEvent(Qa(b.toString()), d);
		else if (a.addListener && a.removeListener) a.addListener(d);
		else throw Error("addEventListener and attachEvent are unavailable.");
		return c;
	}
	function Pa() {
		function a(c) {
			return b.call(a.src, a.listener, c);
		}
		const b = Ra;
		return a;
	}
	function La(a, b, c, d, e) {
		if (Array.isArray(b)) {
			for (let f = 0; f < b.length; f++) La(a, b[f], c, d, e);
			return null;
		}
		c = Ma(c);
		return a && a[B$1] ? a.K(b, c, n(d) ? !!d.capture : !!d, e) : Na(a, b, c, !0, d, e);
	}
	function Sa(a, b, c, d, e) {
		if (Array.isArray(b)) for (var f = 0; f < b.length; f++) Sa(a, b[f], c, d, e);
		else (d = n(d) ? !!d.capture : !!d, c = Ma(c), a && a[B$1]) ? (a = a.i, f = String(b).toString(), f in a.g && (b = a.g[f], c = Fa(b, c, d, e), c > -1 && (xa(b[c]), Array.prototype.splice.call(b, c, 1), b.length == 0 && (delete a.g[f], a.h--)))) : a && (a = Oa(a)) && (b = a.g[b.toString()], a = -1, b && (a = Fa(b, c, d, e)), (c = a > -1 ? b[a] : null) && Ta(c));
	}
	function Ta(a) {
		if (typeof a !== "number" && a && !a.da) {
			var b = a.src;
			if (b && b[B$1]) Ga(b.i, a);
			else {
				var c = a.type, d = a.proxy;
				b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent ? b.detachEvent(Qa(c), d) : b.addListener && b.removeListener && b.removeListener(d);
				(c = Oa(b)) ? (Ga(c, a), c.h == 0 && (c.src = null, b[Ha] = null)) : xa(a);
			}
		}
	}
	function Qa(a) {
		return a in Ia ? Ia[a] : Ia[a] = "on" + a;
	}
	function Ra(a, b) {
		if (a.da) a = !0;
		else {
			b = new z$1(b, this);
			const c = a.listener, d = a.ha || a.src;
			a.fa && Ta(a);
			a = c.call(d, b);
		}
		return a;
	}
	function Oa(a) {
		a = a[Ha];
		return a instanceof Ea ? a : null;
	}
	var Ua = "__closure_events_fn_" + (Math.random() * 1e9 >>> 0);
	function Ma(a) {
		if (typeof a === "function") return a;
		a[Ua] || (a[Ua] = function(b) {
			return a.handleEvent(b);
		});
		return a[Ua];
	}
	function C() {
		w.call(this);
		this.i = new Ea(this);
		this.M = this;
		this.G = null;
	}
	t(C, w);
	C.prototype[B$1] = !0;
	C.prototype.removeEventListener = function(a, b, c, d) {
		Sa(this, a, b, c, d);
	};
	function D(a, b) {
		var c, d = a.G;
		if (d) for (c = []; d; d = d.G) c.push(d);
		a = a.M;
		d = b.type || b;
		if (typeof b === "string") b = new x$1(b, a);
		else if (b instanceof x$1) b.target = b.target || a;
		else {
			var e = b;
			b = new x$1(d, a);
			Da(b, e);
		}
		e = !0;
		let f, g;
		if (c) for (g = c.length - 1; g >= 0; g--) f = b.g = c[g], e = Va(f, d, !0, b) && e;
		f = b.g = a;
		e = Va(f, d, !0, b) && e;
		e = Va(f, d, !1, b) && e;
		if (c) for (g = 0; g < c.length; g++) f = b.g = c[g], e = Va(f, d, !1, b) && e;
	}
	C.prototype.N = function() {
		C.Z.N.call(this);
		if (this.i) {
			var a = this.i;
			for (const c in a.g) {
				const d = a.g[c];
				for (let e = 0; e < d.length; e++) xa(d[e]);
				delete a.g[c];
				a.h--;
			}
		}
		this.G = null;
	};
	C.prototype.J = function(a, b, c, d) {
		return this.i.add(String(a), b, !1, c, d);
	};
	C.prototype.K = function(a, b, c, d) {
		return this.i.add(String(a), b, !0, c, d);
	};
	function Va(a, b, c, d) {
		b = a.i.g[String(b)];
		if (!b) return !0;
		b = b.concat();
		let e = !0;
		for (let f = 0; f < b.length; ++f) {
			const g = b[f];
			if (g && !g.da && g.capture == c) {
				const k$1 = g.listener, q$1 = g.ha || g.src;
				g.fa && Ga(a.i, g);
				e = k$1.call(q$1, d) !== !1 && e;
			}
		}
		return e && !d.defaultPrevented;
	}
	function Wa(a, b) {
		if (typeof a !== "function") if (a && typeof a.handleEvent == "function") a = p(a.handleEvent, a);
		else throw Error("Invalid listener argument");
		return Number(b) > 2147483647 ? -1 : l.setTimeout(a, b || 0);
	}
	function Xa(a) {
		a.g = Wa(() => {
			a.g = null;
			a.i && (a.i = !1, Xa(a));
		}, a.l);
		const b = a.h;
		a.h = null;
		a.m.apply(null, b);
	}
	class Ya extends w {
		constructor(a, b) {
			super();
			this.m = a;
			this.l = b;
			this.h = null;
			this.i = !1;
			this.g = null;
		}
		j(a) {
			this.h = arguments;
			this.g ? this.i = !0 : Xa(this);
		}
		N() {
			super.N();
			this.g && (l.clearTimeout(this.g), this.g = null, this.i = !1, this.h = null);
		}
	}
	function E(a) {
		w.call(this);
		this.h = a;
		this.g = {};
	}
	t(E, w);
	var Za = [];
	function $a(a) {
		ya(a.g, function(b, c) {
			this.g.hasOwnProperty(c) && Ta(b);
		}, a);
		a.g = {};
	}
	E.prototype.N = function() {
		E.Z.N.call(this);
		$a(this);
	};
	E.prototype.handleEvent = function() {
		throw Error("EventHandler.handleEvent not implemented");
	};
	var ab = l.JSON.stringify;
	var cb = l.JSON.parse;
	var db = class {
		stringify(a) {
			return l.JSON.stringify(a, void 0);
		}
		parse(a) {
			return l.JSON.parse(a, void 0);
		}
	};
	function eb() {}
	function fb() {}
	var H$1 = {
		OPEN: "a",
		hb: "b",
		ERROR: "c",
		tb: "d"
	};
	function gb() {
		x$1.call(this, "d");
	}
	t(gb, x$1);
	function hb() {
		x$1.call(this, "c");
	}
	t(hb, x$1);
	var I = {}, ib = null;
	function jb() {
		return ib = ib || new C();
	}
	I.Ia = "serverreachability";
	function kb(a) {
		x$1.call(this, I.Ia, a);
	}
	t(kb, x$1);
	function lb(a) {
		const b = jb();
		D(b, new kb(b));
	}
	I.STAT_EVENT = "statevent";
	function mb(a, b) {
		x$1.call(this, I.STAT_EVENT, a);
		this.stat = b;
	}
	t(mb, x$1);
	function J$1(a) {
		const b = jb();
		D(b, new mb(b, a));
	}
	I.Ja = "timingevent";
	function nb(a, b) {
		x$1.call(this, I.Ja, a);
		this.size = b;
	}
	t(nb, x$1);
	function ob(a, b) {
		if (typeof a !== "function") throw Error("Fn must not be null and must be a function");
		return l.setTimeout(function() {
			a();
		}, b);
	}
	function pb() {
		this.g = !0;
	}
	pb.prototype.ua = function() {
		this.g = !1;
	};
	function qb(a, b, c, d, e, f) {
		a.info(function() {
			if (a.g) if (f) {
				var g = "";
				var k$1 = f.split("&");
				for (let m = 0; m < k$1.length; m++) {
					var q$1 = k$1[m].split("=");
					if (q$1.length > 1) {
						const r = q$1[0];
						q$1 = q$1[1];
						const A = r.split("_");
						g = A.length >= 2 && A[1] == "type" ? g + (r + "=" + q$1 + "&") : g + (r + "=redacted&");
					}
				}
			} else g = null;
			else g = f;
			return "XMLHTTP REQ (" + d + ") [attempt " + e + "]: " + b + "\n" + c + "\n" + g;
		});
	}
	function rb(a, b, c, d, e, f, g) {
		a.info(function() {
			return "XMLHTTP RESP (" + d + ") [ attempt " + e + "]: " + b + "\n" + c + "\n" + f + " " + g;
		});
	}
	function K$1(a, b, c, d) {
		a.info(function() {
			return "XMLHTTP TEXT (" + b + "): " + sb(a, c) + (d ? " " + d : "");
		});
	}
	function tb(a, b) {
		a.info(function() {
			return "TIMEOUT: " + b;
		});
	}
	pb.prototype.info = function() {};
	function sb(a, b) {
		if (!a.g) return b;
		if (!b) return null;
		try {
			const f = JSON.parse(b);
			if (f) {
				for (a = 0; a < f.length; a++) if (Array.isArray(f[a])) {
					var c = f[a];
					if (!(c.length < 2)) {
						var d = c[1];
						if (Array.isArray(d) && !(d.length < 1)) {
							var e = d[0];
							if (e != "noop" && e != "stop" && e != "close") for (let g = 1; g < d.length; g++) d[g] = "";
						}
					}
				}
			}
			return ab(f);
		} catch (f) {
			return b;
		}
	}
	var ub = {
		NO_ERROR: 0,
		cb: 1,
		qb: 2,
		pb: 3,
		kb: 4,
		ob: 5,
		rb: 6,
		Ga: 7,
		TIMEOUT: 8,
		ub: 9
	};
	var vb = {
		ib: "complete",
		Fb: "success",
		ERROR: "error",
		Ga: "abort",
		xb: "ready",
		yb: "readystatechange",
		TIMEOUT: "timeout",
		sb: "incrementaldata",
		wb: "progress",
		lb: "downloadprogress",
		Nb: "uploadprogress"
	};
	var wb;
	function xb() {}
	t(xb, eb);
	xb.prototype.g = function() {
		return new XMLHttpRequest();
	};
	wb = new xb();
	function L$1(a) {
		return encodeURIComponent(String(a));
	}
	function yb(a) {
		var b = 1;
		a = a.split(":");
		const c = [];
		for (; b > 0 && a.length;) c.push(a.shift()), b--;
		a.length && c.push(a.join(":"));
		return c;
	}
	function N$1(a, b, c, d) {
		this.j = a;
		this.i = b;
		this.l = c;
		this.S = d || 1;
		this.V = new E(this);
		this.H = 45e3;
		this.J = null;
		this.o = !1;
		this.u = this.B = this.A = this.M = this.F = this.T = this.D = null;
		this.G = [];
		this.g = null;
		this.C = 0;
		this.m = this.v = null;
		this.X = -1;
		this.K = !1;
		this.P = 0;
		this.O = null;
		this.W = this.L = this.U = this.R = !1;
		this.h = new zb();
	}
	function zb() {
		this.i = null;
		this.g = "";
		this.h = !1;
	}
	var Ab = {}, Bb = {};
	function Cb(a, b, c) {
		a.M = 1;
		a.A = Db(O$1(b));
		a.u = c;
		a.R = !0;
		Eb(a, null);
	}
	function Eb(a, b) {
		a.F = Date.now();
		Fb(a);
		a.B = O$1(a.A);
		var c = a.B, d = a.S;
		Array.isArray(d) || (d = [String(d)]);
		Gb(c.i, "t", d);
		a.C = 0;
		c = a.j.L;
		a.h = new zb();
		a.g = Hb(a.j, c ? b : null, !a.u);
		a.P > 0 && (a.O = new Ya(p(a.Y, a, a.g), a.P));
		b = a.V;
		c = a.g;
		d = a.ba;
		var e = "readystatechange";
		Array.isArray(e) || (e && (Za[0] = e.toString()), e = Za);
		for (let f = 0; f < e.length; f++) {
			const g = Ka(c, e[f], d || b.handleEvent, !1, b.h || b);
			if (!g) break;
			b.g[g.key] = g;
		}
		b = a.J ? Ba(a.J) : {};
		a.u ? (a.v || (a.v = "POST"), b["Content-Type"] = "application/x-www-form-urlencoded", a.g.ea(a.B, a.v, a.u, b)) : (a.v = "GET", a.g.ea(a.B, a.v, null, b));
		lb();
		qb(a.i, a.v, a.B, a.l, a.S, a.u);
	}
	N$1.prototype.ba = function(a) {
		a = a.target;
		const b = this.O;
		b && P(a) == 3 ? b.j() : this.Y(a);
	};
	N$1.prototype.Y = function(a) {
		try {
			if (a == this.g) a: {
				const k$1 = P(this.g), q$1 = this.g.ya(), m = this.g.ca();
				if (!(k$1 < 3) && (k$1 != 3 || this.g && (this.h.h || this.g.la() || Ib(this.g)))) {
					this.K || k$1 != 4 || q$1 == 7 || (q$1 == 8 || m <= 0 ? lb(3) : lb(2));
					Jb(this);
					var b = this.g.ca();
					this.X = b;
					var c = Kb(this);
					this.o = b == 200;
					rb(this.i, this.v, this.B, this.l, this.S, k$1, b);
					if (this.o) {
						if (this.U && !this.L) {
							b: {
								if (this.g) {
									var d, e = this.g;
									if ((d = e.g ? e.g.getResponseHeader("X-HTTP-Initial-Response") : null) && !y(d)) {
										var f = d;
										break b;
									}
								}
								f = null;
							}
							if (a = f) K$1(this.i, this.l, a, "Initial handshake response via X-HTTP-Initial-Response"), this.L = !0, Lb(this, a);
							else {
								this.o = !1;
								this.m = 3;
								J$1(12);
								Q$1(this);
								Mb(this);
								break a;
							}
						}
						if (this.R) {
							a = !0;
							let r;
							for (; !this.K && this.C < c.length;) if (r = Nb(this, c), r == Bb) {
								k$1 == 4 && (this.m = 4, J$1(14), a = !1);
								K$1(this.i, this.l, null, "[Incomplete Response]");
								break;
							} else if (r == Ab) {
								this.m = 4;
								J$1(15);
								K$1(this.i, this.l, c, "[Invalid Chunk]");
								a = !1;
								break;
							} else K$1(this.i, this.l, r, null), Lb(this, r);
							Ob(this) && this.C != 0 && (this.h.g = this.h.g.slice(this.C), this.C = 0);
							k$1 != 4 || c.length != 0 || this.h.h || (this.m = 1, J$1(16), a = !1);
							this.o = this.o && a;
							if (!a) K$1(this.i, this.l, c, "[Invalid Chunked Response]"), Q$1(this), Mb(this);
							else if (c.length > 0 && !this.W) {
								this.W = !0;
								var g = this.j;
								g.g == this && g.aa && !g.P && (g.j.info("Great, no buffering proxy detected. Bytes received: " + c.length), Pb(g), g.P = !0, J$1(11));
							}
						} else K$1(this.i, this.l, c, null), Lb(this, c);
						k$1 == 4 && Q$1(this);
						this.o && !this.K && (k$1 == 4 ? Qb(this.j, this) : (this.o = !1, Fb(this)));
					} else Rb(this.g), b == 400 && c.indexOf("Unknown SID") > 0 ? (this.m = 3, J$1(12)) : (this.m = 0, J$1(13)), Q$1(this), Mb(this);
				}
			}
		} catch (k$1) {}
	};
	function Kb(a) {
		if (!Ob(a)) return a.g.la();
		const b = Ib(a.g);
		if (b === "") return "";
		let c = "";
		const d = b.length, e = P(a.g) == 4;
		if (!a.h.i) {
			if (typeof TextDecoder === "undefined") return Q$1(a), Mb(a), "";
			a.h.i = new l.TextDecoder();
		}
		for (let f = 0; f < d; f++) a.h.h = !0, c += a.h.i.decode(b[f], { stream: !(e && f == d - 1) });
		b.length = 0;
		a.h.g += c;
		a.C = 0;
		return a.h.g;
	}
	function Ob(a) {
		return a.g ? a.v == "GET" && a.M != 2 && a.j.Aa : !1;
	}
	function Nb(a, b) {
		var c = a.C, d = b.indexOf("\n", c);
		if (d == -1) return Bb;
		c = Number(b.substring(c, d));
		if (isNaN(c)) return Ab;
		d += 1;
		if (d + c > b.length) return Bb;
		b = b.slice(d, d + c);
		a.C = d + c;
		return b;
	}
	N$1.prototype.cancel = function() {
		this.K = !0;
		Q$1(this);
	};
	function Fb(a) {
		a.T = Date.now() + a.H;
		Sb(a, a.H);
	}
	function Sb(a, b) {
		if (a.D != null) throw Error("WatchDog timer not null");
		a.D = ob(p(a.aa, a), b);
	}
	function Jb(a) {
		a.D && (l.clearTimeout(a.D), a.D = null);
	}
	N$1.prototype.aa = function() {
		this.D = null;
		const a = Date.now();
		a - this.T >= 0 ? (tb(this.i, this.B), this.M != 2 && (lb(), J$1(17)), Q$1(this), this.m = 2, Mb(this)) : Sb(this, this.T - a);
	};
	function Mb(a) {
		a.j.I == 0 || a.K || Qb(a.j, a);
	}
	function Q$1(a) {
		Jb(a);
		var b = a.O;
		b && typeof b.dispose == "function" && b.dispose();
		a.O = null;
		$a(a.V);
		a.g && (b = a.g, a.g = null, b.abort(), b.dispose());
	}
	function Lb(a, b) {
		try {
			var c = a.j;
			if (c.I != 0 && (c.g == a || Tb(c.h, a))) {
				if (!a.L && Tb(c.h, a) && c.I == 3) {
					try {
						var d = c.Ba.g.parse(b);
					} catch (m) {
						d = null;
					}
					if (Array.isArray(d) && d.length == 3) {
						var e = d;
						if (e[0] == 0) {
							a: if (!c.v) {
								if (c.g) if (c.g.F + 3e3 < a.F) Ub(c), Vb(c);
								else break a;
								Wb(c);
								J$1(18);
							}
						} else c.xa = e[1], 0 < c.xa - c.K && e[2] < 37500 && c.F && c.A == 0 && !c.C && (c.C = ob(p(c.Va, c), 6e3));
						Xb(c.h) <= 1 && c.ta && (c.ta = void 0);
					} else R(c, 11);
				} else if ((a.L || c.g == a) && Ub(c), !y(b)) for (e = c.Ba.g.parse(b), b = 0; b < e.length; b++) {
					let m = e[b];
					const r = m[0];
					if (!(r <= c.K)) if (c.K = r, m = m[1], c.I == 2) if (m[0] == "c") {
						c.M = m[1];
						c.ba = m[2];
						const A = m[3];
						A != null && (c.ka = A, c.j.info("VER=" + c.ka));
						const M$1 = m[4];
						M$1 != null && (c.za = M$1, c.j.info("SVER=" + c.za));
						const F$1 = m[5];
						F$1 != null && typeof F$1 === "number" && F$1 > 0 && (d = 1.5 * F$1, c.O = d, c.j.info("backChannelRequestTimeoutMs_=" + d));
						d = c;
						const G$1 = a.g;
						if (G$1) {
							const za = G$1.g ? G$1.g.getResponseHeader("X-Client-Wire-Protocol") : null;
							if (za) {
								var f = d.h;
								f.g || za.indexOf("spdy") == -1 && za.indexOf("quic") == -1 && za.indexOf("h2") == -1 || (f.j = f.l, f.g = /* @__PURE__ */ new Set(), f.h && (Yb(f, f.h), f.h = null));
							}
							if (d.G) {
								const bb = G$1.g ? G$1.g.getResponseHeader("X-HTTP-Session-Id") : null;
								bb && (d.wa = bb, S(d.J, d.G, bb));
							}
						}
						c.I = 3;
						c.l && c.l.ra();
						c.aa && (c.T = Date.now() - a.F, c.j.info("Handshake RTT: " + c.T + "ms"));
						d = c;
						var g = a;
						d.na = Zb(d, d.L ? d.ba : null, d.W);
						if (g.L) {
							$b(d.h, g);
							var k$1 = g, q$1 = d.O;
							q$1 && (k$1.H = q$1);
							k$1.D && (Jb(k$1), Fb(k$1));
							d.g = g;
						} else ac(d);
						c.i.length > 0 && bc(c);
					} else m[0] != "stop" && m[0] != "close" || R(c, 7);
					else c.I == 3 && (m[0] == "stop" || m[0] == "close" ? m[0] == "stop" ? R(c, 7) : cc(c) : m[0] != "noop" && c.l && c.l.qa(m), c.A = 0);
				}
			}
			lb(4);
		} catch (m) {}
	}
	var dc = class {
		constructor(a, b) {
			this.g = a;
			this.map = b;
		}
	};
	function ec(a) {
		this.l = a || 10;
		l.PerformanceNavigationTiming ? (a = l.performance.getEntriesByType("navigation"), a = a.length > 0 && (a[0].nextHopProtocol == "hq" || a[0].nextHopProtocol == "h2")) : a = !!(l.chrome && l.chrome.loadTimes && l.chrome.loadTimes() && l.chrome.loadTimes().wasFetchedViaSpdy);
		this.j = a ? this.l : 1;
		this.g = null;
		this.j > 1 && (this.g = /* @__PURE__ */ new Set());
		this.h = null;
		this.i = [];
	}
	function fc(a) {
		return a.h ? !0 : a.g ? a.g.size >= a.j : !1;
	}
	function Xb(a) {
		return a.h ? 1 : a.g ? a.g.size : 0;
	}
	function Tb(a, b) {
		return a.h ? a.h == b : a.g ? a.g.has(b) : !1;
	}
	function Yb(a, b) {
		a.g ? a.g.add(b) : a.h = b;
	}
	function $b(a, b) {
		a.h && a.h == b ? a.h = null : a.g && a.g.has(b) && a.g.delete(b);
	}
	ec.prototype.cancel = function() {
		this.i = hc(this);
		if (this.h) this.h.cancel(), this.h = null;
		else if (this.g && this.g.size !== 0) {
			for (const a of this.g.values()) a.cancel();
			this.g.clear();
		}
	};
	function hc(a) {
		if (a.h != null) return a.i.concat(a.h.G);
		if (a.g != null && a.g.size !== 0) {
			let b = a.i;
			for (const c of a.g.values()) b = b.concat(c.G);
			return b;
		}
		return ja(a.i);
	}
	var ic = RegExp("^(?:([^:/?#.]+):)?(?://(?:([^\\\\/?#]*)@)?([^\\\\/?#]*?)(?::([0-9]+))?(?=[\\\\/?#]|$))?([^?#]+)?(?:\\?([^#]*))?(?:#([\\s\\S]*))?$");
	function jc(a, b) {
		if (a) {
			a = a.split("&");
			for (let c = 0; c < a.length; c++) {
				const d = a[c].indexOf("=");
				let e, f = null;
				d >= 0 ? (e = a[c].substring(0, d), f = a[c].substring(d + 1)) : e = a[c];
				b(e, f ? decodeURIComponent(f.replace(/\+/g, " ")) : "");
			}
		}
	}
	function T(a) {
		this.g = this.o = this.j = "";
		this.u = null;
		this.m = this.h = "";
		this.l = !1;
		let b;
		a instanceof T ? (this.l = a.l, kc(this, a.j), this.o = a.o, this.g = a.g, lc(this, a.u), this.h = a.h, mc(this, nc(a.i)), this.m = a.m) : a && (b = String(a).match(ic)) ? (this.l = !1, kc(this, b[1] || "", !0), this.o = oc(b[2] || ""), this.g = oc(b[3] || "", !0), lc(this, b[4]), this.h = oc(b[5] || "", !0), mc(this, b[6] || "", !0), this.m = oc(b[7] || "")) : (this.l = !1, this.i = new pc(null, this.l));
	}
	T.prototype.toString = function() {
		const a = [];
		var b = this.j;
		b && a.push(qc(b, rc, !0), ":");
		var c = this.g;
		if (c || b == "file") a.push("//"), (b = this.o) && a.push(qc(b, rc, !0), "@"), a.push(L$1(c).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.u, c != null && a.push(":", String(c));
		if (c = this.h) this.g && c.charAt(0) != "/" && a.push("/"), a.push(qc(c, c.charAt(0) == "/" ? sc : tc, !0));
		(c = this.i.toString()) && a.push("?", c);
		(c = this.m) && a.push("#", qc(c, uc));
		return a.join("");
	};
	T.prototype.resolve = function(a) {
		const b = O$1(this);
		let c = !!a.j;
		c ? kc(b, a.j) : c = !!a.o;
		c ? b.o = a.o : c = !!a.g;
		c ? b.g = a.g : c = a.u != null;
		var d = a.h;
		if (c) lc(b, a.u);
		else if (c = !!a.h) {
			if (d.charAt(0) != "/") if (this.g && !this.h) d = "/" + d;
			else {
				var e = b.h.lastIndexOf("/");
				e != -1 && (d = b.h.slice(0, e + 1) + d);
			}
			e = d;
			if (e == ".." || e == ".") d = "";
			else if (e.indexOf("./") != -1 || e.indexOf("/.") != -1) {
				d = e.lastIndexOf("/", 0) == 0;
				e = e.split("/");
				const f = [];
				for (let g = 0; g < e.length;) {
					const k$1 = e[g++];
					k$1 == "." ? d && g == e.length && f.push("") : k$1 == ".." ? ((f.length > 1 || f.length == 1 && f[0] != "") && f.pop(), d && g == e.length && f.push("")) : (f.push(k$1), d = !0);
				}
				d = f.join("/");
			} else d = e;
		}
		c ? b.h = d : c = a.i.toString() !== "";
		c ? mc(b, nc(a.i)) : c = !!a.m;
		c && (b.m = a.m);
		return b;
	};
	function O$1(a) {
		return new T(a);
	}
	function kc(a, b, c) {
		a.j = c ? oc(b, !0) : b;
		a.j && (a.j = a.j.replace(/:$/, ""));
	}
	function lc(a, b) {
		if (b) {
			b = Number(b);
			if (isNaN(b) || b < 0) throw Error("Bad port number " + b);
			a.u = b;
		} else a.u = null;
	}
	function mc(a, b, c) {
		b instanceof pc ? (a.i = b, vc(a.i, a.l)) : (c || (b = qc(b, wc)), a.i = new pc(b, a.l));
	}
	function S(a, b, c) {
		a.i.set(b, c);
	}
	function Db(a) {
		S(a, "zx", Math.floor(Math.random() * 2147483648).toString(36) + Math.abs(Math.floor(Math.random() * 2147483648) ^ Date.now()).toString(36));
		return a;
	}
	function oc(a, b) {
		return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : "";
	}
	function qc(a, b, c) {
		return typeof a === "string" ? (a = encodeURI(a).replace(b, xc), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null;
	}
	function xc(a) {
		a = a.charCodeAt(0);
		return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16);
	}
	var rc = /[#\/\?@]/g, tc = /[#\?:]/g, sc = /[#\?]/g, wc = /[#\?@]/g, uc = /#/g;
	function pc(a, b) {
		this.h = this.g = null;
		this.i = a || null;
		this.j = !!b;
	}
	function U$1(a) {
		a.g || (a.g = /* @__PURE__ */ new Map(), a.h = 0, a.i && jc(a.i, function(b, c) {
			a.add(decodeURIComponent(b.replace(/\+/g, " ")), c);
		}));
	}
	h = pc.prototype;
	h.add = function(a, b) {
		U$1(this);
		this.i = null;
		a = V(this, a);
		let c = this.g.get(a);
		c || this.g.set(a, c = []);
		c.push(b);
		this.h += 1;
		return this;
	};
	function yc(a, b) {
		U$1(a);
		b = V(a, b);
		a.g.has(b) && (a.i = null, a.h -= a.g.get(b).length, a.g.delete(b));
	}
	function zc(a, b) {
		U$1(a);
		b = V(a, b);
		return a.g.has(b);
	}
	h.forEach = function(a, b) {
		U$1(this);
		this.g.forEach(function(c, d) {
			c.forEach(function(e) {
				a.call(b, e, d, this);
			}, this);
		}, this);
	};
	function Ac(a, b) {
		U$1(a);
		let c = [];
		if (typeof b === "string") zc(a, b) && (c = c.concat(a.g.get(V(a, b))));
		else for (a = Array.from(a.g.values()), b = 0; b < a.length; b++) c = c.concat(a[b]);
		return c;
	}
	h.set = function(a, b) {
		U$1(this);
		this.i = null;
		a = V(this, a);
		zc(this, a) && (this.h -= this.g.get(a).length);
		this.g.set(a, [b]);
		this.h += 1;
		return this;
	};
	h.get = function(a, b) {
		if (!a) return b;
		a = Ac(this, a);
		return a.length > 0 ? String(a[0]) : b;
	};
	function Gb(a, b, c) {
		yc(a, b);
		c.length > 0 && (a.i = null, a.g.set(V(a, b), ja(c)), a.h += c.length);
	}
	h.toString = function() {
		if (this.i) return this.i;
		if (!this.g) return "";
		const a = [], b = Array.from(this.g.keys());
		for (let d = 0; d < b.length; d++) {
			var c = b[d];
			const e = L$1(c);
			c = Ac(this, c);
			for (let f = 0; f < c.length; f++) {
				let g = e;
				c[f] !== "" && (g += "=" + L$1(c[f]));
				a.push(g);
			}
		}
		return this.i = a.join("&");
	};
	function nc(a) {
		const b = new pc();
		b.i = a.i;
		a.g && (b.g = new Map(a.g), b.h = a.h);
		return b;
	}
	function V(a, b) {
		b = String(b);
		a.j && (b = b.toLowerCase());
		return b;
	}
	function vc(a, b) {
		b && !a.j && (U$1(a), a.i = null, a.g.forEach(function(c, d) {
			const e = d.toLowerCase();
			d != e && (yc(this, d), Gb(this, e, c));
		}, a));
		a.j = b;
	}
	function Bc(a, b) {
		const c = new pb();
		if (l.Image) {
			const d = new Image();
			d.onload = ha(W$1, c, "TestLoadImage: loaded", !0, b, d);
			d.onerror = ha(W$1, c, "TestLoadImage: error", !1, b, d);
			d.onabort = ha(W$1, c, "TestLoadImage: abort", !1, b, d);
			d.ontimeout = ha(W$1, c, "TestLoadImage: timeout", !1, b, d);
			l.setTimeout(function() {
				if (d.ontimeout) d.ontimeout();
			}, 1e4);
			d.src = a;
		} else b(!1);
	}
	function Cc(a, b) {
		const c = new pb(), d = new AbortController(), e = setTimeout(() => {
			d.abort();
			W$1(c, "TestPingServer: timeout", !1, b);
		}, 1e4);
		fetch(a, { signal: d.signal }).then((f) => {
			clearTimeout(e);
			f.ok ? W$1(c, "TestPingServer: ok", !0, b) : W$1(c, "TestPingServer: server error", !1, b);
		}).catch(() => {
			clearTimeout(e);
			W$1(c, "TestPingServer: error", !1, b);
		});
	}
	function W$1(a, b, c, d, e) {
		try {
			e && (e.onload = null, e.onerror = null, e.onabort = null, e.ontimeout = null), d(c);
		} catch (f) {}
	}
	function Dc() {
		this.g = new db();
	}
	function Ec(a) {
		this.i = a.Sb || null;
		this.h = a.ab || !1;
	}
	t(Ec, eb);
	Ec.prototype.g = function() {
		return new Fc(this.i, this.h);
	};
	function Fc(a, b) {
		C.call(this);
		this.H = a;
		this.o = b;
		this.m = void 0;
		this.status = this.readyState = 0;
		this.responseType = this.responseText = this.response = this.statusText = "";
		this.onreadystatechange = null;
		this.A = new Headers();
		this.h = null;
		this.F = "GET";
		this.D = "";
		this.g = !1;
		this.B = this.j = this.l = null;
		this.v = new AbortController();
	}
	t(Fc, C);
	h = Fc.prototype;
	h.open = function(a, b) {
		if (this.readyState != 0) throw this.abort(), Error("Error reopening a connection");
		this.F = a;
		this.D = b;
		this.readyState = 1;
		Gc(this);
	};
	h.send = function(a) {
		if (this.readyState != 1) throw this.abort(), Error("need to call open() first. ");
		if (this.v.signal.aborted) throw this.abort(), Error("Request was aborted.");
		this.g = !0;
		const b = {
			headers: this.A,
			method: this.F,
			credentials: this.m,
			cache: void 0,
			signal: this.v.signal
		};
		a && (b.body = a);
		(this.H || l).fetch(new Request(this.D, b)).then(this.Pa.bind(this), this.ga.bind(this));
	};
	h.abort = function() {
		this.response = this.responseText = "";
		this.A = new Headers();
		this.status = 0;
		this.v.abort();
		this.j && this.j.cancel("Request was aborted.").catch(() => {});
		this.readyState >= 1 && this.g && this.readyState != 4 && (this.g = !1, Hc(this));
		this.readyState = 0;
	};
	h.Pa = function(a) {
		if (this.g && (this.l = a, this.h || (this.status = this.l.status, this.statusText = this.l.statusText, this.h = a.headers, this.readyState = 2, Gc(this)), this.g && (this.readyState = 3, Gc(this), this.g))) if (this.responseType === "arraybuffer") a.arrayBuffer().then(this.Na.bind(this), this.ga.bind(this));
		else if (typeof l.ReadableStream !== "undefined" && "body" in a) {
			this.j = a.body.getReader();
			if (this.o) {
				if (this.responseType) throw Error("responseType must be empty for \"streamBinaryChunks\" mode responses.");
				this.response = [];
			} else this.response = this.responseText = "", this.B = new TextDecoder();
			Ic(this);
		} else a.text().then(this.Oa.bind(this), this.ga.bind(this));
	};
	function Ic(a) {
		a.j.read().then(a.Ma.bind(a)).catch(a.ga.bind(a));
	}
	h.Ma = function(a) {
		if (this.g) {
			if (this.o && a.value) this.response.push(a.value);
			else if (!this.o) {
				var b = a.value ? a.value : new Uint8Array(0);
				if (b = this.B.decode(b, { stream: !a.done })) this.response = this.responseText += b;
			}
			a.done ? Hc(this) : Gc(this);
			this.readyState == 3 && Ic(this);
		}
	};
	h.Oa = function(a) {
		this.g && (this.response = this.responseText = a, Hc(this));
	};
	h.Na = function(a) {
		this.g && (this.response = a, Hc(this));
	};
	h.ga = function() {
		this.g && Hc(this);
	};
	function Hc(a) {
		a.readyState = 4;
		a.l = null;
		a.j = null;
		a.B = null;
		Gc(a);
	}
	h.setRequestHeader = function(a, b) {
		this.A.append(a, b);
	};
	h.getResponseHeader = function(a) {
		return this.h ? this.h.get(a.toLowerCase()) || "" : "";
	};
	h.getAllResponseHeaders = function() {
		if (!this.h) return "";
		const a = [], b = this.h.entries();
		for (var c = b.next(); !c.done;) c = c.value, a.push(c[0] + ": " + c[1]), c = b.next();
		return a.join("\r\n");
	};
	function Gc(a) {
		a.onreadystatechange && a.onreadystatechange.call(a);
	}
	Object.defineProperty(Fc.prototype, "withCredentials", {
		get: function() {
			return this.m === "include";
		},
		set: function(a) {
			this.m = a ? "include" : "same-origin";
		}
	});
	function Jc(a) {
		let b = "";
		ya(a, function(c, d) {
			b += d;
			b += ":";
			b += c;
			b += "\r\n";
		});
		return b;
	}
	function Kc(a, b, c) {
		a: {
			for (d in c) {
				var d = !1;
				break a;
			}
			d = !0;
		}
		d || (c = Jc(c), typeof a === "string" ? c != null && L$1(c) : S(a, b, c));
	}
	function X$1(a) {
		C.call(this);
		this.headers = /* @__PURE__ */ new Map();
		this.L = a || null;
		this.h = !1;
		this.g = null;
		this.D = "";
		this.o = 0;
		this.l = "";
		this.j = this.B = this.v = this.A = !1;
		this.m = null;
		this.F = "";
		this.H = !1;
	}
	t(X$1, C);
	var Lc = /^https?$/i, Mc = ["POST", "PUT"];
	h = X$1.prototype;
	h.Fa = function(a) {
		this.H = a;
	};
	h.ea = function(a, b, c, d) {
		if (this.g) throw Error("[goog.net.XhrIo] Object is active with another request=" + this.D + "; newUri=" + a);
		b = b ? b.toUpperCase() : "GET";
		this.D = a;
		this.l = "";
		this.o = 0;
		this.A = !1;
		this.h = !0;
		this.g = this.L ? this.L.g() : wb.g();
		this.g.onreadystatechange = ia(p(this.Ca, this));
		try {
			this.B = !0, this.g.open(b, String(a), !0), this.B = !1;
		} catch (f) {
			Nc(this, f);
			return;
		}
		a = c || "";
		c = new Map(this.headers);
		if (d) if (Object.getPrototypeOf(d) === Object.prototype) for (var e in d) c.set(e, d[e]);
		else if (typeof d.keys === "function" && typeof d.get === "function") for (const f of d.keys()) c.set(f, d.get(f));
		else throw Error("Unknown input type for opt_headers: " + String(d));
		d = Array.from(c.keys()).find((f) => "content-type" == f.toLowerCase());
		e = l.FormData && a instanceof l.FormData;
		!(Array.prototype.indexOf.call(Mc, b, void 0) >= 0) || d || e || c.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
		for (const [f, g] of c) this.g.setRequestHeader(f, g);
		this.F && (this.g.responseType = this.F);
		"withCredentials" in this.g && this.g.withCredentials !== this.H && (this.g.withCredentials = this.H);
		try {
			this.m && (clearTimeout(this.m), this.m = null), this.v = !0, this.g.send(a), this.v = !1;
		} catch (f) {
			Nc(this, f);
		}
	};
	function Nc(a, b) {
		a.h = !1;
		a.g && (a.j = !0, a.g.abort(), a.j = !1);
		a.l = b;
		a.o = 5;
		Oc(a);
		Pc(a);
	}
	function Oc(a) {
		a.A || (a.A = !0, D(a, "complete"), D(a, "error"));
	}
	h.abort = function(a) {
		this.g && this.h && (this.h = !1, this.j = !0, this.g.abort(), this.j = !1, this.o = a || 7, D(this, "complete"), D(this, "abort"), Pc(this));
	};
	h.N = function() {
		this.g && (this.h && (this.h = !1, this.j = !0, this.g.abort(), this.j = !1), Pc(this, !0));
		X$1.Z.N.call(this);
	};
	h.Ca = function() {
		this.u || (this.B || this.v || this.j ? Qc(this) : this.Xa());
	};
	h.Xa = function() {
		Qc(this);
	};
	function Qc(a) {
		if (a.h && typeof ea != "undefined") {
			if (a.v && P(a) == 4) setTimeout(a.Ca.bind(a), 0);
			else if (D(a, "readystatechange"), P(a) == 4) {
				a.h = !1;
				try {
					const f = a.ca();
					a: switch (f) {
						case 200:
						case 201:
						case 202:
						case 204:
						case 206:
						case 304:
						case 1223:
							var b = !0;
							break a;
						default: b = !1;
					}
					var c;
					if (!(c = b)) {
						var d;
						if (d = f === 0) {
							let g = String(a.D).match(ic)[1] || null;
							!g && l.self && l.self.location && (g = l.self.location.protocol.slice(0, -1));
							d = !Lc.test(g ? g.toLowerCase() : "");
						}
						c = d;
					}
					if (c) D(a, "complete"), D(a, "success");
					else {
						a.o = 6;
						try {
							var e = P(a) > 2 ? a.g.statusText : "";
						} catch (g) {
							e = "";
						}
						a.l = e + " [" + a.ca() + "]";
						Oc(a);
					}
				} finally {
					Pc(a);
				}
			}
		}
	}
	function Pc(a, b) {
		if (a.g) {
			a.m && (clearTimeout(a.m), a.m = null);
			const c = a.g;
			a.g = null;
			b || D(a, "ready");
			try {
				c.onreadystatechange = null;
			} catch (d) {}
		}
	}
	h.isActive = function() {
		return !!this.g;
	};
	function P(a) {
		return a.g ? a.g.readyState : 0;
	}
	h.ca = function() {
		try {
			return P(this) > 2 ? this.g.status : -1;
		} catch (a) {
			return -1;
		}
	};
	h.la = function() {
		try {
			return this.g ? this.g.responseText : "";
		} catch (a) {
			return "";
		}
	};
	h.La = function(a) {
		if (this.g) {
			var b = this.g.responseText;
			a && b.indexOf(a) == 0 && (b = b.substring(a.length));
			return cb(b);
		}
	};
	function Ib(a) {
		try {
			if (!a.g) return null;
			if ("response" in a.g) return a.g.response;
			switch (a.F) {
				case "":
				case "text": return a.g.responseText;
				case "arraybuffer": if ("mozResponseArrayBuffer" in a.g) return a.g.mozResponseArrayBuffer;
			}
			return null;
		} catch (b) {
			return null;
		}
	}
	function Rb(a) {
		const b = {};
		a = (a.g && P(a) >= 2 ? a.g.getAllResponseHeaders() || "" : "").split("\r\n");
		for (let d = 0; d < a.length; d++) {
			if (y(a[d])) continue;
			var c = yb(a[d]);
			const e = c[0];
			c = c[1];
			if (typeof c !== "string") continue;
			c = c.trim();
			const f = b[e] || [];
			b[e] = f;
			f.push(c);
		}
		Aa(b, function(d) {
			return d.join(", ");
		});
	}
	h.ya = function() {
		return this.o;
	};
	h.Ha = function() {
		return typeof this.l === "string" ? this.l : String(this.l);
	};
	function Rc(a, b, c) {
		return c && c.internalChannelParams ? c.internalChannelParams[a] || b : b;
	}
	function Sc(a) {
		this.za = 0;
		this.i = [];
		this.j = new pb();
		this.ba = this.na = this.J = this.W = this.g = this.wa = this.G = this.H = this.u = this.U = this.o = null;
		this.Ya = this.V = 0;
		this.Sa = Rc("failFast", !1, a);
		this.F = this.C = this.v = this.m = this.l = null;
		this.X = !0;
		this.xa = this.K = -1;
		this.Y = this.A = this.D = 0;
		this.Qa = Rc("baseRetryDelayMs", 5e3, a);
		this.Za = Rc("retryDelaySeedMs", 1e4, a);
		this.Ta = Rc("forwardChannelMaxRetries", 2, a);
		this.va = Rc("forwardChannelRequestTimeoutMs", 2e4, a);
		this.ma = a && a.xmlHttpFactory || void 0;
		this.Ua = a && a.Rb || void 0;
		this.Aa = a && a.useFetchStreams || !1;
		this.O = void 0;
		this.L = a && a.supportsCrossDomainXhr || !1;
		this.M = "";
		this.h = new ec(a && a.concurrentRequestLimit);
		this.Ba = new Dc();
		this.S = a && a.fastHandshake || !1;
		this.R = a && a.encodeInitMessageHeaders || !1;
		this.S && this.R && (this.R = !1);
		this.Ra = a && a.Pb || !1;
		a && a.ua && this.j.ua();
		a && a.forceLongPolling && (this.X = !1);
		this.aa = !this.S && this.X && a && a.detectBufferingProxy || !1;
		this.ia = void 0;
		a && a.longPollingTimeout && a.longPollingTimeout > 0 && (this.ia = a.longPollingTimeout);
		this.ta = void 0;
		this.T = 0;
		this.P = !1;
		this.ja = this.B = null;
	}
	h = Sc.prototype;
	h.ka = 8;
	h.I = 1;
	h.connect = function(a, b, c, d) {
		J$1(0);
		this.W = a;
		this.H = b || {};
		c && d !== void 0 && (this.H.OSID = c, this.H.OAID = d);
		this.F = this.X;
		this.J = Zb(this, null, this.W);
		bc(this);
	};
	function cc(a) {
		Tc(a);
		if (a.I == 3) {
			var b = a.V++, c = O$1(a.J);
			S(c, "SID", a.M);
			S(c, "RID", b);
			S(c, "TYPE", "terminate");
			Uc(a, c);
			b = new N$1(a, a.j, b);
			b.M = 2;
			b.A = Db(O$1(c));
			c = !1;
			if (l.navigator && l.navigator.sendBeacon) try {
				c = l.navigator.sendBeacon(b.A.toString(), "");
			} catch (d) {}
			!c && l.Image && (new Image().src = b.A, c = !0);
			c || (b.g = Hb(b.j, null), b.g.ea(b.A));
			b.F = Date.now();
			Fb(b);
		}
		Vc(a);
	}
	function Vb(a) {
		a.g && (Pb(a), a.g.cancel(), a.g = null);
	}
	function Tc(a) {
		Vb(a);
		a.v && (l.clearTimeout(a.v), a.v = null);
		Ub(a);
		a.h.cancel();
		a.m && (typeof a.m === "number" && l.clearTimeout(a.m), a.m = null);
	}
	function bc(a) {
		if (!fc(a.h) && !a.m) {
			a.m = !0;
			var b = a.Ea;
			u || ta();
			v || (u(), v = !0);
			oa.add(b, a);
			a.D = 0;
		}
	}
	function Wc(a, b) {
		if (Xb(a.h) >= a.h.j - (a.m ? 1 : 0)) return !1;
		if (a.m) return a.i = b.G.concat(a.i), !0;
		if (a.I == 1 || a.I == 2 || a.D >= (a.Sa ? 0 : a.Ta)) return !1;
		a.m = ob(p(a.Ea, a, b), Xc(a, a.D));
		a.D++;
		return !0;
	}
	h.Ea = function(a) {
		if (this.m) if (this.m = null, this.I == 1) {
			if (!a) {
				this.V = Math.floor(Math.random() * 1e5);
				a = this.V++;
				const e = new N$1(this, this.j, a);
				let f = this.o;
				this.U && (f ? (f = Ba(f), Da(f, this.U)) : f = this.U);
				this.u !== null || this.R || (e.J = f, f = null);
				if (this.S) a: {
					var b = 0;
					for (var c = 0; c < this.i.length; c++) {
						b: {
							var d = this.i[c];
							if ("__data__" in d.map && (d = d.map.__data__, typeof d === "string")) {
								d = d.length;
								break b;
							}
							d = void 0;
						}
						if (d === void 0) break;
						b += d;
						if (b > 4096) {
							b = c;
							break a;
						}
						if (b === 4096 || c === this.i.length - 1) {
							b = c + 1;
							break a;
						}
					}
					b = 1e3;
				}
				else b = 1e3;
				b = Yc(this, e, b);
				c = O$1(this.J);
				S(c, "RID", a);
				S(c, "CVER", 22);
				this.G && S(c, "X-HTTP-Session-Id", this.G);
				Uc(this, c);
				f && (this.R ? b = "headers=" + L$1(Jc(f)) + "&" + b : this.u && Kc(c, this.u, f));
				Yb(this.h, e);
				this.Ra && S(c, "TYPE", "init");
				this.S ? (S(c, "$req", b), S(c, "SID", "null"), e.U = !0, Cb(e, c, null)) : Cb(e, c, b);
				this.I = 2;
			}
		} else this.I == 3 && (a ? Zc(this, a) : this.i.length == 0 || fc(this.h) || Zc(this));
	};
	function Zc(a, b) {
		var c;
		b ? c = b.l : c = a.V++;
		const d = O$1(a.J);
		S(d, "SID", a.M);
		S(d, "RID", c);
		S(d, "AID", a.K);
		Uc(a, d);
		a.u && a.o && Kc(d, a.u, a.o);
		c = new N$1(a, a.j, c, a.D + 1);
		a.u === null && (c.J = a.o);
		b && (a.i = b.G.concat(a.i));
		b = Yc(a, c, 1e3);
		c.H = Math.round(a.va * .5) + Math.round(a.va * .5 * Math.random());
		Yb(a.h, c);
		Cb(c, d, b);
	}
	function Uc(a, b) {
		a.H && ya(a.H, function(c, d) {
			S(b, d, c);
		});
		a.l && ya({}, function(c, d) {
			S(b, d, c);
		});
	}
	function Yc(a, b, c) {
		c = Math.min(a.i.length, c);
		const d = a.l ? p(a.l.Ka, a.l, a) : null;
		a: {
			var e = a.i;
			let k$1 = -1;
			for (;;) {
				const q$1 = ["count=" + c];
				k$1 == -1 ? c > 0 ? (k$1 = e[0].g, q$1.push("ofs=" + k$1)) : k$1 = 0 : q$1.push("ofs=" + k$1);
				let m = !0;
				for (let r = 0; r < c; r++) {
					var f = e[r].g;
					const A = e[r].map;
					f -= k$1;
					if (f < 0) k$1 = Math.max(0, e[r].g - 100), m = !1;
					else try {
						f = "req" + f + "_" || "";
						try {
							var g = A instanceof Map ? A : Object.entries(A);
							for (const [M$1, F$1] of g) {
								let G$1 = F$1;
								n(F$1) && (G$1 = ab(F$1));
								q$1.push(f + M$1 + "=" + encodeURIComponent(G$1));
							}
						} catch (M$1) {
							throw q$1.push(f + "type=_badmap"), M$1;
						}
					} catch (M$1) {
						d && d(A);
					}
				}
				if (m) {
					g = q$1.join("&");
					break a;
				}
			}
			g = void 0;
		}
		a = a.i.splice(0, c);
		b.G = a;
		return g;
	}
	function ac(a) {
		if (!a.g && !a.v) {
			a.Y = 1;
			var b = a.Da;
			u || ta();
			v || (u(), v = !0);
			oa.add(b, a);
			a.A = 0;
		}
	}
	function Wb(a) {
		if (a.g || a.v || a.A >= 3) return !1;
		a.Y++;
		a.v = ob(p(a.Da, a), Xc(a, a.A));
		a.A++;
		return !0;
	}
	h.Da = function() {
		this.v = null;
		$c(this);
		if (this.aa && !(this.P || this.g == null || this.T <= 0)) {
			var a = 4 * this.T;
			this.j.info("BP detection timer enabled: " + a);
			this.B = ob(p(this.Wa, this), a);
		}
	};
	h.Wa = function() {
		this.B && (this.B = null, this.j.info("BP detection timeout reached."), this.j.info("Buffering proxy detected and switch to long-polling!"), this.F = !1, this.P = !0, J$1(10), Vb(this), $c(this));
	};
	function Pb(a) {
		a.B != null && (l.clearTimeout(a.B), a.B = null);
	}
	function $c(a) {
		a.g = new N$1(a, a.j, "rpc", a.Y);
		a.u === null && (a.g.J = a.o);
		a.g.P = 0;
		var b = O$1(a.na);
		S(b, "RID", "rpc");
		S(b, "SID", a.M);
		S(b, "AID", a.K);
		S(b, "CI", a.F ? "0" : "1");
		!a.F && a.ia && S(b, "TO", a.ia);
		S(b, "TYPE", "xmlhttp");
		Uc(a, b);
		a.u && a.o && Kc(b, a.u, a.o);
		a.O && (a.g.H = a.O);
		var c = a.g;
		a = a.ba;
		c.M = 1;
		c.A = Db(O$1(b));
		c.u = null;
		c.R = !0;
		Eb(c, a);
	}
	h.Va = function() {
		this.C != null && (this.C = null, Vb(this), Wb(this), J$1(19));
	};
	function Ub(a) {
		a.C != null && (l.clearTimeout(a.C), a.C = null);
	}
	function Qb(a, b) {
		var c = null;
		if (a.g == b) {
			Ub(a);
			Pb(a);
			a.g = null;
			var d = 2;
		} else if (Tb(a.h, b)) c = b.G, $b(a.h, b), d = 1;
		else return;
		if (a.I != 0) {
			if (b.o) if (d == 1) {
				c = b.u ? b.u.length : 0;
				b = Date.now() - b.F;
				var e = a.D;
				d = jb();
				D(d, new nb(d, c));
				bc(a);
			} else ac(a);
			else if (e = b.m, e == 3 || e == 0 && b.X > 0 || !(d == 1 && Wc(a, b) || d == 2 && Wb(a))) switch (c && c.length > 0 && (b = a.h, b.i = b.i.concat(c)), e) {
				case 1:
					R(a, 5);
					break;
				case 4:
					R(a, 10);
					break;
				case 3:
					R(a, 6);
					break;
				default: R(a, 2);
			}
		}
	}
	function Xc(a, b) {
		let c = a.Qa + Math.floor(Math.random() * a.Za);
		a.isActive() || (c *= 2);
		return c * b;
	}
	function R(a, b) {
		a.j.info("Error code " + b);
		if (b == 2) {
			var c = p(a.bb, a), d = a.Ua;
			const e = !d;
			d = new T(d || "//www.google.com/images/cleardot.gif");
			l.location && l.location.protocol == "http" || kc(d, "https");
			Db(d);
			e ? Bc(d.toString(), c) : Cc(d.toString(), c);
		} else J$1(2);
		a.I = 0;
		a.l && a.l.pa(b);
		Vc(a);
		Tc(a);
	}
	h.bb = function(a) {
		a ? (this.j.info("Successfully pinged google.com"), J$1(2)) : (this.j.info("Failed to ping google.com"), J$1(1));
	};
	function Vc(a) {
		a.I = 0;
		a.ja = [];
		if (a.l) {
			const b = hc(a.h);
			if (b.length != 0 || a.i.length != 0) ka(a.ja, b), ka(a.ja, a.i), a.h.i.length = 0, ja(a.i), a.i.length = 0;
			a.l.oa();
		}
	}
	function Zb(a, b, c) {
		var d = c instanceof T ? O$1(c) : new T(c);
		if (d.g != "") b && (d.g = b + "." + d.g), lc(d, d.u);
		else {
			var e = l.location;
			d = e.protocol;
			b = b ? b + "." + e.hostname : e.hostname;
			e = +e.port;
			const f = new T(null);
			d && kc(f, d);
			b && (f.g = b);
			e && lc(f, e);
			c && (f.h = c);
			d = f;
		}
		c = a.G;
		b = a.wa;
		c && b && S(d, c, b);
		S(d, "VER", a.ka);
		Uc(a, d);
		return d;
	}
	function Hb(a, b, c) {
		if (b && !a.L) throw Error("Can't create secondary domain capable XhrIo object.");
		b = a.Aa && !a.ma ? new X$1(new Ec({ ab: c })) : new X$1(a.ma);
		b.Fa(a.L);
		return b;
	}
	h.isActive = function() {
		return !!this.l && this.l.isActive(this);
	};
	function ad() {}
	h = ad.prototype;
	h.ra = function() {};
	h.qa = function() {};
	h.pa = function() {};
	h.oa = function() {};
	h.isActive = function() {
		return !0;
	};
	h.Ka = function() {};
	function bd() {}
	bd.prototype.g = function(a, b) {
		return new Y$1(a, b);
	};
	function Y$1(a, b) {
		C.call(this);
		this.g = new Sc(b);
		this.l = a;
		this.h = b && b.messageUrlParams || null;
		a = b && b.messageHeaders || null;
		b && b.clientProtocolHeaderRequired && (a ? a["X-Client-Protocol"] = "webchannel" : a = { "X-Client-Protocol": "webchannel" });
		this.g.o = a;
		a = b && b.initMessageHeaders || null;
		b && b.messageContentType && (a ? a["X-WebChannel-Content-Type"] = b.messageContentType : a = { "X-WebChannel-Content-Type": b.messageContentType });
		b && b.sa && (a ? a["X-WebChannel-Client-Profile"] = b.sa : a = { "X-WebChannel-Client-Profile": b.sa });
		this.g.U = a;
		(a = b && b.Qb) && !y(a) && (this.g.u = a);
		this.A = b && b.supportsCrossDomainXhr || !1;
		this.v = b && b.sendRawJson || !1;
		(b = b && b.httpSessionIdParam) && !y(b) && (this.g.G = b, a = this.h, a !== null && b in a && (a = this.h, b in a && delete a[b]));
		this.j = new Z$1(this);
	}
	t(Y$1, C);
	Y$1.prototype.m = function() {
		this.g.l = this.j;
		this.A && (this.g.L = !0);
		this.g.connect(this.l, this.h || void 0);
	};
	Y$1.prototype.close = function() {
		cc(this.g);
	};
	Y$1.prototype.o = function(a) {
		var b = this.g;
		if (typeof a === "string") {
			var c = {};
			c.__data__ = a;
			a = c;
		} else this.v && (c = {}, c.__data__ = ab(a), a = c);
		b.i.push(new dc(b.Ya++, a));
		b.I == 3 && bc(b);
	};
	Y$1.prototype.N = function() {
		this.g.l = null;
		delete this.j;
		cc(this.g);
		delete this.g;
		Y$1.Z.N.call(this);
	};
	function cd(a) {
		gb.call(this);
		a.__headers__ && (this.headers = a.__headers__, this.statusCode = a.__status__, delete a.__headers__, delete a.__status__);
		var b = a.__sm__;
		if (b) {
			a: {
				for (const c in b) {
					a = c;
					break a;
				}
				a = void 0;
			}
			if (this.i = a) a = this.i, b = b !== null && a in b ? b[a] : void 0;
			this.data = b;
		} else this.data = a;
	}
	t(cd, gb);
	function dd() {
		hb.call(this);
		this.status = 1;
	}
	t(dd, hb);
	function Z$1(a) {
		this.g = a;
	}
	t(Z$1, ad);
	Z$1.prototype.ra = function() {
		D(this.g, "a");
	};
	Z$1.prototype.qa = function(a) {
		D(this.g, new cd(a));
	};
	Z$1.prototype.pa = function(a) {
		D(this.g, new dd());
	};
	Z$1.prototype.oa = function() {
		D(this.g, "b");
	};
	bd.prototype.createWebChannel = bd.prototype.g;
	Y$1.prototype.send = Y$1.prototype.o;
	Y$1.prototype.open = Y$1.prototype.m;
	Y$1.prototype.close = Y$1.prototype.close;
	createWebChannelTransport = webchannel_blob_es2018.createWebChannelTransport = function() {
		return new bd();
	};
	getStatEventTarget = webchannel_blob_es2018.getStatEventTarget = function() {
		return jb();
	};
	Event = webchannel_blob_es2018.Event = I;
	Stat = webchannel_blob_es2018.Stat = {
		jb: 0,
		mb: 1,
		nb: 2,
		Hb: 3,
		Mb: 4,
		Jb: 5,
		Kb: 6,
		Ib: 7,
		Gb: 8,
		Lb: 9,
		PROXY: 10,
		NOPROXY: 11,
		Eb: 12,
		Ab: 13,
		Bb: 14,
		zb: 15,
		Cb: 16,
		Db: 17,
		fb: 18,
		eb: 19,
		gb: 20
	};
	ub.NO_ERROR = 0;
	ub.TIMEOUT = 8;
	ub.HTTP_ERROR = 6;
	ErrorCode = webchannel_blob_es2018.ErrorCode = ub;
	vb.COMPLETE = "complete";
	EventType = webchannel_blob_es2018.EventType = vb;
	fb.EventType = H$1;
	H$1.OPEN = "a";
	H$1.CLOSE = "b";
	H$1.ERROR = "c";
	H$1.MESSAGE = "d";
	C.prototype.listen = C.prototype.J;
	WebChannel = webchannel_blob_es2018.WebChannel = fb;
	FetchXmlHttpFactory = webchannel_blob_es2018.FetchXmlHttpFactory = Ec;
	X$1.prototype.listenOnce = X$1.prototype.K;
	X$1.prototype.getLastError = X$1.prototype.Ha;
	X$1.prototype.getLastErrorCode = X$1.prototype.ya;
	X$1.prototype.getStatus = X$1.prototype.ca;
	X$1.prototype.getResponseJson = X$1.prototype.La;
	X$1.prototype.getResponseText = X$1.prototype.la;
	X$1.prototype.send = X$1.prototype.ea;
	X$1.prototype.setWithCredentials = X$1.prototype.Fa;
	XhrIo = webchannel_blob_es2018.XhrIo = X$1;
}).apply(typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});

//#endregion
//#region node_modules/@firebase/firestore/dist/index.esm.js
var F = "@firebase/firestore", M = "4.9.2";
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Simple wrapper around a nullable UID. Mostly exists to make code more
* readable.
*/
var User = class {
	constructor(e) {
		this.uid = e;
	}
	isAuthenticated() {
		return null != this.uid;
	}
	/**
	* Returns a key representing this user, suitable for inclusion in a
	* dictionary.
	*/ toKey() {
		return this.isAuthenticated() ? "uid:" + this.uid : "anonymous-user";
	}
	isEqual(e) {
		return e.uid === this.uid;
	}
};
/** A user with a null UID. */ User.UNAUTHENTICATED = new User(null), User.GOOGLE_CREDENTIALS = new User("google-credentials-uid"), User.FIRST_PARTY = new User("first-party-uid"), User.MOCK_USER = new User("mock-user");
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var x = "12.3.0";
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var O = new Logger("@firebase/firestore");
function __PRIVATE_getLogLevel() {
	return O.logLevel;
}
/**
* Sets the verbosity of Cloud Firestore logs (debug, error, or silent).
*
* @param logLevel - The verbosity you set for activity and error logging. Can
*   be any of the following values:
*
*   <ul>
*     <li>`debug` for the most verbose logging level, primarily for
*     debugging.</li>
*     <li>`error` to log errors only.</li>
*     <li><code>`silent` to turn off logging.</li>
*   </ul>
*/ function setLogLevel(e) {
	O.setLogLevel(e);
}
function __PRIVATE_logDebug(e, ...t) {
	if (O.logLevel <= LogLevel.DEBUG) {
		const n = t.map(__PRIVATE_argToString);
		O.debug(`Firestore (${x}): ${e}`, ...n);
	}
}
function __PRIVATE_logError(e, ...t) {
	if (O.logLevel <= LogLevel.ERROR) {
		const n = t.map(__PRIVATE_argToString);
		O.error(`Firestore (${x}): ${e}`, ...n);
	}
}
/**
* @internal
*/ function __PRIVATE_logWarn(e, ...t) {
	if (O.logLevel <= LogLevel.WARN) {
		const n = t.map(__PRIVATE_argToString);
		O.warn(`Firestore (${x}): ${e}`, ...n);
	}
}
/**
* Converts an additional log parameter to a string representation.
*/ function __PRIVATE_argToString(e) {
	if ("string" == typeof e) return e;
	try {
		/**
		* @license
		* Copyright 2020 Google LLC
		*
		* Licensed under the Apache License, Version 2.0 (the "License");
		* you may not use this file except in compliance with the License.
		* You may obtain a copy of the License at
		*
		*   http://www.apache.org/licenses/LICENSE-2.0
		*
		* Unless required by applicable law or agreed to in writing, software
		* distributed under the License is distributed on an "AS IS" BASIS,
		* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		* See the License for the specific language governing permissions and
		* limitations under the License.
		*/
		/** Formats an object as a JSON string, suitable for logging. */
		return function __PRIVATE_formatJSON(e$1) {
			return JSON.stringify(e$1);
		}(e);
	} catch (t) {
		return e;
	}
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ function fail(e, t, n) {
	let r = "Unexpected state";
	"string" == typeof t ? r = t : n = t, __PRIVATE__fail(e, r, n);
}
function __PRIVATE__fail(e, t, n) {
	let r = `FIRESTORE (${x}) INTERNAL ASSERTION FAILED: ${t} (ID: ${e.toString(16)})`;
	if (void 0 !== n) try {
		r += " CONTEXT: " + JSON.stringify(n);
	} catch (e$1) {
		r += " CONTEXT: " + n;
	}
	throw __PRIVATE_logError(r), new Error(r);
}
function __PRIVATE_hardAssert(e, t, n, r) {
	let i = "Unexpected state";
	"string" == typeof n ? i = n : r = n, e || __PRIVATE__fail(t, i, r);
}
/**
* Fails if the given assertion condition is false, throwing an Error with the
* given message if it did.
*
* The code of callsites invoking this function are stripped out in production
* builds. Any side-effects of code within the debugAssert() invocation will not
* happen in this case.
*
* @internal
*/ function __PRIVATE_debugAssert(e, t) {
	e || fail(57014, t);
}
/**
* Casts `obj` to `T`. In non-production builds, verifies that `obj` is an
* instance of `T` before casting.
*/ function __PRIVATE_debugCast(e, t) {
	return e;
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ var N = {
	OK: "ok",
	CANCELLED: "cancelled",
	UNKNOWN: "unknown",
	INVALID_ARGUMENT: "invalid-argument",
	DEADLINE_EXCEEDED: "deadline-exceeded",
	NOT_FOUND: "not-found",
	ALREADY_EXISTS: "already-exists",
	PERMISSION_DENIED: "permission-denied",
	UNAUTHENTICATED: "unauthenticated",
	RESOURCE_EXHAUSTED: "resource-exhausted",
	FAILED_PRECONDITION: "failed-precondition",
	ABORTED: "aborted",
	OUT_OF_RANGE: "out-of-range",
	UNIMPLEMENTED: "unimplemented",
	INTERNAL: "internal",
	UNAVAILABLE: "unavailable",
	DATA_LOSS: "data-loss"
};
/** An error returned by a Firestore operation. */ var FirestoreError = class extends FirebaseError {
	/** @hideconstructor */
	constructor(e, t) {
		super(e, t), this.code = e, this.message = t, this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;
	}
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ var __PRIVATE_Deferred = class {
	constructor() {
		this.promise = new Promise(((e, t) => {
			this.resolve = e, this.reject = t;
		}));
	}
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ var __PRIVATE_OAuthToken = class {
	constructor(e, t) {
		this.user = t, this.type = "OAuth", this.headers = /* @__PURE__ */ new Map(), this.headers.set("Authorization", `Bearer ${e}`);
	}
};
/**
* A CredentialsProvider that always yields an empty token.
* @internal
*/ var __PRIVATE_EmptyAuthCredentialsProvider = class {
	getToken() {
		return Promise.resolve(null);
	}
	invalidateToken() {}
	start(e, t) {
		e.enqueueRetryable((() => t(User.UNAUTHENTICATED)));
	}
	shutdown() {}
};
/**
* A CredentialsProvider that always returns a constant token. Used for
* emulator token mocking.
*/ var __PRIVATE_EmulatorAuthCredentialsProvider = class {
	constructor(e) {
		this.token = e, this.changeListener = null;
	}
	getToken() {
		return Promise.resolve(this.token);
	}
	invalidateToken() {}
	start(e, t) {
		this.changeListener = t, e.enqueueRetryable((() => t(this.token.user)));
	}
	shutdown() {
		this.changeListener = null;
	}
};
var __PRIVATE_FirebaseAuthCredentialsProvider = class {
	constructor(e) {
		this.t = e, this.currentUser = User.UNAUTHENTICATED, this.i = 0, this.forceRefresh = !1, this.auth = null;
	}
	start(e, t) {
		__PRIVATE_hardAssert(void 0 === this.o, 42304);
		let n = this.i;
		const __PRIVATE_guardedChangeListener = (e$1) => this.i !== n ? (n = this.i, t(e$1)) : Promise.resolve();
		let r = new __PRIVATE_Deferred();
		this.o = () => {
			this.i++, this.currentUser = this.u(), r.resolve(), r = new __PRIVATE_Deferred(), e.enqueueRetryable((() => __PRIVATE_guardedChangeListener(this.currentUser)));
		};
		const __PRIVATE_awaitNextToken = () => {
			const t$1 = r;
			e.enqueueRetryable((async () => {
				await t$1.promise, await __PRIVATE_guardedChangeListener(this.currentUser);
			}));
		}, __PRIVATE_registerAuth = (e$1) => {
			__PRIVATE_logDebug("FirebaseAuthCredentialsProvider", "Auth detected"), this.auth = e$1, this.o && (this.auth.addAuthTokenListener(this.o), __PRIVATE_awaitNextToken());
		};
		this.t.onInit(((e$1) => __PRIVATE_registerAuth(e$1))), setTimeout((() => {
			if (!this.auth) {
				const e$1 = this.t.getImmediate({ optional: !0 });
				e$1 ? __PRIVATE_registerAuth(e$1) : (__PRIVATE_logDebug("FirebaseAuthCredentialsProvider", "Auth not yet detected"), r.resolve(), r = new __PRIVATE_Deferred());
			}
		}), 0), __PRIVATE_awaitNextToken();
	}
	getToken() {
		const e = this.i, t = this.forceRefresh;
		return this.forceRefresh = !1, this.auth ? this.auth.getToken(t).then(((t$1) => this.i !== e ? (__PRIVATE_logDebug("FirebaseAuthCredentialsProvider", "getToken aborted due to token change."), this.getToken()) : t$1 ? (__PRIVATE_hardAssert("string" == typeof t$1.accessToken, 31837, { l: t$1 }), new __PRIVATE_OAuthToken(t$1.accessToken, this.currentUser)) : null)) : Promise.resolve(null);
	}
	invalidateToken() {
		this.forceRefresh = !0;
	}
	shutdown() {
		this.auth && this.o && this.auth.removeAuthTokenListener(this.o), this.o = void 0;
	}
	u() {
		const e = this.auth && this.auth.getUid();
		return __PRIVATE_hardAssert(null === e || "string" == typeof e, 2055, { h: e }), new User(e);
	}
};
var __PRIVATE_FirstPartyToken = class {
	constructor(e, t, n) {
		this.P = e, this.T = t, this.I = n, this.type = "FirstParty", this.user = User.FIRST_PARTY, this.A = /* @__PURE__ */ new Map();
	}
	/**
	* Gets an authorization token, using a provided factory function, or return
	* null.
	*/ R() {
		return this.I ? this.I() : null;
	}
	get headers() {
		this.A.set("X-Goog-AuthUser", this.P);
		const e = this.R();
		return e && this.A.set("Authorization", e), this.T && this.A.set("X-Goog-Iam-Authorization-Token", this.T), this.A;
	}
};
var __PRIVATE_FirstPartyAuthCredentialsProvider = class {
	constructor(e, t, n) {
		this.P = e, this.T = t, this.I = n;
	}
	getToken() {
		return Promise.resolve(new __PRIVATE_FirstPartyToken(this.P, this.T, this.I));
	}
	start(e, t) {
		e.enqueueRetryable((() => t(User.FIRST_PARTY)));
	}
	shutdown() {}
	invalidateToken() {}
};
var AppCheckToken = class {
	constructor(e) {
		this.value = e, this.type = "AppCheck", this.headers = /* @__PURE__ */ new Map(), e && e.length > 0 && this.headers.set("x-firebase-appcheck", this.value);
	}
};
var __PRIVATE_FirebaseAppCheckTokenProvider = class {
	constructor(t, n) {
		this.V = n, this.forceRefresh = !1, this.appCheck = null, this.m = null, this.p = null, _isFirebaseServerApp(t) && t.settings.appCheckToken && (this.p = t.settings.appCheckToken);
	}
	start(e, t) {
		__PRIVATE_hardAssert(void 0 === this.o, 3512);
		const onTokenChanged = (e$1) => {
			null != e$1.error && __PRIVATE_logDebug("FirebaseAppCheckTokenProvider", `Error getting App Check token; using placeholder token instead. Error: ${e$1.error.message}`);
			const n = e$1.token !== this.m;
			return this.m = e$1.token, __PRIVATE_logDebug("FirebaseAppCheckTokenProvider", `Received ${n ? "new" : "existing"} token.`), n ? t(e$1.token) : Promise.resolve();
		};
		this.o = (t$1) => {
			e.enqueueRetryable((() => onTokenChanged(t$1)));
		};
		const __PRIVATE_registerAppCheck = (e$1) => {
			__PRIVATE_logDebug("FirebaseAppCheckTokenProvider", "AppCheck detected"), this.appCheck = e$1, this.o && this.appCheck.addTokenListener(this.o);
		};
		this.V.onInit(((e$1) => __PRIVATE_registerAppCheck(e$1))), setTimeout((() => {
			if (!this.appCheck) {
				const e$1 = this.V.getImmediate({ optional: !0 });
				e$1 ? __PRIVATE_registerAppCheck(e$1) : __PRIVATE_logDebug("FirebaseAppCheckTokenProvider", "AppCheck not yet detected");
			}
		}), 0);
	}
	getToken() {
		if (this.p) return Promise.resolve(new AppCheckToken(this.p));
		const e = this.forceRefresh;
		return this.forceRefresh = !1, this.appCheck ? this.appCheck.getToken(e).then(((e$1) => e$1 ? (__PRIVATE_hardAssert("string" == typeof e$1.token, 44558, { tokenResult: e$1 }), this.m = e$1.token, new AppCheckToken(e$1.token)) : null)) : Promise.resolve(null);
	}
	invalidateToken() {
		this.forceRefresh = !0;
	}
	shutdown() {
		this.appCheck && this.o && this.appCheck.removeTokenListener(this.o), this.o = void 0;
	}
};
/**
* An AppCheck token provider that always yields an empty token.
* @internal
*/ var __PRIVATE_EmptyAppCheckTokenProvider = class {
	getToken() {
		return Promise.resolve(new AppCheckToken(""));
	}
	invalidateToken() {}
	start(e, t) {}
	shutdown() {}
};
/**
* Builds a CredentialsProvider depending on the type of
* the credentials passed in.
*/
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Generates `nBytes` of random bytes.
*
* If `nBytes < 0` , an error will be thrown.
*/
function __PRIVATE_randomBytes(e) {
	const t = "undefined" != typeof self && (self.crypto || self.msCrypto), n = new Uint8Array(e);
	if (t && "function" == typeof t.getRandomValues) t.getRandomValues(n);
	else for (let t$1 = 0; t$1 < e; t$1++) n[t$1] = Math.floor(256 * Math.random());
	return n;
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* A utility class for generating unique alphanumeric IDs of a specified length.
*
* @internal
* Exported internally for testing purposes.
*/ var __PRIVATE_AutoId = class {
	static newId() {
		const e = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", t = 62 * Math.floor(256 / 62);
		let n = "";
		for (; n.length < 20;) {
			const r = __PRIVATE_randomBytes(40);
			for (let i = 0; i < r.length; ++i) n.length < 20 && r[i] < t && (n += e.charAt(r[i] % 62));
		}
		return n;
	}
};
function __PRIVATE_primitiveComparator(e, t) {
	return e < t ? -1 : e > t ? 1 : 0;
}
/** Compare strings in UTF-8 encoded byte order */ function __PRIVATE_compareUtf8Strings(e, t) {
	const n = Math.min(e.length, t.length);
	for (let r = 0; r < n; r++) {
		const n$1 = e.charAt(r), i = t.charAt(r);
		if (n$1 !== i) return __PRIVATE_isSurrogate(n$1) === __PRIVATE_isSurrogate(i) ? __PRIVATE_primitiveComparator(n$1, i) : __PRIVATE_isSurrogate(n$1) ? 1 : -1;
	}
	return __PRIVATE_primitiveComparator(e.length, t.length);
}
var B = 55296, L = 57343;
function __PRIVATE_isSurrogate(e) {
	const t = e.charCodeAt(0);
	return t >= B && t <= L;
}
/** Helper to compare arrays using isEqual(). */ function __PRIVATE_arrayEquals(e, t, n) {
	return e.length === t.length && e.every(((e$1, r) => n(e$1, t[r])));
}
/**
* Returns the immediate lexicographically-following string. This is useful to
* construct an inclusive range for indexeddb iterators.
*/ function __PRIVATE_immediateSuccessor(e) {
	return e + "\0";
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ var k = "__name__";
/**
* Path represents an ordered sequence of string segments.
*/ var BasePath = class BasePath {
	constructor(e, t, n) {
		void 0 === t ? t = 0 : t > e.length && fail(637, {
			offset: t,
			range: e.length
		}), void 0 === n ? n = e.length - t : n > e.length - t && fail(1746, {
			length: n,
			range: e.length - t
		}), this.segments = e, this.offset = t, this.len = n;
	}
	get length() {
		return this.len;
	}
	isEqual(e) {
		return 0 === BasePath.comparator(this, e);
	}
	child(e) {
		const t = this.segments.slice(this.offset, this.limit());
		return e instanceof BasePath ? e.forEach(((e$1) => {
			t.push(e$1);
		})) : t.push(e), this.construct(t);
	}
	/** The index of one past the last segment of the path. */ limit() {
		return this.offset + this.length;
	}
	popFirst(e) {
		return e = void 0 === e ? 1 : e, this.construct(this.segments, this.offset + e, this.length - e);
	}
	popLast() {
		return this.construct(this.segments, this.offset, this.length - 1);
	}
	firstSegment() {
		return this.segments[this.offset];
	}
	lastSegment() {
		return this.get(this.length - 1);
	}
	get(e) {
		return this.segments[this.offset + e];
	}
	isEmpty() {
		return 0 === this.length;
	}
	isPrefixOf(e) {
		if (e.length < this.length) return !1;
		for (let t = 0; t < this.length; t++) if (this.get(t) !== e.get(t)) return !1;
		return !0;
	}
	isImmediateParentOf(e) {
		if (this.length + 1 !== e.length) return !1;
		for (let t = 0; t < this.length; t++) if (this.get(t) !== e.get(t)) return !1;
		return !0;
	}
	forEach(e) {
		for (let t = this.offset, n = this.limit(); t < n; t++) e(this.segments[t]);
	}
	toArray() {
		return this.segments.slice(this.offset, this.limit());
	}
	/**
	* Compare 2 paths segment by segment, prioritizing numeric IDs
	* (e.g., "__id123__") in numeric ascending order, followed by string
	* segments in lexicographical order.
	*/ static comparator(e, t) {
		const n = Math.min(e.length, t.length);
		for (let r = 0; r < n; r++) {
			const n$1 = BasePath.compareSegments(e.get(r), t.get(r));
			if (0 !== n$1) return n$1;
		}
		return __PRIVATE_primitiveComparator(e.length, t.length);
	}
	static compareSegments(e, t) {
		const n = BasePath.isNumericId(e), r = BasePath.isNumericId(t);
		return n && !r ? -1 : !n && r ? 1 : n && r ? BasePath.extractNumericId(e).compare(BasePath.extractNumericId(t)) : __PRIVATE_compareUtf8Strings(e, t);
	}
	static isNumericId(e) {
		return e.startsWith("__id") && e.endsWith("__");
	}
	static extractNumericId(e) {
		return Integer.fromString(e.substring(4, e.length - 2));
	}
};
/**
* A slash-separated path for navigating resources (documents and collections)
* within Firestore.
*
* @internal
*/ var ResourcePath = class ResourcePath extends BasePath {
	construct(e, t, n) {
		return new ResourcePath(e, t, n);
	}
	canonicalString() {
		return this.toArray().join("/");
	}
	toString() {
		return this.canonicalString();
	}
	/**
	* Returns a string representation of this path
	* where each path segment has been encoded with
	* `encodeURIComponent`.
	*/ toUriEncodedString() {
		return this.toArray().map(encodeURIComponent).join("/");
	}
	/**
	* Creates a resource path from the given slash-delimited string. If multiple
	* arguments are provided, all components are combined. Leading and trailing
	* slashes from all components are ignored.
	*/ static fromString(...e) {
		const t = [];
		for (const n of e) {
			if (n.indexOf("//") >= 0) throw new FirestoreError(N.INVALID_ARGUMENT, `Invalid segment (${n}). Paths must not contain // in them.`);
			t.push(...n.split("/").filter(((e$1) => e$1.length > 0)));
		}
		return new ResourcePath(t);
	}
	static emptyPath() {
		return new ResourcePath([]);
	}
};
var q = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
/**
* A dot-separated path for navigating sub-objects within a document.
* @internal
*/ var FieldPath$1 = class FieldPath$1 extends BasePath {
	construct(e, t, n) {
		return new FieldPath$1(e, t, n);
	}
	/**
	* Returns true if the string could be used as a segment in a field path
	* without escaping.
	*/ static isValidIdentifier(e) {
		return q.test(e);
	}
	canonicalString() {
		return this.toArray().map(((e) => (e = e.replace(/\\/g, "\\\\").replace(/`/g, "\\`"), FieldPath$1.isValidIdentifier(e) || (e = "`" + e + "`"), e))).join(".");
	}
	toString() {
		return this.canonicalString();
	}
	/**
	* Returns true if this field references the key of a document.
	*/ isKeyField() {
		return 1 === this.length && this.get(0) === k;
	}
	/**
	* The field designating the key of a document.
	*/ static keyField() {
		return new FieldPath$1([k]);
	}
	/**
	* Parses a field string from the given server-formatted string.
	*
	* - Splitting the empty string is not allowed (for now at least).
	* - Empty segments within the string (e.g. if there are two consecutive
	*   separators) are not allowed.
	*
	* TODO(b/37244157): we should make this more strict. Right now, it allows
	* non-identifier path components, even if they aren't escaped.
	*/ static fromServerFormat(e) {
		const t = [];
		let n = "", r = 0;
		const __PRIVATE_addCurrentSegment = () => {
			if (0 === n.length) throw new FirestoreError(N.INVALID_ARGUMENT, `Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);
			t.push(n), n = "";
		};
		let i = !1;
		for (; r < e.length;) {
			const t$1 = e[r];
			if ("\\" === t$1) {
				if (r + 1 === e.length) throw new FirestoreError(N.INVALID_ARGUMENT, "Path has trailing escape character: " + e);
				const t$2 = e[r + 1];
				if ("\\" !== t$2 && "." !== t$2 && "`" !== t$2) throw new FirestoreError(N.INVALID_ARGUMENT, "Path has invalid escape sequence: " + e);
				n += t$2, r += 2;
			} else "`" === t$1 ? (i = !i, r++) : "." !== t$1 || i ? (n += t$1, r++) : (__PRIVATE_addCurrentSegment(), r++);
		}
		if (__PRIVATE_addCurrentSegment(), i) throw new FirestoreError(N.INVALID_ARGUMENT, "Unterminated ` in path: " + e);
		return new FieldPath$1(t);
	}
	static emptyPath() {
		return new FieldPath$1([]);
	}
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* @internal
*/ var DocumentKey = class DocumentKey {
	constructor(e) {
		this.path = e;
	}
	static fromPath(e) {
		return new DocumentKey(ResourcePath.fromString(e));
	}
	static fromName(e) {
		return new DocumentKey(ResourcePath.fromString(e).popFirst(5));
	}
	static empty() {
		return new DocumentKey(ResourcePath.emptyPath());
	}
	get collectionGroup() {
		return this.path.popLast().lastSegment();
	}
	/** Returns true if the document is in the specified collectionId. */ hasCollectionId(e) {
		return this.path.length >= 2 && this.path.get(this.path.length - 2) === e;
	}
	/** Returns the collection group (i.e. the name of the parent collection) for this key. */ getCollectionGroup() {
		return this.path.get(this.path.length - 2);
	}
	/** Returns the fully qualified path to the parent collection. */ getCollectionPath() {
		return this.path.popLast();
	}
	isEqual(e) {
		return null !== e && 0 === ResourcePath.comparator(this.path, e.path);
	}
	toString() {
		return this.path.toString();
	}
	static comparator(e, t) {
		return ResourcePath.comparator(e.path, t.path);
	}
	static isDocumentKey(e) {
		return e.length % 2 == 0;
	}
	/**
	* Creates and returns a new document key with the given segments.
	*
	* @param segments - The segments of the path to the document
	* @returns A new instance of DocumentKey
	*/ static fromSegments(e) {
		return new DocumentKey(new ResourcePath(e.slice()));
	}
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ function __PRIVATE_validateNonEmptyArgument(e, t, n) {
	if (!n) throw new FirestoreError(N.INVALID_ARGUMENT, `Function ${e}() cannot be called with an empty ${t}.`);
}
/**
* Validates that two boolean options are not set at the same time.
* @internal
*/ function __PRIVATE_validateIsNotUsedTogether(e, t, n, r) {
	if (!0 === t && !0 === r) throw new FirestoreError(N.INVALID_ARGUMENT, `${e} and ${n} cannot be used together.`);
}
/**
* Validates that `path` refers to a document (indicated by the fact it contains
* an even numbers of segments).
*/ function __PRIVATE_validateDocumentPath(e) {
	if (!DocumentKey.isDocumentKey(e)) throw new FirestoreError(N.INVALID_ARGUMENT, `Invalid document reference. Document references must have an even number of segments, but ${e} has ${e.length}.`);
}
/**
* Validates that `path` refers to a collection (indicated by the fact it
* contains an odd numbers of segments).
*/ function __PRIVATE_validateCollectionPath(e) {
	if (DocumentKey.isDocumentKey(e)) throw new FirestoreError(N.INVALID_ARGUMENT, `Invalid collection reference. Collection references must have an odd number of segments, but ${e} has ${e.length}.`);
}
/**
* Returns true if it's a non-null object without a custom prototype
* (i.e. excludes Array, Date, etc.).
*/ function __PRIVATE_isPlainObject(e) {
	return "object" == typeof e && null !== e && (Object.getPrototypeOf(e) === Object.prototype || null === Object.getPrototypeOf(e));
}
/** Returns a string describing the type / value of the provided input. */ function __PRIVATE_valueDescription(e) {
	if (void 0 === e) return "undefined";
	if (null === e) return "null";
	if ("string" == typeof e) return e.length > 20 && (e = `${e.substring(0, 20)}...`), JSON.stringify(e);
	if ("number" == typeof e || "boolean" == typeof e) return "" + e;
	if ("object" == typeof e) {
		if (e instanceof Array) return "an array";
		{
			const t = function __PRIVATE_tryGetCustomObjectType(e$1) {
				if (e$1.constructor) return e$1.constructor.name;
				return null;
			}(e);
			return t ? `a custom ${t} object` : "an object";
		}
	}
	return "function" == typeof e ? "a function" : fail(12329, { type: typeof e });
}
function __PRIVATE_cast(e, t) {
	if ("_delegate" in e && (e = e._delegate), !(e instanceof t)) {
		if (t.name === e.constructor.name) throw new FirestoreError(N.INVALID_ARGUMENT, "Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");
		{
			const n = __PRIVATE_valueDescription(e);
			throw new FirestoreError(N.INVALID_ARGUMENT, `Expected type '${t.name}', but it was: ${n}`);
		}
	}
	return e;
}
function __PRIVATE_validatePositiveNumber(e, t) {
	if (t <= 0) throw new FirestoreError(N.INVALID_ARGUMENT, `Function ${e}() requires a positive number, but it was: ${t}.`);
}
/**
* @license
* Copyright 2025 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Helper function to define a JSON schema {@link Property}.
* @private
* @internal
*/ function property(e, t) {
	const n = { typeString: e };
	return t && (n.value = t), n;
}
/**
* Validates the JSON object based on the provided schema, and narrows the type to the provided
* JSON schema.
* @private
* @internal
*
* @param json A JSON object to validate.
* @param scheme a {@link JsonSchema} that defines the properties to validate.
* @returns true if the JSON schema exists within the object. Throws a FirestoreError otherwise.
*/ function __PRIVATE_validateJSON(e, t) {
	if (!__PRIVATE_isPlainObject(e)) throw new FirestoreError(N.INVALID_ARGUMENT, "JSON must be an object");
	let n;
	for (const r in t) if (t[r]) {
		const i = t[r].typeString, s = "value" in t[r] ? { value: t[r].value } : void 0;
		if (!(r in e)) {
			n = `JSON missing required field: '${r}'`;
			break;
		}
		const o = e[r];
		if (i && typeof o !== i) {
			n = `JSON field '${r}' must be a ${i}.`;
			break;
		}
		if (void 0 !== s && o !== s.value) {
			n = `Expected '${r}' field to equal '${s.value}'`;
			break;
		}
	}
	if (n) throw new FirestoreError(N.INVALID_ARGUMENT, n);
	return !0;
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var Q = -62135596800, $ = 1e6;
/**
* A `Timestamp` represents a point in time independent of any time zone or
* calendar, represented as seconds and fractions of seconds at nanosecond
* resolution in UTC Epoch time.
*
* It is encoded using the Proleptic Gregorian Calendar which extends the
* Gregorian calendar backwards to year one. It is encoded assuming all minutes
* are 60 seconds long, i.e. leap seconds are "smeared" so that no leap second
* table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to
* 9999-12-31T23:59:59.999999999Z.
*
* For examples and further specifications, refer to the
* {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.
*/
var Timestamp = class Timestamp {
	/**
	* Creates a new timestamp with the current date, with millisecond precision.
	*
	* @returns a new timestamp representing the current date.
	*/
	static now() {
		return Timestamp.fromMillis(Date.now());
	}
	/**
	* Creates a new timestamp from the given date.
	*
	* @param date - The date to initialize the `Timestamp` from.
	* @returns A new `Timestamp` representing the same point in time as the given
	*     date.
	*/ static fromDate(e) {
		return Timestamp.fromMillis(e.getTime());
	}
	/**
	* Creates a new timestamp from the given number of milliseconds.
	*
	* @param milliseconds - Number of milliseconds since Unix epoch
	*     1970-01-01T00:00:00Z.
	* @returns A new `Timestamp` representing the same point in time as the given
	*     number of milliseconds.
	*/ static fromMillis(e) {
		const t = Math.floor(e / 1e3), n = Math.floor((e - 1e3 * t) * $);
		return new Timestamp(t, n);
	}
	/**
	* Creates a new timestamp.
	*
	* @param seconds - The number of seconds of UTC time since Unix epoch
	*     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
	*     9999-12-31T23:59:59Z inclusive.
	* @param nanoseconds - The non-negative fractions of a second at nanosecond
	*     resolution. Negative second values with fractions must still have
	*     non-negative nanoseconds values that count forward in time. Must be
	*     from 0 to 999,999,999 inclusive.
	*/ constructor(e, t) {
		if (this.seconds = e, this.nanoseconds = t, t < 0) throw new FirestoreError(N.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + t);
		if (t >= 1e9) throw new FirestoreError(N.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + t);
		if (e < Q) throw new FirestoreError(N.INVALID_ARGUMENT, "Timestamp seconds out of range: " + e);
		if (e >= 253402300800) throw new FirestoreError(N.INVALID_ARGUMENT, "Timestamp seconds out of range: " + e);
	}
	/**
	* Converts a `Timestamp` to a JavaScript `Date` object. This conversion
	* causes a loss of precision since `Date` objects only support millisecond
	* precision.
	*
	* @returns JavaScript `Date` object representing the same point in time as
	*     this `Timestamp`, with millisecond precision.
	*/ toDate() {
		return new Date(this.toMillis());
	}
	/**
	* Converts a `Timestamp` to a numeric timestamp (in milliseconds since
	* epoch). This operation causes a loss of precision.
	*
	* @returns The point in time corresponding to this timestamp, represented as
	*     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.
	*/ toMillis() {
		return 1e3 * this.seconds + this.nanoseconds / $;
	}
	_compareTo(e) {
		return this.seconds === e.seconds ? __PRIVATE_primitiveComparator(this.nanoseconds, e.nanoseconds) : __PRIVATE_primitiveComparator(this.seconds, e.seconds);
	}
	/**
	* Returns true if this `Timestamp` is equal to the provided one.
	*
	* @param other - The `Timestamp` to compare against.
	* @returns true if this `Timestamp` is equal to the provided one.
	*/ isEqual(e) {
		return e.seconds === this.seconds && e.nanoseconds === this.nanoseconds;
	}
	/** Returns a textual representation of this `Timestamp`. */ toString() {
		return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
	}
	/**
	* Returns a JSON-serializable representation of this `Timestamp`.
	*/ toJSON() {
		return {
			type: Timestamp._jsonSchemaVersion,
			seconds: this.seconds,
			nanoseconds: this.nanoseconds
		};
	}
	/**
	* Builds a `Timestamp` instance from a JSON object created by {@link Timestamp.toJSON}.
	*/ static fromJSON(e) {
		if (__PRIVATE_validateJSON(e, Timestamp._jsonSchema)) return new Timestamp(e.seconds, e.nanoseconds);
	}
	/**
	* Converts this object to a primitive string, which allows `Timestamp` objects
	* to be compared using the `>`, `<=`, `>=` and `>` operators.
	*/ valueOf() {
		const e = this.seconds - Q;
		return String(e).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
	}
};
Timestamp._jsonSchemaVersion = "firestore/timestamp/1.0", Timestamp._jsonSchema = {
	type: property("string", Timestamp._jsonSchemaVersion),
	seconds: property("number"),
	nanoseconds: property("number")
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* A version of a document in Firestore. This corresponds to the version
* timestamp, such as update_time or read_time.
*/
var SnapshotVersion = class SnapshotVersion {
	static fromTimestamp(e) {
		return new SnapshotVersion(e);
	}
	static min() {
		return new SnapshotVersion(new Timestamp(0, 0));
	}
	static max() {
		return new SnapshotVersion(new Timestamp(253402300799, 999999999));
	}
	constructor(e) {
		this.timestamp = e;
	}
	compareTo(e) {
		return this.timestamp._compareTo(e.timestamp);
	}
	isEqual(e) {
		return this.timestamp.isEqual(e.timestamp);
	}
	/** Returns a number representation of the version for use in spec tests. */ toMicroseconds() {
		return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;
	}
	toString() {
		return "SnapshotVersion(" + this.timestamp.toString() + ")";
	}
	toTimestamp() {
		return this.timestamp;
	}
};
/**
* @license
* Copyright 2021 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* The initial mutation batch id for each index. Gets updated during index
* backfill.
*/ var U = -1;
/**
* The initial sequence number for each index. Gets updated during index
* backfill.
*/
/**
* An index definition for field indexes in Firestore.
*
* Every index is associated with a collection. The definition contains a list
* of fields and their index kind (which can be `ASCENDING`, `DESCENDING` or
* `CONTAINS` for ArrayContains/ArrayContainsAny queries).
*
* Unlike the backend, the SDK does not differentiate between collection or
* collection group-scoped indices. Every index can be used for both single
* collection and collection group queries.
*/
var FieldIndex = class {
	constructor(e, t, n, r) {
		this.indexId = e, this.collectionGroup = t, this.fields = n, this.indexState = r;
	}
};
/** An ID for an index that has not yet been added to persistence.  */
/** Returns the ArrayContains/ArrayContainsAny segment for this index. */
function __PRIVATE_fieldIndexGetArraySegment(e) {
	return e.fields.find(((e$1) => 2 === e$1.kind));
}
/** Returns all directional (ascending/descending) segments for this index. */ function __PRIVATE_fieldIndexGetDirectionalSegments(e) {
	return e.fields.filter(((e$1) => 2 !== e$1.kind));
}
/**
* Returns the order of the document key component for the given index.
*
* PORTING NOTE: This is only used in the Web IndexedDb implementation.
*/
/**
* Compares indexes by collection group and segments. Ignores update time and
* index ID.
*/
function __PRIVATE_fieldIndexSemanticComparator(e, t) {
	let n = __PRIVATE_primitiveComparator(e.collectionGroup, t.collectionGroup);
	if (0 !== n) return n;
	for (let r = 0; r < Math.min(e.fields.length, t.fields.length); ++r) if (n = __PRIVATE_indexSegmentComparator(e.fields[r], t.fields[r]), 0 !== n) return n;
	return __PRIVATE_primitiveComparator(e.fields.length, t.fields.length);
}
/** Returns a debug representation of the field index */ FieldIndex.UNKNOWN_ID = -1;
/** An index component consisting of field path and index type.  */
var IndexSegment = class {
	constructor(e, t) {
		this.fieldPath = e, this.kind = t;
	}
};
function __PRIVATE_indexSegmentComparator(e, t) {
	const n = FieldPath$1.comparator(e.fieldPath, t.fieldPath);
	return 0 !== n ? n : __PRIVATE_primitiveComparator(e.kind, t.kind);
}
/**
* Stores the "high water mark" that indicates how updated the Index is for the
* current user.
*/ var IndexState = class IndexState {
	constructor(e, t) {
		this.sequenceNumber = e, this.offset = t;
	}
	/** The state of an index that has not yet been backfilled. */ static empty() {
		return new IndexState(0, IndexOffset.min());
	}
};
/**
* Creates an offset that matches all documents with a read time higher than
* `readTime`.
*/ function __PRIVATE_newIndexOffsetSuccessorFromReadTime(e, t) {
	const n = e.toTimestamp().seconds, r = e.toTimestamp().nanoseconds + 1, i = SnapshotVersion.fromTimestamp(1e9 === r ? new Timestamp(n + 1, 0) : new Timestamp(n, r));
	return new IndexOffset(i, DocumentKey.empty(), t);
}
/** Creates a new offset based on the provided document. */ function __PRIVATE_newIndexOffsetFromDocument(e) {
	return new IndexOffset(e.readTime, e.key, U);
}
/**
* Stores the latest read time, document and batch ID that were processed for an
* index.
*/ var IndexOffset = class IndexOffset {
	constructor(e, t, n) {
		this.readTime = e, this.documentKey = t, this.largestBatchId = n;
	}
	/** Returns an offset that sorts before all regular offsets. */ static min() {
		return new IndexOffset(SnapshotVersion.min(), DocumentKey.empty(), U);
	}
	/** Returns an offset that sorts after all regular offsets. */ static max() {
		return new IndexOffset(SnapshotVersion.max(), DocumentKey.empty(), U);
	}
};
function __PRIVATE_indexOffsetComparator(e, t) {
	let n = e.readTime.compareTo(t.readTime);
	return 0 !== n ? n : (n = DocumentKey.comparator(e.documentKey, t.documentKey), 0 !== n ? n : __PRIVATE_primitiveComparator(e.largestBatchId, t.largestBatchId));
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ var K = "The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.";
/**
* A base class representing a persistence transaction, encapsulating both the
* transaction's sequence numbers as well as a list of onCommitted listeners.
*
* When you call Persistence.runTransaction(), it will create a transaction and
* pass it to your callback. You then pass it to any method that operates
* on persistence.
*/ var PersistenceTransaction = class {
	constructor() {
		this.onCommittedListeners = [];
	}
	addOnCommittedListener(e) {
		this.onCommittedListeners.push(e);
	}
	raiseOnCommittedEvent() {
		this.onCommittedListeners.forEach(((e) => e()));
	}
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Verifies the error thrown by a LocalStore operation. If a LocalStore
* operation fails because the primary lease has been taken by another client,
* we ignore the error (the persistence layer will immediately call
* `applyPrimaryLease` to propagate the primary state change). All other errors
* are re-thrown.
*
* @param err - An error returned by a LocalStore operation.
* @returns A Promise that resolves after we recovered, or the original error.
*/ async function __PRIVATE_ignoreIfPrimaryLeaseLoss(e) {
	if (e.code !== N.FAILED_PRECONDITION || e.message !== K) throw e;
	__PRIVATE_logDebug("LocalStore", "Unexpectedly lost primary lease");
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* PersistencePromise is essentially a re-implementation of Promise except
* it has a .next() method instead of .then() and .next() and .catch() callbacks
* are executed synchronously when a PersistencePromise resolves rather than
* asynchronously (Promise implementations use setImmediate() or similar).
*
* This is necessary to interoperate with IndexedDB which will automatically
* commit transactions if control is returned to the event loop without
* synchronously initiating another operation on the transaction.
*
* NOTE: .then() and .catch() only allow a single consumer, unlike normal
* Promises.
*/ var PersistencePromise = class PersistencePromise {
	constructor(e) {
		this.nextCallback = null, this.catchCallback = null, this.result = void 0, this.error = void 0, this.isDone = !1, this.callbackAttached = !1, e(((e$1) => {
			this.isDone = !0, this.result = e$1, this.nextCallback && this.nextCallback(e$1);
		}), ((e$1) => {
			this.isDone = !0, this.error = e$1, this.catchCallback && this.catchCallback(e$1);
		}));
	}
	catch(e) {
		return this.next(void 0, e);
	}
	next(e, t) {
		return this.callbackAttached && fail(59440), this.callbackAttached = !0, this.isDone ? this.error ? this.wrapFailure(t, this.error) : this.wrapSuccess(e, this.result) : new PersistencePromise(((n, r) => {
			this.nextCallback = (t$1) => {
				this.wrapSuccess(e, t$1).next(n, r);
			}, this.catchCallback = (e$1) => {
				this.wrapFailure(t, e$1).next(n, r);
			};
		}));
	}
	toPromise() {
		return new Promise(((e, t) => {
			this.next(e, t);
		}));
	}
	wrapUserFunction(e) {
		try {
			const t = e();
			return t instanceof PersistencePromise ? t : PersistencePromise.resolve(t);
		} catch (e$1) {
			return PersistencePromise.reject(e$1);
		}
	}
	wrapSuccess(e, t) {
		return e ? this.wrapUserFunction((() => e(t))) : PersistencePromise.resolve(t);
	}
	wrapFailure(e, t) {
		return e ? this.wrapUserFunction((() => e(t))) : PersistencePromise.reject(t);
	}
	static resolve(e) {
		return new PersistencePromise(((t, n) => {
			t(e);
		}));
	}
	static reject(e) {
		return new PersistencePromise(((t, n) => {
			n(e);
		}));
	}
	static waitFor(e) {
		return new PersistencePromise(((t, n) => {
			let r = 0, i = 0, s = !1;
			e.forEach(((e$1) => {
				++r, e$1.next((() => {
					++i, s && i === r && t();
				}), ((e$2) => n(e$2)));
			})), s = !0, i === r && t();
		}));
	}
	/**
	* Given an array of predicate functions that asynchronously evaluate to a
	* boolean, implements a short-circuiting `or` between the results. Predicates
	* will be evaluated until one of them returns `true`, then stop. The final
	* result will be whether any of them returned `true`.
	*/ static or(e) {
		let t = PersistencePromise.resolve(!1);
		for (const n of e) t = t.next(((e$1) => e$1 ? PersistencePromise.resolve(e$1) : n()));
		return t;
	}
	static forEach(e, t) {
		const n = [];
		return e.forEach(((e$1, r) => {
			n.push(t.call(this, e$1, r));
		})), this.waitFor(n);
	}
	/**
	* Concurrently map all array elements through asynchronous function.
	*/ static mapArray(e, t) {
		return new PersistencePromise(((n, r) => {
			const i = e.length, s = new Array(i);
			let o = 0;
			for (let _ = 0; _ < i; _++) {
				const a = _;
				t(e[a]).next(((e$1) => {
					s[a] = e$1, ++o, o === i && n(s);
				}), ((e$1) => r(e$1)));
			}
		}));
	}
	/**
	* An alternative to recursive PersistencePromise calls, that avoids
	* potential memory problems from unbounded chains of promises.
	*
	* The `action` will be called repeatedly while `condition` is true.
	*/ static doWhile(e, t) {
		return new PersistencePromise(((n, r) => {
			const process$1 = () => {
				!0 === e() ? t().next((() => {
					process$1();
				}), r) : n();
			};
			process$1();
		}));
	}
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var W = "SimpleDb";
/**
* The maximum number of retry attempts for an IndexedDb transaction that fails
* with a DOMException.
*/
/**
* Wraps an IDBTransaction and exposes a store() method to get a handle to a
* specific object store.
*/
var __PRIVATE_SimpleDbTransaction = class __PRIVATE_SimpleDbTransaction {
	static open(e, t, n, r) {
		try {
			return new __PRIVATE_SimpleDbTransaction(t, e.transaction(r, n));
		} catch (e$1) {
			throw new __PRIVATE_IndexedDbTransactionError(t, e$1);
		}
	}
	constructor(e, t) {
		this.action = e, this.transaction = t, this.aborted = !1, this.S = new __PRIVATE_Deferred(), this.transaction.oncomplete = () => {
			this.S.resolve();
		}, this.transaction.onabort = () => {
			t.error ? this.S.reject(new __PRIVATE_IndexedDbTransactionError(e, t.error)) : this.S.resolve();
		}, this.transaction.onerror = (t$1) => {
			const n = __PRIVATE_checkForAndReportiOSError(t$1.target.error);
			this.S.reject(new __PRIVATE_IndexedDbTransactionError(e, n));
		};
	}
	get D() {
		return this.S.promise;
	}
	abort(e) {
		e && this.S.reject(e), this.aborted || (__PRIVATE_logDebug(W, "Aborting transaction:", e ? e.message : "Client-initiated abort"), this.aborted = !0, this.transaction.abort());
	}
	C() {
		const e = this.transaction;
		this.aborted || "function" != typeof e.commit || e.commit();
	}
	/**
	* Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All
	* operations performed on the SimpleDbStore happen within the context of this
	* transaction and it cannot be used anymore once the transaction is
	* completed.
	*
	* Note that we can't actually enforce that the KeyType and ValueType are
	* correct, but they allow type safety through the rest of the consuming code.
	*/ store(e) {
		const t = this.transaction.objectStore(e);
		return new __PRIVATE_SimpleDbStore(t);
	}
};
/**
* Provides a wrapper around IndexedDb with a simplified interface that uses
* Promise-like return values to chain operations. Real promises cannot be used
* since .then() continuations are executed asynchronously (e.g. via
* .setImmediate), which would cause IndexedDB to end the transaction.
* See PersistencePromise for more details.
*/ var __PRIVATE_SimpleDb = class __PRIVATE_SimpleDb {
	/** Deletes the specified database. */
	static delete(e) {
		__PRIVATE_logDebug(W, "Removing database:", e);
		return __PRIVATE_wrapRequest(getGlobal().indexedDB.deleteDatabase(e)).toPromise();
	}
	/** Returns true if IndexedDB is available in the current environment. */ static v() {
		if (!isIndexedDBAvailable()) return !1;
		if (__PRIVATE_SimpleDb.F()) return !0;
		const e = getUA(), t = __PRIVATE_SimpleDb.M(e), n = 0 < t && t < 10, r = __PRIVATE_getAndroidVersion(e), i = 0 < r && r < 4.5;
		return !(e.indexOf("MSIE ") > 0 || e.indexOf("Trident/") > 0 || e.indexOf("Edge/") > 0 || n || i);
	}
	/**
	* Returns true if the backing IndexedDB store is the Node IndexedDBShim
	* (see https://github.com/axemclion/IndexedDBShim).
	*/ static F() {
		return "undefined" != typeof process && "YES" === process.__PRIVATE_env?.__PRIVATE_USE_MOCK_PERSISTENCE;
	}
	/** Helper to get a typed SimpleDbStore from a transaction. */ static O(e, t) {
		return e.store(t);
	}
	/** Parse User Agent to determine iOS version. Returns -1 if not found. */
	static M(e) {
		const t = e.match(/i(?:phone|pad|pod) os ([\d_]+)/i), n = t ? t[1].split("_").slice(0, 2).join(".") : "-1";
		return Number(n);
	}
	constructor(e, t, n) {
		this.name = e, this.version = t, this.N = n, this.B = null;
		12.2 === __PRIVATE_SimpleDb.M(getUA()) && __PRIVATE_logError("Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
	}
	/**
	* Opens the specified database, creating or upgrading it if necessary.
	*/ async L(e) {
		return this.db || (__PRIVATE_logDebug(W, "Opening database:", this.name), this.db = await new Promise(((t, n) => {
			const r = indexedDB.open(this.name, this.version);
			r.onsuccess = (e$1) => {
				const n$1 = e$1.target.result;
				t(n$1);
			}, r.onblocked = () => {
				n(new __PRIVATE_IndexedDbTransactionError(e, "Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed."));
			}, r.onerror = (t$1) => {
				const r$1 = t$1.target.error;
				"VersionError" === r$1.name ? n(new FirestoreError(N.FAILED_PRECONDITION, "A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh.")) : "InvalidStateError" === r$1.name ? n(new FirestoreError(N.FAILED_PRECONDITION, "Unable to open an IndexedDB connection. This could be due to running in a private browsing session on a browser whose private browsing sessions do not support IndexedDB: " + r$1)) : n(new __PRIVATE_IndexedDbTransactionError(e, r$1));
			}, r.onupgradeneeded = (e$1) => {
				__PRIVATE_logDebug(W, "Database \"" + this.name + "\" requires upgrade from version:", e$1.oldVersion);
				const t$1 = e$1.target.result;
				this.N.k(t$1, r.transaction, e$1.oldVersion, this.version).next((() => {
					__PRIVATE_logDebug(W, "Database upgrade to version " + this.version + " complete");
				}));
			};
		}))), this.q && (this.db.onversionchange = (e$1) => this.q(e$1)), this.db;
	}
	$(e) {
		this.q = e, this.db && (this.db.onversionchange = (t) => e(t));
	}
	async runTransaction(e, t, n, r) {
		const i = "readonly" === t;
		let s = 0;
		for (;;) {
			++s;
			try {
				this.db = await this.L(e);
				const t$1 = __PRIVATE_SimpleDbTransaction.open(this.db, e, i ? "readonly" : "readwrite", n), s$1 = r(t$1).next(((e$1) => (t$1.C(), e$1))).catch(((e$1) => (t$1.abort(e$1), PersistencePromise.reject(e$1)))).toPromise();
				return s$1.catch((() => {})), await t$1.D, s$1;
			} catch (e$1) {
				const t$1 = e$1, n$1 = "FirebaseError" !== t$1.name && s < 3;
				if (__PRIVATE_logDebug(W, "Transaction failed with error:", t$1.message, "Retrying:", n$1), this.close(), !n$1) return Promise.reject(t$1);
			}
		}
	}
	close() {
		this.db && this.db.close(), this.db = void 0;
	}
};
/** Parse User Agent to determine Android version. Returns -1 if not found. */ function __PRIVATE_getAndroidVersion(e) {
	const t = e.match(/Android ([\d.]+)/i), n = t ? t[1].split(".").slice(0, 2).join(".") : "-1";
	return Number(n);
}
/**
* A controller for iterating over a key range or index. It allows an iterate
* callback to delete the currently-referenced object, or jump to a new key
* within the key range or index.
*/ var __PRIVATE_IterationController = class {
	constructor(e) {
		this.U = e, this.K = !1, this.W = null;
	}
	get isDone() {
		return this.K;
	}
	get G() {
		return this.W;
	}
	set cursor(e) {
		this.U = e;
	}
	/**
	* This function can be called to stop iteration at any point.
	*/ done() {
		this.K = !0;
	}
	/**
	* This function can be called to skip to that next key, which could be
	* an index or a primary key.
	*/ j(e) {
		this.W = e;
	}
	/**
	* Delete the current cursor value from the object store.
	*
	* NOTE: You CANNOT do this with a keysOnly query.
	*/ delete() {
		return __PRIVATE_wrapRequest(this.U.delete());
	}
};
/** An error that wraps exceptions that thrown during IndexedDB execution. */ var __PRIVATE_IndexedDbTransactionError = class extends FirestoreError {
	constructor(e, t) {
		super(N.UNAVAILABLE, `IndexedDB transaction '${e}' failed: ${t}`), this.name = "IndexedDbTransactionError";
	}
};
/** Verifies whether `e` is an IndexedDbTransactionError. */ function __PRIVATE_isIndexedDbTransactionError(e) {
	return "IndexedDbTransactionError" === e.name;
}
/**
* A wrapper around an IDBObjectStore providing an API that:
*
* 1) Has generic KeyType / ValueType parameters to provide strongly-typed
* methods for acting against the object store.
* 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every
* method return a PersistencePromise instead.
* 3) Provides a higher-level API to avoid needing to do excessive wrapping of
* intermediate IndexedDB types (IDBCursorWithValue, etc.)
*/ var __PRIVATE_SimpleDbStore = class {
	constructor(e) {
		this.store = e;
	}
	put(e, t) {
		let n;
		return void 0 !== t ? (__PRIVATE_logDebug(W, "PUT", this.store.name, e, t), n = this.store.put(t, e)) : (__PRIVATE_logDebug(W, "PUT", this.store.name, "<auto-key>", e), n = this.store.put(e)), __PRIVATE_wrapRequest(n);
	}
	/**
	* Adds a new value into an Object Store and returns the new key. Similar to
	* IndexedDb's `add()`, this method will fail on primary key collisions.
	*
	* @param value - The object to write.
	* @returns The key of the value to add.
	*/ add(e) {
		__PRIVATE_logDebug(W, "ADD", this.store.name, e, e);
		return __PRIVATE_wrapRequest(this.store.add(e));
	}
	/**
	* Gets the object with the specified key from the specified store, or null
	* if no object exists with the specified key.
	*
	* @key The key of the object to get.
	* @returns The object with the specified key or null if no object exists.
	*/ get(e) {
		return __PRIVATE_wrapRequest(this.store.get(e)).next(((t) => (void 0 === t && (t = null), __PRIVATE_logDebug(W, "GET", this.store.name, e, t), t)));
	}
	delete(e) {
		__PRIVATE_logDebug(W, "DELETE", this.store.name, e);
		return __PRIVATE_wrapRequest(this.store.delete(e));
	}
	/**
	* If we ever need more of the count variants, we can add overloads. For now,
	* all we need is to count everything in a store.
	*
	* Returns the number of rows in the store.
	*/ count() {
		__PRIVATE_logDebug(W, "COUNT", this.store.name);
		return __PRIVATE_wrapRequest(this.store.count());
	}
	J(e, t) {
		const n = this.options(e, t), r = n.index ? this.store.index(n.index) : this.store;
		if ("function" == typeof r.getAll) {
			const e$1 = r.getAll(n.range);
			return new PersistencePromise(((t$1, n$1) => {
				e$1.onerror = (e$2) => {
					n$1(e$2.target.error);
				}, e$1.onsuccess = (e$2) => {
					t$1(e$2.target.result);
				};
			}));
		}
		{
			const e$1 = this.cursor(n), t$1 = [];
			return this.H(e$1, ((e$2, n$1) => {
				t$1.push(n$1);
			})).next((() => t$1));
		}
	}
	/**
	* Loads the first `count` elements from the provided index range. Loads all
	* elements if no limit is provided.
	*/ Y(e, t) {
		const n = this.store.getAll(e, null === t ? void 0 : t);
		return new PersistencePromise(((e$1, t$1) => {
			n.onerror = (e$2) => {
				t$1(e$2.target.error);
			}, n.onsuccess = (t$2) => {
				e$1(t$2.target.result);
			};
		}));
	}
	Z(e, t) {
		__PRIVATE_logDebug(W, "DELETE ALL", this.store.name);
		const n = this.options(e, t);
		n.X = !1;
		const r = this.cursor(n);
		return this.H(r, ((e$1, t$1, n$1) => n$1.delete()));
	}
	ee(e, t) {
		let n;
		t ? n = e : (n = {}, t = e);
		const r = this.cursor(n);
		return this.H(r, t);
	}
	/**
	* Iterates over a store, but waits for the given callback to complete for
	* each entry before iterating the next entry. This allows the callback to do
	* asynchronous work to determine if this iteration should continue.
	*
	* The provided callback should return `true` to continue iteration, and
	* `false` otherwise.
	*/ te(e) {
		const t = this.cursor({});
		return new PersistencePromise(((n, r) => {
			t.onerror = (e$1) => {
				const t$1 = __PRIVATE_checkForAndReportiOSError(e$1.target.error);
				r(t$1);
			}, t.onsuccess = (t$1) => {
				const r$1 = t$1.target.result;
				r$1 ? e(r$1.primaryKey, r$1.value).next(((e$1) => {
					e$1 ? r$1.continue() : n();
				})) : n();
			};
		}));
	}
	H(e, t) {
		const n = [];
		return new PersistencePromise(((r, i) => {
			e.onerror = (e$1) => {
				i(e$1.target.error);
			}, e.onsuccess = (e$1) => {
				const i$1 = e$1.target.result;
				if (!i$1) return void r();
				const s = new __PRIVATE_IterationController(i$1), o = t(i$1.primaryKey, i$1.value, s);
				if (o instanceof PersistencePromise) {
					const e$2 = o.catch(((e$3) => (s.done(), PersistencePromise.reject(e$3))));
					n.push(e$2);
				}
				s.isDone ? r() : null === s.G ? i$1.continue() : i$1.continue(s.G);
			};
		})).next((() => PersistencePromise.waitFor(n)));
	}
	options(e, t) {
		let n;
		return void 0 !== e && ("string" == typeof e ? n = e : t = e), {
			index: n,
			range: t
		};
	}
	cursor(e) {
		let t = "next";
		if (e.reverse && (t = "prev"), e.index) {
			const n = this.store.index(e.index);
			return e.X ? n.openKeyCursor(e.range, t) : n.openCursor(e.range, t);
		}
		return this.store.openCursor(e.range, t);
	}
};
/**
* Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror
* handlers to resolve / reject the PersistencePromise as appropriate.
*/ function __PRIVATE_wrapRequest(e) {
	return new PersistencePromise(((t, n) => {
		e.onsuccess = (e$1) => {
			const n$1 = e$1.target.result;
			t(n$1);
		}, e.onerror = (e$1) => {
			const t$1 = __PRIVATE_checkForAndReportiOSError(e$1.target.error);
			n(t$1);
		};
	}));
}
var G = !1;
function __PRIVATE_checkForAndReportiOSError(e) {
	const t = __PRIVATE_SimpleDb.M(getUA());
	if (t >= 12.2 && t < 13) {
		const t$1 = "An internal error was encountered in the Indexed Database server";
		if (e.message.indexOf(t$1) >= 0) {
			const e$1 = new FirestoreError("internal", `IOS_INDEXEDDB_BUG1: IndexedDb has thrown '${t$1}'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.`);
			return G || (G = !0, setTimeout((() => {
				throw e$1;
			}), 0)), e$1;
		}
	}
	return e;
}
var z = "IndexBackfiller";
/** How long we wait to try running index backfill after SDK initialization. */
/** This class is responsible for the scheduling of Index Backfiller. */
var __PRIVATE_IndexBackfillerScheduler = class {
	constructor(e, t) {
		this.asyncQueue = e, this.ne = t, this.task = null;
	}
	start() {
		this.re(15e3);
	}
	stop() {
		this.task && (this.task.cancel(), this.task = null);
	}
	get started() {
		return null !== this.task;
	}
	re(e) {
		__PRIVATE_logDebug(z, `Scheduled in ${e}ms`), this.task = this.asyncQueue.enqueueAfterDelay("index_backfill", e, (async () => {
			this.task = null;
			try {
				const e$1 = await this.ne.ie();
				__PRIVATE_logDebug(z, `Documents written: ${e$1}`);
			} catch (e$1) {
				__PRIVATE_isIndexedDbTransactionError(e$1) ? __PRIVATE_logDebug(z, "Ignoring IndexedDB error during index backfill: ", e$1) : await __PRIVATE_ignoreIfPrimaryLeaseLoss(e$1);
			}
			await this.re(6e4);
		}));
	}
};
/** Implements the steps for backfilling indexes. */ var __PRIVATE_IndexBackfiller = class {
	constructor(e, t) {
		this.localStore = e, this.persistence = t;
	}
	async ie(e = 50) {
		return this.persistence.runTransaction("Backfill Indexes", "readwrite-primary", ((t) => this.se(t, e)));
	}
	/** Writes index entries until the cap is reached. Returns the number of documents processed. */ se(e, t) {
		const n = /* @__PURE__ */ new Set();
		let r = t, i = !0;
		return PersistencePromise.doWhile((() => !0 === i && r > 0), (() => this.localStore.indexManager.getNextCollectionGroupToUpdate(e).next(((t$1) => {
			if (null !== t$1 && !n.has(t$1)) return __PRIVATE_logDebug(z, `Processing collection: ${t$1}`), this.oe(e, t$1, r).next(((e$1) => {
				r -= e$1, n.add(t$1);
			}));
			i = !1;
		})))).next((() => t - r));
	}
	/**
	* Writes entries for the provided collection group. Returns the number of documents processed.
	*/ oe(e, t, n) {
		return this.localStore.indexManager.getMinOffsetFromCollectionGroup(e, t).next(((r) => this.localStore.localDocuments.getNextDocuments(e, t, r, n).next(((n$1) => {
			const i = n$1.changes;
			return this.localStore.indexManager.updateIndexEntries(e, i).next((() => this._e(r, n$1))).next(((n$2) => (__PRIVATE_logDebug(z, `Updating offset: ${n$2}`), this.localStore.indexManager.updateCollectionGroup(e, t, n$2)))).next((() => i.size));
		}))));
	}
	/** Returns the next offset based on the provided documents. */ _e(e, t) {
		let n = e;
		return t.changes.forEach(((e$1, t$1) => {
			const r = __PRIVATE_newIndexOffsetFromDocument(t$1);
			__PRIVATE_indexOffsetComparator(r, n) > 0 && (n = r);
		})), new IndexOffset(n.readTime, n.documentKey, Math.max(t.batchId, e.largestBatchId));
	}
};
/**
* @license
* Copyright 2018 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* `ListenSequence` is a monotonic sequence. It is initialized with a minimum value to
* exceed. All subsequent calls to next will return increasing values. If provided with a
* `SequenceNumberSyncer`, it will additionally bump its next value when told of a new value, as
* well as write out sequence numbers that it produces via `next()`.
*/ var __PRIVATE_ListenSequence = class {
	constructor(e, t) {
		this.previousValue = e, t && (t.sequenceNumberHandler = (e$1) => this.ae(e$1), this.ue = (e$1) => t.writeSequenceNumber(e$1));
	}
	ae(e) {
		return this.previousValue = Math.max(e, this.previousValue), this.previousValue;
	}
	next() {
		const e = ++this.previousValue;
		return this.ue && this.ue(e), e;
	}
};
__PRIVATE_ListenSequence.ce = -1;
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/** Sentinel value that sorts before any Mutation Batch ID. */
var j = -1;
/**
* Returns whether a variable is either undefined or null.
*/ function __PRIVATE_isNullOrUndefined(e) {
	return null == e;
}
/** Returns whether the value represents -0. */ function __PRIVATE_isNegativeZero(e) {
	return 0 === e && 1 / e == -Infinity;
}
/**
* Returns whether a value is an integer and in the safe integer range
* @param value - The value to test for being an integer and in the safe range
*/ function isSafeInteger(e) {
	return "number" == typeof e && Number.isInteger(e) && !__PRIVATE_isNegativeZero(e) && e <= Number.MAX_SAFE_INTEGER && e >= Number.MIN_SAFE_INTEGER;
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ var J = "";
/**
* Encodes a resource path into a IndexedDb-compatible string form.
*/
function __PRIVATE_encodeResourcePath(e) {
	let t = "";
	for (let n = 0; n < e.length; n++) t.length > 0 && (t = __PRIVATE_encodeSeparator(t)), t = __PRIVATE_encodeSegment(e.get(n), t);
	return __PRIVATE_encodeSeparator(t);
}
/** Encodes a single segment of a resource path into the given result */ function __PRIVATE_encodeSegment(e, t) {
	let n = t;
	const r = e.length;
	for (let t$1 = 0; t$1 < r; t$1++) {
		const r$1 = e.charAt(t$1);
		switch (r$1) {
			case "\0":
				n += "";
				break;
			case J:
				n += "";
				break;
			default: n += r$1;
		}
	}
	return n;
}
/** Encodes a path separator into the given result */ function __PRIVATE_encodeSeparator(e) {
	return e + J + "";
}
/**
* Decodes the given IndexedDb-compatible string form of a resource path into
* a ResourcePath instance. Note that this method is not suitable for use with
* decoding resource names from the server; those are One Platform format
* strings.
*/ function __PRIVATE_decodeResourcePath(e) {
	const t = e.length;
	if (__PRIVATE_hardAssert(t >= 2, 64408, { path: e }), 2 === t) return __PRIVATE_hardAssert(e.charAt(0) === J && "" === e.charAt(1), 56145, { path: e }), ResourcePath.emptyPath();
	const __PRIVATE_lastReasonableEscapeIndex = t - 2, n = [];
	let r = "";
	for (let i = 0; i < t;) {
		const t$1 = e.indexOf(J, i);
		(t$1 < 0 || t$1 > __PRIVATE_lastReasonableEscapeIndex) && fail(50515, { path: e });
		switch (e.charAt(t$1 + 1)) {
			case "":
				const s = e.substring(i, t$1);
				let o;
				0 === r.length ? o = s : (r += s, o = r, r = ""), n.push(o);
				break;
			case "":
				r += e.substring(i, t$1), r += "\0";
				break;
			case "":
				r += e.substring(i, t$1 + 1);
				break;
			default: fail(61167, { path: e });
		}
		i = t$1 + 2;
	}
	return new ResourcePath(n);
}
/**
* @license
* Copyright 2022 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ var H = "remoteDocuments", Y = "owner", Z = "owner", X = "mutationQueues", ee = "userId", te = "mutations", ne = "batchId", re = "userMutationsIndex", ie = ["userId", "batchId"];
/**
* @license
* Copyright 2022 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Name of the IndexedDb object store.
*
* Note that the name 'owner' is chosen to ensure backwards compatibility with
* older clients that only supported single locked access to the persistence
* layer.
*/
/**
* Creates a [userId, encodedPath] key for use in the DbDocumentMutations
* index to iterate over all at document mutations for a given path or lower.
*/
function __PRIVATE_newDbDocumentMutationPrefixForPath(e, t) {
	return [e, __PRIVATE_encodeResourcePath(t)];
}
/**
* Creates a full index key of [userId, encodedPath, batchId] for inserting
* and deleting into the DbDocumentMutations index.
*/ function __PRIVATE_newDbDocumentMutationKey(e, t, n) {
	return [
		e,
		__PRIVATE_encodeResourcePath(t),
		n
	];
}
/**
* Because we store all the useful information for this store in the key,
* there is no useful information to store as the value. The raw (unencoded)
* path cannot be stored because IndexedDb doesn't store prototype
* information.
*/ var se = {}, oe = "documentMutations", _e = "remoteDocumentsV14", ae = [
	"prefixPath",
	"collectionGroup",
	"readTime",
	"documentId"
], ue = "documentKeyIndex", ce = [
	"prefixPath",
	"collectionGroup",
	"documentId"
], le = "collectionGroupIndex", he = [
	"collectionGroup",
	"readTime",
	"prefixPath",
	"documentId"
], Pe = "remoteDocumentGlobal", Te = "remoteDocumentGlobalKey", Ie = "targets", Ee = "queryTargetsIndex", de = ["canonicalId", "targetId"], Ae = "targetDocuments", Re = ["targetId", "path"], Ve = "documentTargetsIndex", me = ["path", "targetId"], fe = "targetGlobalKey", ge = "targetGlobal", pe = "collectionParents", ye = ["collectionId", "parent"], we = "clientMetadata", Se = "clientId", be = "bundles", De = "bundleId", Ce = "namedQueries", ve = "name", Fe = "indexConfiguration", Me = "indexId", xe = "collectionGroupIndex", Oe = "collectionGroup", Ne = "indexState", Be = ["indexId", "uid"], Le = "sequenceNumberIndex", ke = ["uid", "sequenceNumber"], qe = "indexEntries", Qe = [
	"indexId",
	"uid",
	"arrayValue",
	"directionalValue",
	"orderedDocumentKey",
	"documentKey"
], $e = "documentKeyIndex", Ue = [
	"indexId",
	"uid",
	"orderedDocumentKey"
], Ke = "documentOverlays", We = [
	"userId",
	"collectionPath",
	"documentId"
], Ge = "collectionPathOverlayIndex", ze = [
	"userId",
	"collectionPath",
	"largestBatchId"
], je = "collectionGroupOverlayIndex", Je = [
	"userId",
	"collectionGroup",
	"largestBatchId"
], He = "globals", Ye = "name", Ze = [
	...[...[...[...[
		X,
		te,
		oe,
		H,
		Ie,
		Y,
		ge,
		Ae
	], we], Pe], pe],
	be,
	Ce
], Xe = [...Ze, Ke], et = [
	X,
	te,
	oe,
	_e,
	Ie,
	Y,
	ge,
	Ae,
	we,
	Pe,
	pe,
	be,
	Ce,
	Ke
], tt = et, nt = [
	...tt,
	Fe,
	Ne,
	qe
], rt = nt, it = [...nt, He], st = it;
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var __PRIVATE_IndexedDbTransaction = class extends PersistenceTransaction {
	constructor(e, t) {
		super(), this.le = e, this.currentSequenceNumber = t;
	}
};
function __PRIVATE_getStore(e, t) {
	const n = __PRIVATE_debugCast(e);
	return __PRIVATE_SimpleDb.O(n.le, t);
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ function __PRIVATE_objectSize(e) {
	let t = 0;
	for (const n in e) Object.prototype.hasOwnProperty.call(e, n) && t++;
	return t;
}
function forEach(e, t) {
	for (const n in e) Object.prototype.hasOwnProperty.call(e, n) && t(n, e[n]);
}
function __PRIVATE_mapToArray(e, t) {
	const n = [];
	for (const r in e) Object.prototype.hasOwnProperty.call(e, r) && n.push(t(e[r], r, e));
	return n;
}
function isEmpty(e) {
	for (const t in e) if (Object.prototype.hasOwnProperty.call(e, t)) return !1;
	return !0;
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var SortedMap = class SortedMap {
	constructor(e, t) {
		this.comparator = e, this.root = t || LLRBNode.EMPTY;
	}
	insert(e, t) {
		return new SortedMap(this.comparator, this.root.insert(e, t, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));
	}
	remove(e) {
		return new SortedMap(this.comparator, this.root.remove(e, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));
	}
	get(e) {
		let t = this.root;
		for (; !t.isEmpty();) {
			const n = this.comparator(e, t.key);
			if (0 === n) return t.value;
			n < 0 ? t = t.left : n > 0 && (t = t.right);
		}
		return null;
	}
	indexOf(e) {
		let t = 0, n = this.root;
		for (; !n.isEmpty();) {
			const r = this.comparator(e, n.key);
			if (0 === r) return t + n.left.size;
			r < 0 ? n = n.left : (t += n.left.size + 1, n = n.right);
		}
		return -1;
	}
	isEmpty() {
		return this.root.isEmpty();
	}
	get size() {
		return this.root.size;
	}
	minKey() {
		return this.root.minKey();
	}
	maxKey() {
		return this.root.maxKey();
	}
	inorderTraversal(e) {
		return this.root.inorderTraversal(e);
	}
	forEach(e) {
		this.inorderTraversal(((t, n) => (e(t, n), !1)));
	}
	toString() {
		const e = [];
		return this.inorderTraversal(((t, n) => (e.push(`${t}:${n}`), !1))), `{${e.join(", ")}}`;
	}
	reverseTraversal(e) {
		return this.root.reverseTraversal(e);
	}
	getIterator() {
		return new SortedMapIterator(this.root, null, this.comparator, !1);
	}
	getIteratorFrom(e) {
		return new SortedMapIterator(this.root, e, this.comparator, !1);
	}
	getReverseIterator() {
		return new SortedMapIterator(this.root, null, this.comparator, !0);
	}
	getReverseIteratorFrom(e) {
		return new SortedMapIterator(this.root, e, this.comparator, !0);
	}
};
var SortedMapIterator = class {
	constructor(e, t, n, r) {
		this.isReverse = r, this.nodeStack = [];
		let i = 1;
		for (; !e.isEmpty();) if (i = t ? n(e.key, t) : 1, t && r && (i *= -1), i < 0) e = this.isReverse ? e.left : e.right;
		else {
			if (0 === i) {
				this.nodeStack.push(e);
				break;
			}
			this.nodeStack.push(e), e = this.isReverse ? e.right : e.left;
		}
	}
	getNext() {
		let e = this.nodeStack.pop();
		const t = {
			key: e.key,
			value: e.value
		};
		if (this.isReverse) for (e = e.left; !e.isEmpty();) this.nodeStack.push(e), e = e.right;
		else for (e = e.right; !e.isEmpty();) this.nodeStack.push(e), e = e.left;
		return t;
	}
	hasNext() {
		return this.nodeStack.length > 0;
	}
	peek() {
		if (0 === this.nodeStack.length) return null;
		const e = this.nodeStack[this.nodeStack.length - 1];
		return {
			key: e.key,
			value: e.value
		};
	}
};
var LLRBNode = class LLRBNode {
	constructor(e, t, n, r, i) {
		this.key = e, this.value = t, this.color = null != n ? n : LLRBNode.RED, this.left = null != r ? r : LLRBNode.EMPTY, this.right = null != i ? i : LLRBNode.EMPTY, this.size = this.left.size + 1 + this.right.size;
	}
	copy(e, t, n, r, i) {
		return new LLRBNode(null != e ? e : this.key, null != t ? t : this.value, null != n ? n : this.color, null != r ? r : this.left, null != i ? i : this.right);
	}
	isEmpty() {
		return !1;
	}
	inorderTraversal(e) {
		return this.left.inorderTraversal(e) || e(this.key, this.value) || this.right.inorderTraversal(e);
	}
	reverseTraversal(e) {
		return this.right.reverseTraversal(e) || e(this.key, this.value) || this.left.reverseTraversal(e);
	}
	min() {
		return this.left.isEmpty() ? this : this.left.min();
	}
	minKey() {
		return this.min().key;
	}
	maxKey() {
		return this.right.isEmpty() ? this.key : this.right.maxKey();
	}
	insert(e, t, n) {
		let r = this;
		const i = n(e, r.key);
		return r = i < 0 ? r.copy(null, null, null, r.left.insert(e, t, n), null) : 0 === i ? r.copy(null, t, null, null, null) : r.copy(null, null, null, null, r.right.insert(e, t, n)), r.fixUp();
	}
	removeMin() {
		if (this.left.isEmpty()) return LLRBNode.EMPTY;
		let e = this;
		return e.left.isRed() || e.left.left.isRed() || (e = e.moveRedLeft()), e = e.copy(null, null, null, e.left.removeMin(), null), e.fixUp();
	}
	remove(e, t) {
		let n, r = this;
		if (t(e, r.key) < 0) r.left.isEmpty() || r.left.isRed() || r.left.left.isRed() || (r = r.moveRedLeft()), r = r.copy(null, null, null, r.left.remove(e, t), null);
		else {
			if (r.left.isRed() && (r = r.rotateRight()), r.right.isEmpty() || r.right.isRed() || r.right.left.isRed() || (r = r.moveRedRight()), 0 === t(e, r.key)) {
				if (r.right.isEmpty()) return LLRBNode.EMPTY;
				n = r.right.min(), r = r.copy(n.key, n.value, null, null, r.right.removeMin());
			}
			r = r.copy(null, null, null, null, r.right.remove(e, t));
		}
		return r.fixUp();
	}
	isRed() {
		return this.color;
	}
	fixUp() {
		let e = this;
		return e.right.isRed() && !e.left.isRed() && (e = e.rotateLeft()), e.left.isRed() && e.left.left.isRed() && (e = e.rotateRight()), e.left.isRed() && e.right.isRed() && (e = e.colorFlip()), e;
	}
	moveRedLeft() {
		let e = this.colorFlip();
		return e.right.left.isRed() && (e = e.copy(null, null, null, null, e.right.rotateRight()), e = e.rotateLeft(), e = e.colorFlip()), e;
	}
	moveRedRight() {
		let e = this.colorFlip();
		return e.left.left.isRed() && (e = e.rotateRight(), e = e.colorFlip()), e;
	}
	rotateLeft() {
		const e = this.copy(null, null, LLRBNode.RED, null, this.right.left);
		return this.right.copy(null, null, this.color, e, null);
	}
	rotateRight() {
		const e = this.copy(null, null, LLRBNode.RED, this.left.right, null);
		return this.left.copy(null, null, this.color, null, e);
	}
	colorFlip() {
		const e = this.left.copy(null, null, !this.left.color, null, null), t = this.right.copy(null, null, !this.right.color, null, null);
		return this.copy(null, null, !this.color, e, t);
	}
	checkMaxDepth() {
		const e = this.check();
		return Math.pow(2, e) <= this.size + 1;
	}
	check() {
		if (this.isRed() && this.left.isRed()) throw fail(43730, {
			key: this.key,
			value: this.value
		});
		if (this.right.isRed()) throw fail(14113, {
			key: this.key,
			value: this.value
		});
		const e = this.left.check();
		if (e !== this.right.check()) throw fail(27949);
		return e + (this.isRed() ? 0 : 1);
	}
};
LLRBNode.EMPTY = null, LLRBNode.RED = !0, LLRBNode.BLACK = !1;
LLRBNode.EMPTY = new class LLRBEmptyNode {
	constructor() {
		this.size = 0;
	}
	get key() {
		throw fail(57766);
	}
	get value() {
		throw fail(16141);
	}
	get color() {
		throw fail(16727);
	}
	get left() {
		throw fail(29726);
	}
	get right() {
		throw fail(36894);
	}
	copy(e, t, n, r, i) {
		return this;
	}
	insert(e, t, n) {
		return new LLRBNode(e, t);
	}
	remove(e, t) {
		return this;
	}
	isEmpty() {
		return !0;
	}
	inorderTraversal(e) {
		return !1;
	}
	reverseTraversal(e) {
		return !1;
	}
	minKey() {
		return null;
	}
	maxKey() {
		return null;
	}
	isRed() {
		return !1;
	}
	checkMaxDepth() {
		return !0;
	}
	check() {
		return 0;
	}
}();
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* SortedSet is an immutable (copy-on-write) collection that holds elements
* in order specified by the provided comparator.
*
* NOTE: if provided comparator returns 0 for two elements, we consider them to
* be equal!
*/
var SortedSet = class SortedSet {
	constructor(e) {
		this.comparator = e, this.data = new SortedMap(this.comparator);
	}
	has(e) {
		return null !== this.data.get(e);
	}
	first() {
		return this.data.minKey();
	}
	last() {
		return this.data.maxKey();
	}
	get size() {
		return this.data.size;
	}
	indexOf(e) {
		return this.data.indexOf(e);
	}
	/** Iterates elements in order defined by "comparator" */ forEach(e) {
		this.data.inorderTraversal(((t, n) => (e(t), !1)));
	}
	/** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */ forEachInRange(e, t) {
		const n = this.data.getIteratorFrom(e[0]);
		for (; n.hasNext();) {
			const r = n.getNext();
			if (this.comparator(r.key, e[1]) >= 0) return;
			t(r.key);
		}
	}
	/**
	* Iterates over `elem`s such that: start &lt;= elem until false is returned.
	*/ forEachWhile(e, t) {
		let n;
		for (n = void 0 !== t ? this.data.getIteratorFrom(t) : this.data.getIterator(); n.hasNext();) if (!e(n.getNext().key)) return;
	}
	/** Finds the least element greater than or equal to `elem`. */ firstAfterOrEqual(e) {
		const t = this.data.getIteratorFrom(e);
		return t.hasNext() ? t.getNext().key : null;
	}
	getIterator() {
		return new SortedSetIterator(this.data.getIterator());
	}
	getIteratorFrom(e) {
		return new SortedSetIterator(this.data.getIteratorFrom(e));
	}
	/** Inserts or updates an element */ add(e) {
		return this.copy(this.data.remove(e).insert(e, !0));
	}
	/** Deletes an element */ delete(e) {
		return this.has(e) ? this.copy(this.data.remove(e)) : this;
	}
	isEmpty() {
		return this.data.isEmpty();
	}
	unionWith(e) {
		let t = this;
		return t.size < e.size && (t = e, e = this), e.forEach(((e$1) => {
			t = t.add(e$1);
		})), t;
	}
	isEqual(e) {
		if (!(e instanceof SortedSet)) return !1;
		if (this.size !== e.size) return !1;
		const t = this.data.getIterator(), n = e.data.getIterator();
		for (; t.hasNext();) {
			const e$1 = t.getNext().key, r = n.getNext().key;
			if (0 !== this.comparator(e$1, r)) return !1;
		}
		return !0;
	}
	toArray() {
		const e = [];
		return this.forEach(((t) => {
			e.push(t);
		})), e;
	}
	toString() {
		const e = [];
		return this.forEach(((t) => e.push(t))), "SortedSet(" + e.toString() + ")";
	}
	copy(e) {
		const t = new SortedSet(this.comparator);
		return t.data = e, t;
	}
};
var SortedSetIterator = class {
	constructor(e) {
		this.iter = e;
	}
	getNext() {
		return this.iter.getNext().key;
	}
	hasNext() {
		return this.iter.hasNext();
	}
};
/**
* Compares two sorted sets for equality using their natural ordering. The
* method computes the intersection and invokes `onAdd` for every element that
* is in `after` but not `before`. `onRemove` is invoked for every element in
* `before` but missing from `after`.
*
* The method creates a copy of both `before` and `after` and runs in O(n log
* n), where n is the size of the two lists.
*
* @param before - The elements that exist in the original set.
* @param after - The elements to diff against the original set.
* @param comparator - The comparator for the elements in before and after.
* @param onAdd - A function to invoke for every element that is part of `
* after` but not `before`.
* @param onRemove - A function to invoke for every element that is part of
* `before` but not `after`.
*/
/**
* Returns the next element from the iterator or `undefined` if none available.
*/
function __PRIVATE_advanceIterator(e) {
	return e.hasNext() ? e.getNext() : void 0;
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Provides a set of fields that can be used to partially patch a document.
* FieldMask is used in conjunction with ObjectValue.
* Examples:
*   foo - Overwrites foo entirely with the provided value. If foo is not
*         present in the companion ObjectValue, the field is deleted.
*   foo.bar - Overwrites only the field bar of the object foo.
*             If foo is not an object, foo is replaced with an object
*             containing foo
*/ var FieldMask = class FieldMask {
	constructor(e) {
		this.fields = e, e.sort(FieldPath$1.comparator);
	}
	static empty() {
		return new FieldMask([]);
	}
	/**
	* Returns a new FieldMask object that is the result of adding all the given
	* fields paths to this field mask.
	*/ unionWith(e) {
		let t = new SortedSet(FieldPath$1.comparator);
		for (const e$1 of this.fields) t = t.add(e$1);
		for (const n of e) t = t.add(n);
		return new FieldMask(t.toArray());
	}
	/**
	* Verifies that `fieldPath` is included by at least one field in this field
	* mask.
	*
	* This is an O(n) operation, where `n` is the size of the field mask.
	*/ covers(e) {
		for (const t of this.fields) if (t.isPrefixOf(e)) return !0;
		return !1;
	}
	isEqual(e) {
		return __PRIVATE_arrayEquals(this.fields, e.fields, ((e$1, t) => e$1.isEqual(t)));
	}
};
/**
* @license
* Copyright 2023 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* An error encountered while decoding base64 string.
*/ var __PRIVATE_Base64DecodeError = class extends Error {
	constructor() {
		super(...arguments), this.name = "Base64DecodeError";
	}
};
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/** Converts a Base64 encoded string to a binary string. */
/** True if and only if the Base64 conversion functions are available. */
function __PRIVATE_isBase64Available() {
	return "undefined" != typeof atob;
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Immutable class that represents a "proto" byte string.
*
* Proto byte strings can either be Base64-encoded strings or Uint8Arrays when
* sent on the wire. This class abstracts away this differentiation by holding
* the proto byte string in a common class that must be converted into a string
* before being sent as a proto.
* @internal
*/ var ByteString = class ByteString {
	constructor(e) {
		this.binaryString = e;
	}
	static fromBase64String(e) {
		const t = function __PRIVATE_decodeBase64(e$1) {
			try {
				return atob(e$1);
			} catch (e$2) {
				throw "undefined" != typeof DOMException && e$2 instanceof DOMException ? new __PRIVATE_Base64DecodeError("Invalid base64 string: " + e$2) : e$2;
			}
		}(e);
		return new ByteString(t);
	}
	static fromUint8Array(e) {
		const t = function __PRIVATE_binaryStringFromUint8Array(e$1) {
			let t$1 = "";
			for (let n = 0; n < e$1.length; ++n) t$1 += String.fromCharCode(e$1[n]);
			return t$1;
		}(e);
		return new ByteString(t);
	}
	[Symbol.iterator]() {
		let e = 0;
		return { next: () => e < this.binaryString.length ? {
			value: this.binaryString.charCodeAt(e++),
			done: !1
		} : {
			value: void 0,
			done: !0
		} };
	}
	toBase64() {
		return function __PRIVATE_encodeBase64(e) {
			return btoa(e);
		}(this.binaryString);
	}
	toUint8Array() {
		return function __PRIVATE_uint8ArrayFromBinaryString(e) {
			const t = new Uint8Array(e.length);
			for (let n = 0; n < e.length; n++) t[n] = e.charCodeAt(n);
			return t;
		}(this.binaryString);
	}
	approximateByteSize() {
		return 2 * this.binaryString.length;
	}
	compareTo(e) {
		return __PRIVATE_primitiveComparator(this.binaryString, e.binaryString);
	}
	isEqual(e) {
		return this.binaryString === e.binaryString;
	}
};
ByteString.EMPTY_BYTE_STRING = new ByteString("");
var ot = /* @__PURE__ */ new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);
/**
* Converts the possible Proto values for a timestamp value into a "seconds and
* nanos" representation.
*/ function __PRIVATE_normalizeTimestamp(e) {
	if (__PRIVATE_hardAssert(!!e, 39018), "string" == typeof e) {
		let t = 0;
		const n = ot.exec(e);
		if (__PRIVATE_hardAssert(!!n, 46558, { timestamp: e }), n[1]) {
			let e$1 = n[1];
			e$1 = (e$1 + "000000000").substr(0, 9), t = Number(e$1);
		}
		const r = new Date(e);
		return {
			seconds: Math.floor(r.getTime() / 1e3),
			nanos: t
		};
	}
	return {
		seconds: __PRIVATE_normalizeNumber(e.seconds),
		nanos: __PRIVATE_normalizeNumber(e.nanos)
	};
}
/**
* Converts the possible Proto types for numbers into a JavaScript number.
* Returns 0 if the value is not numeric.
*/ function __PRIVATE_normalizeNumber(e) {
	return "number" == typeof e ? e : "string" == typeof e ? Number(e) : 0;
}
/** Converts the possible Proto types for Blobs into a ByteString. */ function __PRIVATE_normalizeByteString(e) {
	return "string" == typeof e ? ByteString.fromBase64String(e) : ByteString.fromUint8Array(e);
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Represents a locally-applied ServerTimestamp.
*
* Server Timestamps are backed by MapValues that contain an internal field
* `__type__` with a value of `server_timestamp`. The previous value and local
* write time are stored in its `__previous_value__` and `__local_write_time__`
* fields respectively.
*
* Notes:
* - ServerTimestampValue instances are created as the result of applying a
*   transform. They can only exist in the local view of a document. Therefore
*   they do not need to be parsed or serialized.
* - When evaluated locally (e.g. for snapshot.data()), they by default
*   evaluate to `null`. This behavior can be configured by passing custom
*   FieldValueOptions to value().
* - With respect to other ServerTimestampValues, they sort by their
*   localWriteTime.
*/ var _t = "server_timestamp", at = "__type__", ut = "__previous_value__", ct = "__local_write_time__";
function __PRIVATE_isServerTimestamp(e) {
	return (e?.mapValue?.fields || {})[at]?.stringValue === _t;
}
/**
* Creates a new ServerTimestamp proto value (using the internal format).
*/
/**
* Returns the value of the field before this ServerTimestamp was set.
*
* Preserving the previous values allows the user to display the last resoled
* value until the backend responds with the timestamp.
*/
function __PRIVATE_getPreviousValue(e) {
	const t = e.mapValue.fields[ut];
	return __PRIVATE_isServerTimestamp(t) ? __PRIVATE_getPreviousValue(t) : t;
}
/**
* Returns the local time at which this timestamp was first set.
*/ function __PRIVATE_getLocalWriteTime(e) {
	const t = __PRIVATE_normalizeTimestamp(e.mapValue.fields[ct].timestampValue);
	return new Timestamp(t.seconds, t.nanos);
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ var DatabaseInfo = class {
	/**
	* Constructs a DatabaseInfo using the provided host, databaseId and
	* persistenceKey.
	*
	* @param databaseId - The database to use.
	* @param appId - The Firebase App Id.
	* @param persistenceKey - A unique identifier for this Firestore's local
	* storage (used in conjunction with the databaseId).
	* @param host - The Firestore backend host to connect to.
	* @param ssl - Whether to use SSL when connecting.
	* @param forceLongPolling - Whether to use the forceLongPolling option
	* when using WebChannel as the network transport.
	* @param autoDetectLongPolling - Whether to use the detectBufferingProxy
	* option when using WebChannel as the network transport.
	* @param longPollingOptions Options that configure long-polling.
	* @param useFetchStreams Whether to use the Fetch API instead of
	* XMLHTTPRequest
	*/
	constructor(e, t, n, r, i, s, o, _, a, u) {
		this.databaseId = e, this.appId = t, this.persistenceKey = n, this.host = r, this.ssl = i, this.forceLongPolling = s, this.autoDetectLongPolling = o, this.longPollingOptions = _, this.useFetchStreams = a, this.isUsingEmulator = u;
	}
};
/** The default database name for a project. */ var lt = "(default)";
/**
* Represents the database ID a Firestore client is associated with.
* @internal
*/ var DatabaseId = class DatabaseId {
	constructor(e, t) {
		this.projectId = e, this.database = t || lt;
	}
	static empty() {
		return new DatabaseId("", "");
	}
	get isDefaultDatabase() {
		return this.database === lt;
	}
	isEqual(e) {
		return e instanceof DatabaseId && e.projectId === this.projectId && e.database === this.database;
	}
};
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var ht = "__type__", Pt = "__max__", Tt = { mapValue: { fields: { __type__: { stringValue: Pt } } } }, It = "__vector__", Et = "value", dt = { nullValue: "NULL_VALUE" };
/** Extracts the backend's type order for the provided value. */
function __PRIVATE_typeOrder(e) {
	return "nullValue" in e ? 0 : "booleanValue" in e ? 1 : "integerValue" in e || "doubleValue" in e ? 2 : "timestampValue" in e ? 3 : "stringValue" in e ? 5 : "bytesValue" in e ? 6 : "referenceValue" in e ? 7 : "geoPointValue" in e ? 8 : "arrayValue" in e ? 9 : "mapValue" in e ? __PRIVATE_isServerTimestamp(e) ? 4 : __PRIVATE_isMaxValue(e) ? 9007199254740991 : __PRIVATE_isVectorValue(e) ? 10 : 11 : fail(28295, { value: e });
}
/** Tests `left` and `right` for equality based on the backend semantics. */ function __PRIVATE_valueEquals(e, t) {
	if (e === t) return !0;
	const n = __PRIVATE_typeOrder(e);
	if (n !== __PRIVATE_typeOrder(t)) return !1;
	switch (n) {
		case 0:
		case 9007199254740991: return !0;
		case 1: return e.booleanValue === t.booleanValue;
		case 4: return __PRIVATE_getLocalWriteTime(e).isEqual(__PRIVATE_getLocalWriteTime(t));
		case 3: return function __PRIVATE_timestampEquals(e$1, t$1) {
			if ("string" == typeof e$1.timestampValue && "string" == typeof t$1.timestampValue && e$1.timestampValue.length === t$1.timestampValue.length) return e$1.timestampValue === t$1.timestampValue;
			const n$1 = __PRIVATE_normalizeTimestamp(e$1.timestampValue), r = __PRIVATE_normalizeTimestamp(t$1.timestampValue);
			return n$1.seconds === r.seconds && n$1.nanos === r.nanos;
		}(e, t);
		case 5: return e.stringValue === t.stringValue;
		case 6: return function __PRIVATE_blobEquals(e$1, t$1) {
			return __PRIVATE_normalizeByteString(e$1.bytesValue).isEqual(__PRIVATE_normalizeByteString(t$1.bytesValue));
		}(e, t);
		case 7: return e.referenceValue === t.referenceValue;
		case 8: return function __PRIVATE_geoPointEquals(e$1, t$1) {
			return __PRIVATE_normalizeNumber(e$1.geoPointValue.latitude) === __PRIVATE_normalizeNumber(t$1.geoPointValue.latitude) && __PRIVATE_normalizeNumber(e$1.geoPointValue.longitude) === __PRIVATE_normalizeNumber(t$1.geoPointValue.longitude);
		}(e, t);
		case 2: return function __PRIVATE_numberEquals(e$1, t$1) {
			if ("integerValue" in e$1 && "integerValue" in t$1) return __PRIVATE_normalizeNumber(e$1.integerValue) === __PRIVATE_normalizeNumber(t$1.integerValue);
			if ("doubleValue" in e$1 && "doubleValue" in t$1) {
				const n$1 = __PRIVATE_normalizeNumber(e$1.doubleValue), r = __PRIVATE_normalizeNumber(t$1.doubleValue);
				return n$1 === r ? __PRIVATE_isNegativeZero(n$1) === __PRIVATE_isNegativeZero(r) : isNaN(n$1) && isNaN(r);
			}
			return !1;
		}(e, t);
		case 9: return __PRIVATE_arrayEquals(e.arrayValue.values || [], t.arrayValue.values || [], __PRIVATE_valueEquals);
		case 10:
		case 11: return function __PRIVATE_objectEquals(e$1, t$1) {
			const n$1 = e$1.mapValue.fields || {}, r = t$1.mapValue.fields || {};
			if (__PRIVATE_objectSize(n$1) !== __PRIVATE_objectSize(r)) return !1;
			for (const e$2 in n$1) if (n$1.hasOwnProperty(e$2) && (void 0 === r[e$2] || !__PRIVATE_valueEquals(n$1[e$2], r[e$2]))) return !1;
			return !0;
		}(e, t);
		default: return fail(52216, { left: e });
	}
}
function __PRIVATE_arrayValueContains(e, t) {
	return void 0 !== (e.values || []).find(((e$1) => __PRIVATE_valueEquals(e$1, t)));
}
function __PRIVATE_valueCompare(e, t) {
	if (e === t) return 0;
	const n = __PRIVATE_typeOrder(e), r = __PRIVATE_typeOrder(t);
	if (n !== r) return __PRIVATE_primitiveComparator(n, r);
	switch (n) {
		case 0:
		case 9007199254740991: return 0;
		case 1: return __PRIVATE_primitiveComparator(e.booleanValue, t.booleanValue);
		case 2: return function __PRIVATE_compareNumbers(e$1, t$1) {
			const n$1 = __PRIVATE_normalizeNumber(e$1.integerValue || e$1.doubleValue), r$1 = __PRIVATE_normalizeNumber(t$1.integerValue || t$1.doubleValue);
			return n$1 < r$1 ? -1 : n$1 > r$1 ? 1 : n$1 === r$1 ? 0 : isNaN(n$1) ? isNaN(r$1) ? 0 : -1 : 1;
		}(e, t);
		case 3: return __PRIVATE_compareTimestamps(e.timestampValue, t.timestampValue);
		case 4: return __PRIVATE_compareTimestamps(__PRIVATE_getLocalWriteTime(e), __PRIVATE_getLocalWriteTime(t));
		case 5: return __PRIVATE_compareUtf8Strings(e.stringValue, t.stringValue);
		case 6: return function __PRIVATE_compareBlobs(e$1, t$1) {
			const n$1 = __PRIVATE_normalizeByteString(e$1), r$1 = __PRIVATE_normalizeByteString(t$1);
			return n$1.compareTo(r$1);
		}(e.bytesValue, t.bytesValue);
		case 7: return function __PRIVATE_compareReferences(e$1, t$1) {
			const n$1 = e$1.split("/"), r$1 = t$1.split("/");
			for (let e$2 = 0; e$2 < n$1.length && e$2 < r$1.length; e$2++) {
				const t$2 = __PRIVATE_primitiveComparator(n$1[e$2], r$1[e$2]);
				if (0 !== t$2) return t$2;
			}
			return __PRIVATE_primitiveComparator(n$1.length, r$1.length);
		}(e.referenceValue, t.referenceValue);
		case 8: return function __PRIVATE_compareGeoPoints(e$1, t$1) {
			const n$1 = __PRIVATE_primitiveComparator(__PRIVATE_normalizeNumber(e$1.latitude), __PRIVATE_normalizeNumber(t$1.latitude));
			if (0 !== n$1) return n$1;
			return __PRIVATE_primitiveComparator(__PRIVATE_normalizeNumber(e$1.longitude), __PRIVATE_normalizeNumber(t$1.longitude));
		}(e.geoPointValue, t.geoPointValue);
		case 9: return __PRIVATE_compareArrays(e.arrayValue, t.arrayValue);
		case 10: return function __PRIVATE_compareVectors(e$1, t$1) {
			const n$1 = e$1.fields || {}, r$1 = t$1.fields || {}, i = n$1[Et]?.arrayValue, s = r$1[Et]?.arrayValue, o = __PRIVATE_primitiveComparator(i?.values?.length || 0, s?.values?.length || 0);
			if (0 !== o) return o;
			return __PRIVATE_compareArrays(i, s);
		}(e.mapValue, t.mapValue);
		case 11: return function __PRIVATE_compareMaps(e$1, t$1) {
			if (e$1 === Tt.mapValue && t$1 === Tt.mapValue) return 0;
			if (e$1 === Tt.mapValue) return 1;
			if (t$1 === Tt.mapValue) return -1;
			const n$1 = e$1.fields || {}, r$1 = Object.keys(n$1), i = t$1.fields || {}, s = Object.keys(i);
			r$1.sort(), s.sort();
			for (let e$2 = 0; e$2 < r$1.length && e$2 < s.length; ++e$2) {
				const t$2 = __PRIVATE_compareUtf8Strings(r$1[e$2], s[e$2]);
				if (0 !== t$2) return t$2;
				const o = __PRIVATE_valueCompare(n$1[r$1[e$2]], i[s[e$2]]);
				if (0 !== o) return o;
			}
			return __PRIVATE_primitiveComparator(r$1.length, s.length);
		}(e.mapValue, t.mapValue);
		default: throw fail(23264, { he: n });
	}
}
function __PRIVATE_compareTimestamps(e, t) {
	if ("string" == typeof e && "string" == typeof t && e.length === t.length) return __PRIVATE_primitiveComparator(e, t);
	const n = __PRIVATE_normalizeTimestamp(e), r = __PRIVATE_normalizeTimestamp(t), i = __PRIVATE_primitiveComparator(n.seconds, r.seconds);
	return 0 !== i ? i : __PRIVATE_primitiveComparator(n.nanos, r.nanos);
}
function __PRIVATE_compareArrays(e, t) {
	const n = e.values || [], r = t.values || [];
	for (let e$1 = 0; e$1 < n.length && e$1 < r.length; ++e$1) {
		const t$1 = __PRIVATE_valueCompare(n[e$1], r[e$1]);
		if (t$1) return t$1;
	}
	return __PRIVATE_primitiveComparator(n.length, r.length);
}
function canonicalId(e) {
	return __PRIVATE_canonifyValue(e);
}
function __PRIVATE_canonifyValue(e) {
	return "nullValue" in e ? "null" : "booleanValue" in e ? "" + e.booleanValue : "integerValue" in e ? "" + e.integerValue : "doubleValue" in e ? "" + e.doubleValue : "timestampValue" in e ? function __PRIVATE_canonifyTimestamp(e$1) {
		const t = __PRIVATE_normalizeTimestamp(e$1);
		return `time(${t.seconds},${t.nanos})`;
	}(e.timestampValue) : "stringValue" in e ? e.stringValue : "bytesValue" in e ? function __PRIVATE_canonifyByteString(e$1) {
		return __PRIVATE_normalizeByteString(e$1).toBase64();
	}(e.bytesValue) : "referenceValue" in e ? function __PRIVATE_canonifyReference(e$1) {
		return DocumentKey.fromName(e$1).toString();
	}(e.referenceValue) : "geoPointValue" in e ? function __PRIVATE_canonifyGeoPoint(e$1) {
		return `geo(${e$1.latitude},${e$1.longitude})`;
	}(e.geoPointValue) : "arrayValue" in e ? function __PRIVATE_canonifyArray(e$1) {
		let t = "[", n = !0;
		for (const r of e$1.values || []) n ? n = !1 : t += ",", t += __PRIVATE_canonifyValue(r);
		return t + "]";
	}(e.arrayValue) : "mapValue" in e ? function __PRIVATE_canonifyMap(e$1) {
		const t = Object.keys(e$1.fields || {}).sort();
		let n = "{", r = !0;
		for (const i of t) r ? r = !1 : n += ",", n += `${i}:${__PRIVATE_canonifyValue(e$1.fields[i])}`;
		return n + "}";
	}(e.mapValue) : fail(61005, { value: e });
}
function __PRIVATE_estimateByteSize(e) {
	switch (__PRIVATE_typeOrder(e)) {
		case 0:
		case 1: return 4;
		case 2: return 8;
		case 3:
		case 8: return 16;
		case 4:
			const t = __PRIVATE_getPreviousValue(e);
			return t ? 16 + __PRIVATE_estimateByteSize(t) : 16;
		case 5: return 2 * e.stringValue.length;
		case 6: return __PRIVATE_normalizeByteString(e.bytesValue).approximateByteSize();
		case 7: return e.referenceValue.length;
		case 9: return function __PRIVATE_estimateArrayByteSize(e$1) {
			return (e$1.values || []).reduce(((e$2, t$1) => e$2 + __PRIVATE_estimateByteSize(t$1)), 0);
		}(e.arrayValue);
		case 10:
		case 11: return function __PRIVATE_estimateMapByteSize(e$1) {
			let t$1 = 0;
			return forEach(e$1.fields, ((e$2, n) => {
				t$1 += e$2.length + __PRIVATE_estimateByteSize(n);
			})), t$1;
		}(e.mapValue);
		default: throw fail(13486, { value: e });
	}
}
function __PRIVATE_refValue(e, t) {
	return { referenceValue: `projects/${e.projectId}/databases/${e.database}/documents/${t.path.canonicalString()}` };
}
/** Returns true if `value` is an IntegerValue . */ function isInteger(e) {
	return !!e && "integerValue" in e;
}
/** Returns true if `value` is a DoubleValue. */
/** Returns true if `value` is an ArrayValue. */
function isArray(e) {
	return !!e && "arrayValue" in e;
}
/** Returns true if `value` is a NullValue. */ function __PRIVATE_isNullValue(e) {
	return !!e && "nullValue" in e;
}
/** Returns true if `value` is NaN. */ function __PRIVATE_isNanValue(e) {
	return !!e && "doubleValue" in e && isNaN(Number(e.doubleValue));
}
/** Returns true if `value` is a MapValue. */ function __PRIVATE_isMapValue(e) {
	return !!e && "mapValue" in e;
}
/** Returns true if `value` is a VetorValue. */ function __PRIVATE_isVectorValue(e) {
	return (e?.mapValue?.fields || {})[ht]?.stringValue === It;
}
/** Creates a deep copy of `source`. */ function __PRIVATE_deepClone(e) {
	if (e.geoPointValue) return { geoPointValue: { ...e.geoPointValue } };
	if (e.timestampValue && "object" == typeof e.timestampValue) return { timestampValue: { ...e.timestampValue } };
	if (e.mapValue) {
		const t = { mapValue: { fields: {} } };
		return forEach(e.mapValue.fields, ((e$1, n) => t.mapValue.fields[e$1] = __PRIVATE_deepClone(n))), t;
	}
	if (e.arrayValue) {
		const t = { arrayValue: { values: [] } };
		for (let n = 0; n < (e.arrayValue.values || []).length; ++n) t.arrayValue.values[n] = __PRIVATE_deepClone(e.arrayValue.values[n]);
		return t;
	}
	return { ...e };
}
/** Returns true if the Value represents the canonical {@link #MAX_VALUE} . */ function __PRIVATE_isMaxValue(e) {
	return (((e.mapValue || {}).fields || {}).__type__ || {}).stringValue === Pt;
}
var At = { mapValue: { fields: {
	[ht]: { stringValue: It },
	[Et]: { arrayValue: {} }
} } };
/** Returns the lowest value for the given value type (inclusive). */ function __PRIVATE_valuesGetLowerBound(e) {
	return "nullValue" in e ? dt : "booleanValue" in e ? { booleanValue: !1 } : "integerValue" in e || "doubleValue" in e ? { doubleValue: NaN } : "timestampValue" in e ? { timestampValue: { seconds: Number.MIN_SAFE_INTEGER } } : "stringValue" in e ? { stringValue: "" } : "bytesValue" in e ? { bytesValue: "" } : "referenceValue" in e ? __PRIVATE_refValue(DatabaseId.empty(), DocumentKey.empty()) : "geoPointValue" in e ? { geoPointValue: {
		latitude: -90,
		longitude: -180
	} } : "arrayValue" in e ? { arrayValue: {} } : "mapValue" in e ? __PRIVATE_isVectorValue(e) ? At : { mapValue: {} } : fail(35942, { value: e });
}
/** Returns the largest value for the given value type (exclusive). */ function __PRIVATE_valuesGetUpperBound(e) {
	return "nullValue" in e ? { booleanValue: !1 } : "booleanValue" in e ? { doubleValue: NaN } : "integerValue" in e || "doubleValue" in e ? { timestampValue: { seconds: Number.MIN_SAFE_INTEGER } } : "timestampValue" in e ? { stringValue: "" } : "stringValue" in e ? { bytesValue: "" } : "bytesValue" in e ? __PRIVATE_refValue(DatabaseId.empty(), DocumentKey.empty()) : "referenceValue" in e ? { geoPointValue: {
		latitude: -90,
		longitude: -180
	} } : "geoPointValue" in e ? { arrayValue: {} } : "arrayValue" in e ? At : "mapValue" in e ? __PRIVATE_isVectorValue(e) ? { mapValue: {} } : Tt : fail(61959, { value: e });
}
function __PRIVATE_lowerBoundCompare(e, t) {
	const n = __PRIVATE_valueCompare(e.value, t.value);
	return 0 !== n ? n : e.inclusive && !t.inclusive ? -1 : !e.inclusive && t.inclusive ? 1 : 0;
}
function __PRIVATE_upperBoundCompare(e, t) {
	const n = __PRIVATE_valueCompare(e.value, t.value);
	return 0 !== n ? n : e.inclusive && !t.inclusive ? 1 : !e.inclusive && t.inclusive ? -1 : 0;
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* An ObjectValue represents a MapValue in the Firestore Proto and offers the
* ability to add and remove fields (via the ObjectValueBuilder).
*/ var ObjectValue = class ObjectValue {
	constructor(e) {
		this.value = e;
	}
	static empty() {
		return new ObjectValue({ mapValue: {} });
	}
	/**
	* Returns the value at the given path or null.
	*
	* @param path - the path to search
	* @returns The value at the path or null if the path is not set.
	*/ field(e) {
		if (e.isEmpty()) return this.value;
		{
			let t = this.value;
			for (let n = 0; n < e.length - 1; ++n) if (t = (t.mapValue.fields || {})[e.get(n)], !__PRIVATE_isMapValue(t)) return null;
			return t = (t.mapValue.fields || {})[e.lastSegment()], t || null;
		}
	}
	/**
	* Sets the field to the provided value.
	*
	* @param path - The field path to set.
	* @param value - The value to set.
	*/ set(e, t) {
		this.getFieldsMap(e.popLast())[e.lastSegment()] = __PRIVATE_deepClone(t);
	}
	/**
	* Sets the provided fields to the provided values.
	*
	* @param data - A map of fields to values (or null for deletes).
	*/ setAll(e) {
		let t = FieldPath$1.emptyPath(), n = {}, r = [];
		e.forEach(((e$1, i$1) => {
			if (!t.isImmediateParentOf(i$1)) {
				const e$2 = this.getFieldsMap(t);
				this.applyChanges(e$2, n, r), n = {}, r = [], t = i$1.popLast();
			}
			e$1 ? n[i$1.lastSegment()] = __PRIVATE_deepClone(e$1) : r.push(i$1.lastSegment());
		}));
		const i = this.getFieldsMap(t);
		this.applyChanges(i, n, r);
	}
	/**
	* Removes the field at the specified path. If there is no field at the
	* specified path, nothing is changed.
	*
	* @param path - The field path to remove.
	*/ delete(e) {
		const t = this.field(e.popLast());
		__PRIVATE_isMapValue(t) && t.mapValue.fields && delete t.mapValue.fields[e.lastSegment()];
	}
	isEqual(e) {
		return __PRIVATE_valueEquals(this.value, e.value);
	}
	/**
	* Returns the map that contains the leaf element of `path`. If the parent
	* entry does not yet exist, or if it is not a map, a new map will be created.
	*/ getFieldsMap(e) {
		let t = this.value;
		t.mapValue.fields || (t.mapValue = { fields: {} });
		for (let n = 0; n < e.length; ++n) {
			let r = t.mapValue.fields[e.get(n)];
			__PRIVATE_isMapValue(r) && r.mapValue.fields || (r = { mapValue: { fields: {} } }, t.mapValue.fields[e.get(n)] = r), t = r;
		}
		return t.mapValue.fields;
	}
	/**
	* Modifies `fieldsMap` by adding, replacing or deleting the specified
	* entries.
	*/ applyChanges(e, t, n) {
		forEach(t, ((t$1, n$1) => e[t$1] = n$1));
		for (const t$1 of n) delete e[t$1];
	}
	clone() {
		return new ObjectValue(__PRIVATE_deepClone(this.value));
	}
};
/**
* Returns a FieldMask built from all fields in a MapValue.
*/ function __PRIVATE_extractFieldMask(e) {
	const t = [];
	return forEach(e.fields, ((e$1, n) => {
		const r = new FieldPath$1([e$1]);
		if (__PRIVATE_isMapValue(n)) {
			const e$2 = __PRIVATE_extractFieldMask(n.mapValue).fields;
			if (0 === e$2.length) t.push(r);
			else for (const n$1 of e$2) t.push(r.child(n$1));
		} else t.push(r);
	})), new FieldMask(t);
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Represents a document in Firestore with a key, version, data and whether it
* has local mutations applied to it.
*
* Documents can transition between states via `convertToFoundDocument()`,
* `convertToNoDocument()` and `convertToUnknownDocument()`. If a document does
* not transition to one of these states even after all mutations have been
* applied, `isValidDocument()` returns false and the document should be removed
* from all views.
*/ var MutableDocument = class MutableDocument {
	constructor(e, t, n, r, i, s, o) {
		this.key = e, this.documentType = t, this.version = n, this.readTime = r, this.createTime = i, this.data = s, this.documentState = o;
	}
	/**
	* Creates a document with no known version or data, but which can serve as
	* base document for mutations.
	*/ static newInvalidDocument(e) {
		return new MutableDocument(e, 0, SnapshotVersion.min(), SnapshotVersion.min(), SnapshotVersion.min(), ObjectValue.empty(), 0);
	}
	/**
	* Creates a new document that is known to exist with the given data at the
	* given version.
	*/ static newFoundDocument(e, t, n, r) {
		return new MutableDocument(e, 1, t, SnapshotVersion.min(), n, r, 0);
	}
	/** Creates a new document that is known to not exist at the given version. */ static newNoDocument(e, t) {
		return new MutableDocument(e, 2, t, SnapshotVersion.min(), SnapshotVersion.min(), ObjectValue.empty(), 0);
	}
	/**
	* Creates a new document that is known to exist at the given version but
	* whose data is not known (e.g. a document that was updated without a known
	* base document).
	*/ static newUnknownDocument(e, t) {
		return new MutableDocument(e, 3, t, SnapshotVersion.min(), SnapshotVersion.min(), ObjectValue.empty(), 2);
	}
	/**
	* Changes the document type to indicate that it exists and that its version
	* and data are known.
	*/ convertToFoundDocument(e, t) {
		return !this.createTime.isEqual(SnapshotVersion.min()) || 2 !== this.documentType && 0 !== this.documentType || (this.createTime = e), this.version = e, this.documentType = 1, this.data = t, this.documentState = 0, this;
	}
	/**
	* Changes the document type to indicate that it doesn't exist at the given
	* version.
	*/ convertToNoDocument(e) {
		return this.version = e, this.documentType = 2, this.data = ObjectValue.empty(), this.documentState = 0, this;
	}
	/**
	* Changes the document type to indicate that it exists at a given version but
	* that its data is not known (e.g. a document that was updated without a known
	* base document).
	*/ convertToUnknownDocument(e) {
		return this.version = e, this.documentType = 3, this.data = ObjectValue.empty(), this.documentState = 2, this;
	}
	setHasCommittedMutations() {
		return this.documentState = 2, this;
	}
	setHasLocalMutations() {
		return this.documentState = 1, this.version = SnapshotVersion.min(), this;
	}
	setReadTime(e) {
		return this.readTime = e, this;
	}
	get hasLocalMutations() {
		return 1 === this.documentState;
	}
	get hasCommittedMutations() {
		return 2 === this.documentState;
	}
	get hasPendingWrites() {
		return this.hasLocalMutations || this.hasCommittedMutations;
	}
	isValidDocument() {
		return 0 !== this.documentType;
	}
	isFoundDocument() {
		return 1 === this.documentType;
	}
	isNoDocument() {
		return 2 === this.documentType;
	}
	isUnknownDocument() {
		return 3 === this.documentType;
	}
	isEqual(e) {
		return e instanceof MutableDocument && this.key.isEqual(e.key) && this.version.isEqual(e.version) && this.documentType === e.documentType && this.documentState === e.documentState && this.data.isEqual(e.data);
	}
	mutableCopy() {
		return new MutableDocument(this.key, this.documentType, this.version, this.readTime, this.createTime, this.data.clone(), this.documentState);
	}
	toString() {
		return `Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {createTime: ${this.createTime}}), {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`;
	}
};
/**
* Compares the value for field `field` in the provided documents. Throws if
* the field does not exist in both documents.
*/
/**
* @license
* Copyright 2022 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Represents a bound of a query.
*
* The bound is specified with the given components representing a position and
* whether it's just before or just after the position (relative to whatever the
* query order is).
*
* The position represents a logical index position for a query. It's a prefix
* of values for the (potentially implicit) order by clauses of a query.
*
* Bound provides a function to determine whether a document comes before or
* after a bound. This is influenced by whether the position is just before or
* just after the provided values.
*/
var Bound = class {
	constructor(e, t) {
		this.position = e, this.inclusive = t;
	}
};
function __PRIVATE_boundCompareToDocument(e, t, n) {
	let r = 0;
	for (let i = 0; i < e.position.length; i++) {
		const s = t[i], o = e.position[i];
		if (s.field.isKeyField()) r = DocumentKey.comparator(DocumentKey.fromName(o.referenceValue), n.key);
		else r = __PRIVATE_valueCompare(o, n.data.field(s.field));
		if ("desc" === s.dir && (r *= -1), 0 !== r) break;
	}
	return r;
}
/**
* Returns true if a document sorts after a bound using the provided sort
* order.
*/ function __PRIVATE_boundEquals(e, t) {
	if (null === e) return null === t;
	if (null === t) return !1;
	if (e.inclusive !== t.inclusive || e.position.length !== t.position.length) return !1;
	for (let n = 0; n < e.position.length; n++) if (!__PRIVATE_valueEquals(e.position[n], t.position[n])) return !1;
	return !0;
}
/**
* @license
* Copyright 2022 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* An ordering on a field, in some Direction. Direction defaults to ASCENDING.
*/ var OrderBy = class {
	constructor(e, t = "asc") {
		this.field = e, this.dir = t;
	}
};
function __PRIVATE_orderByEquals(e, t) {
	return e.dir === t.dir && e.field.isEqual(t.field);
}
/**
* @license
* Copyright 2022 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ var Filter = class {};
var FieldFilter = class FieldFilter extends Filter {
	constructor(e, t, n) {
		super(), this.field = e, this.op = t, this.value = n;
	}
	/**
	* Creates a filter based on the provided arguments.
	*/ static create(e, t, n) {
		return e.isKeyField() ? "in" === t || "not-in" === t ? this.createKeyFieldInFilter(e, t, n) : new __PRIVATE_KeyFieldFilter(e, t, n) : "array-contains" === t ? new __PRIVATE_ArrayContainsFilter(e, n) : "in" === t ? new __PRIVATE_InFilter(e, n) : "not-in" === t ? new __PRIVATE_NotInFilter(e, n) : "array-contains-any" === t ? new __PRIVATE_ArrayContainsAnyFilter(e, n) : new FieldFilter(e, t, n);
	}
	static createKeyFieldInFilter(e, t, n) {
		return "in" === t ? new __PRIVATE_KeyFieldInFilter(e, n) : new __PRIVATE_KeyFieldNotInFilter(e, n);
	}
	matches(e) {
		const t = e.data.field(this.field);
		return "!=" === this.op ? null !== t && void 0 === t.nullValue && this.matchesComparison(__PRIVATE_valueCompare(t, this.value)) : null !== t && __PRIVATE_typeOrder(this.value) === __PRIVATE_typeOrder(t) && this.matchesComparison(__PRIVATE_valueCompare(t, this.value));
	}
	matchesComparison(e) {
		switch (this.op) {
			case "<": return e < 0;
			case "<=": return e <= 0;
			case "==": return 0 === e;
			case "!=": return 0 !== e;
			case ">": return e > 0;
			case ">=": return e >= 0;
			default: return fail(47266, { operator: this.op });
		}
	}
	isInequality() {
		return [
			"<",
			"<=",
			">",
			">=",
			"!=",
			"not-in"
		].indexOf(this.op) >= 0;
	}
	getFlattenedFilters() {
		return [this];
	}
	getFilters() {
		return [this];
	}
};
var CompositeFilter = class CompositeFilter extends Filter {
	constructor(e, t) {
		super(), this.filters = e, this.op = t, this.Pe = null;
	}
	/**
	* Creates a filter based on the provided arguments.
	*/ static create(e, t) {
		return new CompositeFilter(e, t);
	}
	matches(e) {
		return __PRIVATE_compositeFilterIsConjunction(this) ? void 0 === this.filters.find(((t) => !t.matches(e))) : void 0 !== this.filters.find(((t) => t.matches(e)));
	}
	getFlattenedFilters() {
		return null !== this.Pe || (this.Pe = this.filters.reduce(((e, t) => e.concat(t.getFlattenedFilters())), [])), this.Pe;
	}
	getFilters() {
		return Object.assign([], this.filters);
	}
};
function __PRIVATE_compositeFilterIsConjunction(e) {
	return "and" === e.op;
}
function __PRIVATE_compositeFilterIsDisjunction(e) {
	return "or" === e.op;
}
/**
* Returns true if this filter is a conjunction of field filters only. Returns false otherwise.
*/ function __PRIVATE_compositeFilterIsFlatConjunction(e) {
	return __PRIVATE_compositeFilterIsFlat(e) && __PRIVATE_compositeFilterIsConjunction(e);
}
/**
* Returns true if this filter does not contain any composite filters. Returns false otherwise.
*/ function __PRIVATE_compositeFilterIsFlat(e) {
	for (const t of e.filters) if (t instanceof CompositeFilter) return !1;
	return !0;
}
function __PRIVATE_canonifyFilter(e) {
	if (e instanceof FieldFilter) return e.field.canonicalString() + e.op.toString() + canonicalId(e.value);
	if (__PRIVATE_compositeFilterIsFlatConjunction(e)) return e.filters.map(((e$1) => __PRIVATE_canonifyFilter(e$1))).join(",");
	{
		const t = e.filters.map(((e$1) => __PRIVATE_canonifyFilter(e$1))).join(",");
		return `${e.op}(${t})`;
	}
}
function __PRIVATE_filterEquals(e, t) {
	return e instanceof FieldFilter ? function __PRIVATE_fieldFilterEquals(e$1, t$1) {
		return t$1 instanceof FieldFilter && e$1.op === t$1.op && e$1.field.isEqual(t$1.field) && __PRIVATE_valueEquals(e$1.value, t$1.value);
	}(e, t) : e instanceof CompositeFilter ? function __PRIVATE_compositeFilterEquals(e$1, t$1) {
		if (t$1 instanceof CompositeFilter && e$1.op === t$1.op && e$1.filters.length === t$1.filters.length) return e$1.filters.reduce(((e$2, n, r) => e$2 && __PRIVATE_filterEquals(n, t$1.filters[r])), !0);
		return !1;
	}(e, t) : void fail(19439);
}
function __PRIVATE_compositeFilterWithAddedFilters(e, t) {
	const n = e.filters.concat(t);
	return CompositeFilter.create(n, e.op);
}
/** Returns a debug description for `filter`. */ function __PRIVATE_stringifyFilter(e) {
	return e instanceof FieldFilter ? function __PRIVATE_stringifyFieldFilter(e$1) {
		return `${e$1.field.canonicalString()} ${e$1.op} ${canonicalId(e$1.value)}`;
	}(e) : e instanceof CompositeFilter ? function __PRIVATE_stringifyCompositeFilter(e$1) {
		return e$1.op.toString() + " {" + e$1.getFilters().map(__PRIVATE_stringifyFilter).join(" ,") + "}";
	}(e) : "Filter";
}
var __PRIVATE_KeyFieldFilter = class extends FieldFilter {
	constructor(e, t, n) {
		super(e, t, n), this.key = DocumentKey.fromName(n.referenceValue);
	}
	matches(e) {
		const t = DocumentKey.comparator(e.key, this.key);
		return this.matchesComparison(t);
	}
};
/** Filter that matches on key fields within an array. */ var __PRIVATE_KeyFieldInFilter = class extends FieldFilter {
	constructor(e, t) {
		super(e, "in", t), this.keys = __PRIVATE_extractDocumentKeysFromArrayValue("in", t);
	}
	matches(e) {
		return this.keys.some(((t) => t.isEqual(e.key)));
	}
};
/** Filter that matches on key fields not present within an array. */ var __PRIVATE_KeyFieldNotInFilter = class extends FieldFilter {
	constructor(e, t) {
		super(e, "not-in", t), this.keys = __PRIVATE_extractDocumentKeysFromArrayValue("not-in", t);
	}
	matches(e) {
		return !this.keys.some(((t) => t.isEqual(e.key)));
	}
};
function __PRIVATE_extractDocumentKeysFromArrayValue(e, t) {
	return (t.arrayValue?.values || []).map(((e$1) => DocumentKey.fromName(e$1.referenceValue)));
}
/** A Filter that implements the array-contains operator. */ var __PRIVATE_ArrayContainsFilter = class extends FieldFilter {
	constructor(e, t) {
		super(e, "array-contains", t);
	}
	matches(e) {
		const t = e.data.field(this.field);
		return isArray(t) && __PRIVATE_arrayValueContains(t.arrayValue, this.value);
	}
};
/** A Filter that implements the IN operator. */ var __PRIVATE_InFilter = class extends FieldFilter {
	constructor(e, t) {
		super(e, "in", t);
	}
	matches(e) {
		const t = e.data.field(this.field);
		return null !== t && __PRIVATE_arrayValueContains(this.value.arrayValue, t);
	}
};
/** A Filter that implements the not-in operator. */ var __PRIVATE_NotInFilter = class extends FieldFilter {
	constructor(e, t) {
		super(e, "not-in", t);
	}
	matches(e) {
		if (__PRIVATE_arrayValueContains(this.value.arrayValue, { nullValue: "NULL_VALUE" })) return !1;
		const t = e.data.field(this.field);
		return null !== t && void 0 === t.nullValue && !__PRIVATE_arrayValueContains(this.value.arrayValue, t);
	}
};
/** A Filter that implements the array-contains-any operator. */ var __PRIVATE_ArrayContainsAnyFilter = class extends FieldFilter {
	constructor(e, t) {
		super(e, "array-contains-any", t);
	}
	matches(e) {
		const t = e.data.field(this.field);
		return !(!isArray(t) || !t.arrayValue.values) && t.arrayValue.values.some(((e$1) => __PRIVATE_arrayValueContains(this.value.arrayValue, e$1)));
	}
};
/**
* @license
* Copyright 2019 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var __PRIVATE_TargetImpl = class {
	constructor(e, t = null, n = [], r = [], i = null, s = null, o = null) {
		this.path = e, this.collectionGroup = t, this.orderBy = n, this.filters = r, this.limit = i, this.startAt = s, this.endAt = o, this.Te = null;
	}
};
/**
* Initializes a Target with a path and optional additional query constraints.
* Path must currently be empty if this is a collection group query.
*
* NOTE: you should always construct `Target` from `Query.toTarget` instead of
* using this factory method, because `Query` provides an implicit `orderBy`
* property.
*/ function __PRIVATE_newTarget(e, t = null, n = [], r = [], i = null, s = null, o = null) {
	return new __PRIVATE_TargetImpl(e, t, n, r, i, s, o);
}
function __PRIVATE_canonifyTarget(e) {
	const t = __PRIVATE_debugCast(e);
	if (null === t.Te) {
		let e$1 = t.path.canonicalString();
		null !== t.collectionGroup && (e$1 += "|cg:" + t.collectionGroup), e$1 += "|f:", e$1 += t.filters.map(((e$2) => __PRIVATE_canonifyFilter(e$2))).join(","), e$1 += "|ob:", e$1 += t.orderBy.map(((e$2) => function __PRIVATE_canonifyOrderBy(e$3) {
			return e$3.field.canonicalString() + e$3.dir;
		}(e$2))).join(","), __PRIVATE_isNullOrUndefined(t.limit) || (e$1 += "|l:", e$1 += t.limit), t.startAt && (e$1 += "|lb:", e$1 += t.startAt.inclusive ? "b:" : "a:", e$1 += t.startAt.position.map(((e$2) => canonicalId(e$2))).join(",")), t.endAt && (e$1 += "|ub:", e$1 += t.endAt.inclusive ? "a:" : "b:", e$1 += t.endAt.position.map(((e$2) => canonicalId(e$2))).join(",")), t.Te = e$1;
	}
	return t.Te;
}
function __PRIVATE_targetEquals(e, t) {
	if (e.limit !== t.limit) return !1;
	if (e.orderBy.length !== t.orderBy.length) return !1;
	for (let n = 0; n < e.orderBy.length; n++) if (!__PRIVATE_orderByEquals(e.orderBy[n], t.orderBy[n])) return !1;
	if (e.filters.length !== t.filters.length) return !1;
	for (let n = 0; n < e.filters.length; n++) if (!__PRIVATE_filterEquals(e.filters[n], t.filters[n])) return !1;
	return e.collectionGroup === t.collectionGroup && !!e.path.isEqual(t.path) && !!__PRIVATE_boundEquals(e.startAt, t.startAt) && __PRIVATE_boundEquals(e.endAt, t.endAt);
}
function __PRIVATE_targetIsDocumentTarget(e) {
	return DocumentKey.isDocumentKey(e.path) && null === e.collectionGroup && 0 === e.filters.length;
}
/** Returns the field filters that target the given field path. */ function __PRIVATE_targetGetFieldFiltersForPath(e, t) {
	return e.filters.filter(((e$1) => e$1 instanceof FieldFilter && e$1.field.isEqual(t)));
}
/**
* Returns the values that are used in ARRAY_CONTAINS or ARRAY_CONTAINS_ANY
* filters. Returns `null` if there are no such filters.
*/
/**
* Returns the value to use as the lower bound for ascending index segment at
* the provided `fieldPath` (or the upper bound for an descending segment).
*/
function __PRIVATE_targetGetAscendingBound(e, t, n) {
	let r = dt, i = !0;
	for (const n$1 of __PRIVATE_targetGetFieldFiltersForPath(e, t)) {
		let e$1 = dt, t$1 = !0;
		switch (n$1.op) {
			case "<":
			case "<=":
				e$1 = __PRIVATE_valuesGetLowerBound(n$1.value);
				break;
			case "==":
			case "in":
			case ">=":
				e$1 = n$1.value;
				break;
			case ">":
				e$1 = n$1.value, t$1 = !1;
				break;
			case "!=":
			case "not-in": e$1 = dt;
		}
		__PRIVATE_lowerBoundCompare({
			value: r,
			inclusive: i
		}, {
			value: e$1,
			inclusive: t$1
		}) < 0 && (r = e$1, i = t$1);
	}
	if (null !== n) {
		for (let s = 0; s < e.orderBy.length; ++s) if (e.orderBy[s].field.isEqual(t)) {
			const e$1 = n.position[s];
			__PRIVATE_lowerBoundCompare({
				value: r,
				inclusive: i
			}, {
				value: e$1,
				inclusive: n.inclusive
			}) < 0 && (r = e$1, i = n.inclusive);
			break;
		}
	}
	return {
		value: r,
		inclusive: i
	};
}
/**
* Returns the value to use as the upper bound for ascending index segment at
* the provided `fieldPath` (or the lower bound for a descending segment).
*/ function __PRIVATE_targetGetDescendingBound(e, t, n) {
	let r = Tt, i = !0;
	for (const n$1 of __PRIVATE_targetGetFieldFiltersForPath(e, t)) {
		let e$1 = Tt, t$1 = !0;
		switch (n$1.op) {
			case ">=":
			case ">":
				e$1 = __PRIVATE_valuesGetUpperBound(n$1.value), t$1 = !1;
				break;
			case "==":
			case "in":
			case "<=":
				e$1 = n$1.value;
				break;
			case "<":
				e$1 = n$1.value, t$1 = !1;
				break;
			case "!=":
			case "not-in": e$1 = Tt;
		}
		__PRIVATE_upperBoundCompare({
			value: r,
			inclusive: i
		}, {
			value: e$1,
			inclusive: t$1
		}) > 0 && (r = e$1, i = t$1);
	}
	if (null !== n) {
		for (let s = 0; s < e.orderBy.length; ++s) if (e.orderBy[s].field.isEqual(t)) {
			const e$1 = n.position[s];
			__PRIVATE_upperBoundCompare({
				value: r,
				inclusive: i
			}, {
				value: e$1,
				inclusive: n.inclusive
			}) > 0 && (r = e$1, i = n.inclusive);
			break;
		}
	}
	return {
		value: r,
		inclusive: i
	};
}
/** Returns the number of segments of a perfect index for this target. */
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Query encapsulates all the query attributes we support in the SDK. It can
* be run against the LocalStore, as well as be converted to a `Target` to
* query the RemoteStore results.
*
* Visible for testing.
*/
var __PRIVATE_QueryImpl = class {
	/**
	* Initializes a Query with a path and optional additional query constraints.
	* Path must currently be empty if this is a collection group query.
	*/
	constructor(e, t = null, n = [], r = [], i = null, s = "F", o = null, _ = null) {
		this.path = e, this.collectionGroup = t, this.explicitOrderBy = n, this.filters = r, this.limit = i, this.limitType = s, this.startAt = o, this.endAt = _, this.Ie = null, this.Ee = null, this.de = null, this.startAt, this.endAt;
	}
};
/** Creates a new Query instance with the options provided. */ function __PRIVATE_newQuery(e, t, n, r, i, s, o, _) {
	return new __PRIVATE_QueryImpl(e, t, n, r, i, s, o, _);
}
/** Creates a new Query for a query that matches all documents at `path` */ function __PRIVATE_newQueryForPath(e) {
	return new __PRIVATE_QueryImpl(e);
}
/**
* Helper to convert a collection group query into a collection query at a
* specific path. This is used when executing collection group queries, since
* we have to split the query into a set of collection queries at multiple
* paths.
*/
/**
* Returns true if this query does not specify any query constraints that
* could remove results.
*/
function __PRIVATE_queryMatchesAllDocuments(e) {
	return 0 === e.filters.length && null === e.limit && null == e.startAt && null == e.endAt && (0 === e.explicitOrderBy.length || 1 === e.explicitOrderBy.length && e.explicitOrderBy[0].field.isKeyField());
}
/**
* Returns whether the query matches a collection group rather than a specific
* collection.
*/
function __PRIVATE_isCollectionGroupQuery(e) {
	return null !== e.collectionGroup;
}
/**
* Returns the normalized order-by constraint that is used to execute the Query,
* which can be different from the order-by constraints the user provided (e.g.
* the SDK and backend always orders by `__name__`). The normalized order-by
* includes implicit order-bys in addition to the explicit user provided
* order-bys.
*/ function __PRIVATE_queryNormalizedOrderBy(e) {
	const t = __PRIVATE_debugCast(e);
	if (null === t.Ie) {
		t.Ie = [];
		const e$1 = /* @__PURE__ */ new Set();
		for (const n$1 of t.explicitOrderBy) t.Ie.push(n$1), e$1.add(n$1.field.canonicalString());
		const n = t.explicitOrderBy.length > 0 ? t.explicitOrderBy[t.explicitOrderBy.length - 1].dir : "asc";
		(function __PRIVATE_getInequalityFilterFields(e$2) {
			let t$1 = new SortedSet(FieldPath$1.comparator);
			return e$2.filters.forEach(((e$3) => {
				e$3.getFlattenedFilters().forEach(((e$4) => {
					e$4.isInequality() && (t$1 = t$1.add(e$4.field));
				}));
			})), t$1;
		})(t).forEach(((r) => {
			e$1.has(r.canonicalString()) || r.isKeyField() || t.Ie.push(new OrderBy(r, n));
		})), e$1.has(FieldPath$1.keyField().canonicalString()) || t.Ie.push(new OrderBy(FieldPath$1.keyField(), n));
	}
	return t.Ie;
}
/**
* Converts this `Query` instance to its corresponding `Target` representation.
*/ function __PRIVATE_queryToTarget(e) {
	const t = __PRIVATE_debugCast(e);
	return t.Ee || (t.Ee = __PRIVATE__queryToTarget(t, __PRIVATE_queryNormalizedOrderBy(e))), t.Ee;
}
/**
* Converts this `Query` instance to its corresponding `Target` representation,
* for use within an aggregate query. Unlike targets for non-aggregate queries,
* aggregate query targets do not contain normalized order-bys, they only
* contain explicit order-bys.
*/ function __PRIVATE_queryToAggregateTarget(e) {
	const t = __PRIVATE_debugCast(e);
	return t.de || (t.de = __PRIVATE__queryToTarget(t, e.explicitOrderBy)), t.de;
}
function __PRIVATE__queryToTarget(e, t) {
	if ("F" === e.limitType) return __PRIVATE_newTarget(e.path, e.collectionGroup, t, e.filters, e.limit, e.startAt, e.endAt);
	{
		t = t.map(((e$1) => {
			const t$1 = "desc" === e$1.dir ? "asc" : "desc";
			return new OrderBy(e$1.field, t$1);
		}));
		const n = e.endAt ? new Bound(e.endAt.position, e.endAt.inclusive) : null, r = e.startAt ? new Bound(e.startAt.position, e.startAt.inclusive) : null;
		return __PRIVATE_newTarget(e.path, e.collectionGroup, t, e.filters, e.limit, n, r);
	}
}
function __PRIVATE_queryWithAddedFilter(e, t) {
	const n = e.filters.concat([t]);
	return new __PRIVATE_QueryImpl(e.path, e.collectionGroup, e.explicitOrderBy.slice(), n, e.limit, e.limitType, e.startAt, e.endAt);
}
function __PRIVATE_queryWithLimit(e, t, n) {
	return new __PRIVATE_QueryImpl(e.path, e.collectionGroup, e.explicitOrderBy.slice(), e.filters.slice(), t, n, e.startAt, e.endAt);
}
function __PRIVATE_queryEquals(e, t) {
	return __PRIVATE_targetEquals(__PRIVATE_queryToTarget(e), __PRIVATE_queryToTarget(t)) && e.limitType === t.limitType;
}
function __PRIVATE_canonifyQuery(e) {
	return `${__PRIVATE_canonifyTarget(__PRIVATE_queryToTarget(e))}|lt:${e.limitType}`;
}
function __PRIVATE_stringifyQuery(e) {
	return `Query(target=${function __PRIVATE_stringifyTarget(e$1) {
		let t = e$1.path.canonicalString();
		return null !== e$1.collectionGroup && (t += " collectionGroup=" + e$1.collectionGroup), e$1.filters.length > 0 && (t += `, filters: [${e$1.filters.map(((e$2) => __PRIVATE_stringifyFilter(e$2))).join(", ")}]`), __PRIVATE_isNullOrUndefined(e$1.limit) || (t += ", limit: " + e$1.limit), e$1.orderBy.length > 0 && (t += `, orderBy: [${e$1.orderBy.map(((e$2) => function __PRIVATE_stringifyOrderBy(e$3) {
			return `${e$3.field.canonicalString()} (${e$3.dir})`;
		}(e$2))).join(", ")}]`), e$1.startAt && (t += ", startAt: ", t += e$1.startAt.inclusive ? "b:" : "a:", t += e$1.startAt.position.map(((e$2) => canonicalId(e$2))).join(",")), e$1.endAt && (t += ", endAt: ", t += e$1.endAt.inclusive ? "a:" : "b:", t += e$1.endAt.position.map(((e$2) => canonicalId(e$2))).join(",")), `Target(${t})`;
	}(__PRIVATE_queryToTarget(e))}; limitType=${e.limitType})`;
}
/** Returns whether `doc` matches the constraints of `query`. */ function __PRIVATE_queryMatches(e, t) {
	return t.isFoundDocument() && function __PRIVATE_queryMatchesPathAndCollectionGroup(e$1, t$1) {
		const n = t$1.key.path;
		return null !== e$1.collectionGroup ? t$1.key.hasCollectionId(e$1.collectionGroup) && e$1.path.isPrefixOf(n) : DocumentKey.isDocumentKey(e$1.path) ? e$1.path.isEqual(n) : e$1.path.isImmediateParentOf(n);
	}(e, t) && function __PRIVATE_queryMatchesOrderBy(e$1, t$1) {
		for (const n of __PRIVATE_queryNormalizedOrderBy(e$1)) if (!n.field.isKeyField() && null === t$1.data.field(n.field)) return !1;
		return !0;
	}(e, t) && function __PRIVATE_queryMatchesFilters(e$1, t$1) {
		for (const n of e$1.filters) if (!n.matches(t$1)) return !1;
		return !0;
	}(e, t) && function __PRIVATE_queryMatchesBounds(e$1, t$1) {
		if (e$1.startAt && !function __PRIVATE_boundSortsBeforeDocument(e$2, t$2, n) {
			const r = __PRIVATE_boundCompareToDocument(e$2, t$2, n);
			return e$2.inclusive ? r <= 0 : r < 0;
		}(e$1.startAt, __PRIVATE_queryNormalizedOrderBy(e$1), t$1)) return !1;
		if (e$1.endAt && !function __PRIVATE_boundSortsAfterDocument(e$2, t$2, n) {
			const r = __PRIVATE_boundCompareToDocument(e$2, t$2, n);
			return e$2.inclusive ? r >= 0 : r > 0;
		}(e$1.endAt, __PRIVATE_queryNormalizedOrderBy(e$1), t$1)) return !1;
		return !0;
	}(e, t);
}
function __PRIVATE_queryCollectionGroup(e) {
	return e.collectionGroup || (e.path.length % 2 == 1 ? e.path.lastSegment() : e.path.get(e.path.length - 2));
}
/**
* Returns a new comparator function that can be used to compare two documents
* based on the Query's ordering constraint.
*/ function __PRIVATE_newQueryComparator(e) {
	return (t, n) => {
		let r = !1;
		for (const i of __PRIVATE_queryNormalizedOrderBy(e)) {
			const e$1 = __PRIVATE_compareDocs(i, t, n);
			if (0 !== e$1) return e$1;
			r = r || i.field.isKeyField();
		}
		return 0;
	};
}
function __PRIVATE_compareDocs(e, t, n) {
	const r = e.field.isKeyField() ? DocumentKey.comparator(t.key, n.key) : function __PRIVATE_compareDocumentsByField(e$1, t$1, n$1) {
		const r$1 = t$1.data.field(e$1), i = n$1.data.field(e$1);
		return null !== r$1 && null !== i ? __PRIVATE_valueCompare(r$1, i) : fail(42886);
	}(e.field, t, n);
	switch (e.dir) {
		case "asc": return r;
		case "desc": return -1 * r;
		default: return fail(19790, { direction: e.dir });
	}
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* A map implementation that uses objects as keys. Objects must have an
* associated equals function and must be immutable. Entries in the map are
* stored together with the key being produced from the mapKeyFn. This map
* automatically handles collisions of keys.
*/ var ObjectMap = class {
	constructor(e, t) {
		this.mapKeyFn = e, this.equalsFn = t, this.inner = {}, this.innerSize = 0;
	}
	/** Get a value for this key, or undefined if it does not exist. */ get(e) {
		const t = this.mapKeyFn(e), n = this.inner[t];
		if (void 0 !== n) {
			for (const [t$1, r] of n) if (this.equalsFn(t$1, e)) return r;
		}
	}
	has(e) {
		return void 0 !== this.get(e);
	}
	/** Put this key and value in the map. */ set(e, t) {
		const n = this.mapKeyFn(e), r = this.inner[n];
		if (void 0 === r) return this.inner[n] = [[e, t]], void this.innerSize++;
		for (let n$1 = 0; n$1 < r.length; n$1++) if (this.equalsFn(r[n$1][0], e)) return void (r[n$1] = [e, t]);
		r.push([e, t]), this.innerSize++;
	}
	/**
	* Remove this key from the map. Returns a boolean if anything was deleted.
	*/ delete(e) {
		const t = this.mapKeyFn(e), n = this.inner[t];
		if (void 0 === n) return !1;
		for (let r = 0; r < n.length; r++) if (this.equalsFn(n[r][0], e)) return 1 === n.length ? delete this.inner[t] : n.splice(r, 1), this.innerSize--, !0;
		return !1;
	}
	forEach(e) {
		forEach(this.inner, ((t, n) => {
			for (const [t$1, r] of n) e(t$1, r);
		}));
	}
	isEmpty() {
		return isEmpty(this.inner);
	}
	size() {
		return this.innerSize;
	}
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ var Rt = new SortedMap(DocumentKey.comparator);
function __PRIVATE_mutableDocumentMap() {
	return Rt;
}
var Vt = new SortedMap(DocumentKey.comparator);
function documentMap(...e) {
	let t = Vt;
	for (const n of e) t = t.insert(n.key, n);
	return t;
}
function __PRIVATE_convertOverlayedDocumentMapToDocumentMap(e) {
	let t = Vt;
	return e.forEach(((e$1, n) => t = t.insert(e$1, n.overlayedDocument))), t;
}
function __PRIVATE_newOverlayMap() {
	return __PRIVATE_newDocumentKeyMap();
}
function __PRIVATE_newMutationMap() {
	return __PRIVATE_newDocumentKeyMap();
}
function __PRIVATE_newDocumentKeyMap() {
	return new ObjectMap(((e) => e.toString()), ((e, t) => e.isEqual(t)));
}
var mt = new SortedMap(DocumentKey.comparator);
var ft = new SortedSet(DocumentKey.comparator);
function __PRIVATE_documentKeySet(...e) {
	let t = ft;
	for (const n of e) t = t.add(n);
	return t;
}
var gt = new SortedSet(__PRIVATE_primitiveComparator);
function __PRIVATE_targetIdSet() {
	return gt;
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Returns an DoubleValue for `value` that is encoded based the serializer's
* `useProto3Json` setting.
*/ function __PRIVATE_toDouble(e, t) {
	if (e.useProto3Json) {
		if (isNaN(t)) return { doubleValue: "NaN" };
		if (t === Infinity) return { doubleValue: "Infinity" };
		if (t === -Infinity) return { doubleValue: "-Infinity" };
	}
	return { doubleValue: __PRIVATE_isNegativeZero(t) ? "-0" : t };
}
/**
* Returns an IntegerValue for `value`.
*/ function __PRIVATE_toInteger(e) {
	return { integerValue: "" + e };
}
/**
* Returns a value for a number that's appropriate to put into a proto.
* The return value is an IntegerValue if it can safely represent the value,
* otherwise a DoubleValue is returned.
*/ function toNumber(e, t) {
	return isSafeInteger(t) ? __PRIVATE_toInteger(t) : __PRIVATE_toDouble(e, t);
}
/**
* @license
* Copyright 2018 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/** Used to represent a field transform on a mutation. */ var TransformOperation = class {
	constructor() {
		this._ = void 0;
	}
};
/**
* Computes the local transform result against the provided `previousValue`,
* optionally using the provided localWriteTime.
*/ function __PRIVATE_applyTransformOperationToLocalView(e, t, n) {
	return e instanceof __PRIVATE_ServerTimestampTransform ? function serverTimestamp$1(e$1, t$1) {
		const n$1 = { fields: {
			[at]: { stringValue: _t },
			[ct]: { timestampValue: {
				seconds: e$1.seconds,
				nanos: e$1.nanoseconds
			} }
		} };
		return t$1 && __PRIVATE_isServerTimestamp(t$1) && (t$1 = __PRIVATE_getPreviousValue(t$1)), t$1 && (n$1.fields[ut] = t$1), { mapValue: n$1 };
	}(n, t) : e instanceof __PRIVATE_ArrayUnionTransformOperation ? __PRIVATE_applyArrayUnionTransformOperation(e, t) : e instanceof __PRIVATE_ArrayRemoveTransformOperation ? __PRIVATE_applyArrayRemoveTransformOperation(e, t) : function __PRIVATE_applyNumericIncrementTransformOperationToLocalView(e$1, t$1) {
		const n$1 = __PRIVATE_computeTransformOperationBaseValue(e$1, t$1), r = asNumber(n$1) + asNumber(e$1.Ae);
		return isInteger(n$1) && isInteger(e$1.Ae) ? __PRIVATE_toInteger(r) : __PRIVATE_toDouble(e$1.serializer, r);
	}(e, t);
}
/**
* Computes a final transform result after the transform has been acknowledged
* by the server, potentially using the server-provided transformResult.
*/ function __PRIVATE_applyTransformOperationToRemoteDocument(e, t, n) {
	return e instanceof __PRIVATE_ArrayUnionTransformOperation ? __PRIVATE_applyArrayUnionTransformOperation(e, t) : e instanceof __PRIVATE_ArrayRemoveTransformOperation ? __PRIVATE_applyArrayRemoveTransformOperation(e, t) : n;
}
/**
* If this transform operation is not idempotent, returns the base value to
* persist for this transform. If a base value is returned, the transform
* operation is always applied to this base value, even if document has
* already been updated.
*
* Base values provide consistent behavior for non-idempotent transforms and
* allow us to return the same latency-compensated value even if the backend
* has already applied the transform operation. The base value is null for
* idempotent transforms, as they can be re-played even if the backend has
* already applied them.
*
* @returns a base value to store along with the mutation, or null for
* idempotent transforms.
*/ function __PRIVATE_computeTransformOperationBaseValue(e, t) {
	return e instanceof __PRIVATE_NumericIncrementTransformOperation ? function __PRIVATE_isNumber(e$1) {
		return isInteger(e$1) || function __PRIVATE_isDouble(e$2) {
			return !!e$2 && "doubleValue" in e$2;
		}(e$1);
	}(t) ? t : { integerValue: 0 } : null;
}
/** Transforms a value into a server-generated timestamp. */
var __PRIVATE_ServerTimestampTransform = class extends TransformOperation {};
/** Transforms an array value via a union operation. */ var __PRIVATE_ArrayUnionTransformOperation = class extends TransformOperation {
	constructor(e) {
		super(), this.elements = e;
	}
};
function __PRIVATE_applyArrayUnionTransformOperation(e, t) {
	const n = __PRIVATE_coercedFieldValuesArray(t);
	for (const t$1 of e.elements) n.some(((e$1) => __PRIVATE_valueEquals(e$1, t$1))) || n.push(t$1);
	return { arrayValue: { values: n } };
}
/** Transforms an array value via a remove operation. */ var __PRIVATE_ArrayRemoveTransformOperation = class extends TransformOperation {
	constructor(e) {
		super(), this.elements = e;
	}
};
function __PRIVATE_applyArrayRemoveTransformOperation(e, t) {
	let n = __PRIVATE_coercedFieldValuesArray(t);
	for (const t$1 of e.elements) n = n.filter(((e$1) => !__PRIVATE_valueEquals(e$1, t$1)));
	return { arrayValue: { values: n } };
}
/**
* Implements the backend semantics for locally computed NUMERIC_ADD (increment)
* transforms. Converts all field values to integers or doubles, but unlike the
* backend does not cap integer values at 2^63. Instead, JavaScript number
* arithmetic is used and precision loss can occur for values greater than 2^53.
*/ var __PRIVATE_NumericIncrementTransformOperation = class extends TransformOperation {
	constructor(e, t) {
		super(), this.serializer = e, this.Ae = t;
	}
};
function asNumber(e) {
	return __PRIVATE_normalizeNumber(e.integerValue || e.doubleValue);
}
function __PRIVATE_coercedFieldValuesArray(e) {
	return isArray(e) && e.arrayValue.values ? e.arrayValue.values.slice() : [];
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/** A field path and the TransformOperation to perform upon it. */ var FieldTransform = class {
	constructor(e, t) {
		this.field = e, this.transform = t;
	}
};
function __PRIVATE_fieldTransformEquals(e, t) {
	return e.field.isEqual(t.field) && function __PRIVATE_transformOperationEquals(e$1, t$1) {
		return e$1 instanceof __PRIVATE_ArrayUnionTransformOperation && t$1 instanceof __PRIVATE_ArrayUnionTransformOperation || e$1 instanceof __PRIVATE_ArrayRemoveTransformOperation && t$1 instanceof __PRIVATE_ArrayRemoveTransformOperation ? __PRIVATE_arrayEquals(e$1.elements, t$1.elements, __PRIVATE_valueEquals) : e$1 instanceof __PRIVATE_NumericIncrementTransformOperation && t$1 instanceof __PRIVATE_NumericIncrementTransformOperation ? __PRIVATE_valueEquals(e$1.Ae, t$1.Ae) : e$1 instanceof __PRIVATE_ServerTimestampTransform && t$1 instanceof __PRIVATE_ServerTimestampTransform;
	}(e.transform, t.transform);
}
/** The result of successfully applying a mutation to the backend. */
var MutationResult = class {
	constructor(e, t) {
		this.version = e, this.transformResults = t;
	}
};
/**
* Encodes a precondition for a mutation. This follows the model that the
* backend accepts with the special case of an explicit "empty" precondition
* (meaning no precondition).
*/ var Precondition = class Precondition {
	constructor(e, t) {
		this.updateTime = e, this.exists = t;
	}
	/** Creates a new empty Precondition. */ static none() {
		return new Precondition();
	}
	/** Creates a new Precondition with an exists flag. */ static exists(e) {
		return new Precondition(void 0, e);
	}
	/** Creates a new Precondition based on a version a document exists at. */ static updateTime(e) {
		return new Precondition(e);
	}
	/** Returns whether this Precondition is empty. */ get isNone() {
		return void 0 === this.updateTime && void 0 === this.exists;
	}
	isEqual(e) {
		return this.exists === e.exists && (this.updateTime ? !!e.updateTime && this.updateTime.isEqual(e.updateTime) : !e.updateTime);
	}
};
/** Returns true if the preconditions is valid for the given document. */ function __PRIVATE_preconditionIsValidForDocument(e, t) {
	return void 0 !== e.updateTime ? t.isFoundDocument() && t.version.isEqual(e.updateTime) : void 0 === e.exists || e.exists === t.isFoundDocument();
}
/**
* A mutation describes a self-contained change to a document. Mutations can
* create, replace, delete, and update subsets of documents.
*
* Mutations not only act on the value of the document but also its version.
*
* For local mutations (mutations that haven't been committed yet), we preserve
* the existing version for Set and Patch mutations. For Delete mutations, we
* reset the version to 0.
*
* Here's the expected transition table.
*
* MUTATION           APPLIED TO            RESULTS IN
*
* SetMutation        Document(v3)          Document(v3)
* SetMutation        NoDocument(v3)        Document(v0)
* SetMutation        InvalidDocument(v0)   Document(v0)
* PatchMutation      Document(v3)          Document(v3)
* PatchMutation      NoDocument(v3)        NoDocument(v3)
* PatchMutation      InvalidDocument(v0)   UnknownDocument(v3)
* DeleteMutation     Document(v3)          NoDocument(v0)
* DeleteMutation     NoDocument(v3)        NoDocument(v0)
* DeleteMutation     InvalidDocument(v0)   NoDocument(v0)
*
* For acknowledged mutations, we use the updateTime of the WriteResponse as
* the resulting version for Set and Patch mutations. As deletes have no
* explicit update time, we use the commitTime of the WriteResponse for
* Delete mutations.
*
* If a mutation is acknowledged by the backend but fails the precondition check
* locally, we transition to an `UnknownDocument` and rely on Watch to send us
* the updated version.
*
* Field transforms are used only with Patch and Set Mutations. We use the
* `updateTransforms` message to store transforms, rather than the `transforms`s
* messages.
*
* ## Subclassing Notes
*
* Every type of mutation needs to implement its own applyToRemoteDocument() and
* applyToLocalView() to implement the actual behavior of applying the mutation
* to some source document (see `setMutationApplyToRemoteDocument()` for an
* example).
*/ var Mutation = class {};
/**
* A utility method to calculate a `Mutation` representing the overlay from the
* final state of the document, and a `FieldMask` representing the fields that
* are mutated by the local mutations.
*/ function __PRIVATE_calculateOverlayMutation(e, t) {
	if (!e.hasLocalMutations || t && 0 === t.fields.length) return null;
	if (null === t) return e.isNoDocument() ? new __PRIVATE_DeleteMutation(e.key, Precondition.none()) : new __PRIVATE_SetMutation(e.key, e.data, Precondition.none());
	{
		const n = e.data, r = ObjectValue.empty();
		let i = new SortedSet(FieldPath$1.comparator);
		for (let e$1 of t.fields) if (!i.has(e$1)) {
			let t$1 = n.field(e$1);
			null === t$1 && e$1.length > 1 && (e$1 = e$1.popLast(), t$1 = n.field(e$1)), null === t$1 ? r.delete(e$1) : r.set(e$1, t$1), i = i.add(e$1);
		}
		return new __PRIVATE_PatchMutation(e.key, r, new FieldMask(i.toArray()), Precondition.none());
	}
}
/**
* Applies this mutation to the given document for the purposes of computing a
* new remote document. If the input document doesn't match the expected state
* (e.g. it is invalid or outdated), the document type may transition to
* unknown.
*
* @param mutation - The mutation to apply.
* @param document - The document to mutate. The input document can be an
*     invalid document if the client has no knowledge of the pre-mutation state
*     of the document.
* @param mutationResult - The result of applying the mutation from the backend.
*/ function __PRIVATE_mutationApplyToRemoteDocument(e, t, n) {
	e instanceof __PRIVATE_SetMutation ? function __PRIVATE_setMutationApplyToRemoteDocument(e$1, t$1, n$1) {
		const r = e$1.value.clone(), i = __PRIVATE_serverTransformResults(e$1.fieldTransforms, t$1, n$1.transformResults);
		r.setAll(i), t$1.convertToFoundDocument(n$1.version, r).setHasCommittedMutations();
	}(e, t, n) : e instanceof __PRIVATE_PatchMutation ? function __PRIVATE_patchMutationApplyToRemoteDocument(e$1, t$1, n$1) {
		if (!__PRIVATE_preconditionIsValidForDocument(e$1.precondition, t$1)) return void t$1.convertToUnknownDocument(n$1.version);
		const r = __PRIVATE_serverTransformResults(e$1.fieldTransforms, t$1, n$1.transformResults), i = t$1.data;
		i.setAll(__PRIVATE_getPatch(e$1)), i.setAll(r), t$1.convertToFoundDocument(n$1.version, i).setHasCommittedMutations();
	}(e, t, n) : function __PRIVATE_deleteMutationApplyToRemoteDocument(e$1, t$1, n$1) {
		t$1.convertToNoDocument(n$1.version).setHasCommittedMutations();
	}(0, t, n);
}
/**
* Applies this mutation to the given document for the purposes of computing
* the new local view of a document. If the input document doesn't match the
* expected state, the document is not modified.
*
* @param mutation - The mutation to apply.
* @param document - The document to mutate. The input document can be an
*     invalid document if the client has no knowledge of the pre-mutation state
*     of the document.
* @param previousMask - The fields that have been updated before applying this mutation.
* @param localWriteTime - A timestamp indicating the local write time of the
*     batch this mutation is a part of.
* @returns A `FieldMask` representing the fields that are changed by applying this mutation.
*/ function __PRIVATE_mutationApplyToLocalView(e, t, n, r) {
	return e instanceof __PRIVATE_SetMutation ? function __PRIVATE_setMutationApplyToLocalView(e$1, t$1, n$1, r$1) {
		if (!__PRIVATE_preconditionIsValidForDocument(e$1.precondition, t$1)) return n$1;
		const i = e$1.value.clone(), s = __PRIVATE_localTransformResults(e$1.fieldTransforms, r$1, t$1);
		return i.setAll(s), t$1.convertToFoundDocument(t$1.version, i).setHasLocalMutations(), null;
	}(e, t, n, r) : e instanceof __PRIVATE_PatchMutation ? function __PRIVATE_patchMutationApplyToLocalView(e$1, t$1, n$1, r$1) {
		if (!__PRIVATE_preconditionIsValidForDocument(e$1.precondition, t$1)) return n$1;
		const i = __PRIVATE_localTransformResults(e$1.fieldTransforms, r$1, t$1), s = t$1.data;
		if (s.setAll(__PRIVATE_getPatch(e$1)), s.setAll(i), t$1.convertToFoundDocument(t$1.version, s).setHasLocalMutations(), null === n$1) return null;
		return n$1.unionWith(e$1.fieldMask.fields).unionWith(e$1.fieldTransforms.map(((e$2) => e$2.field)));
	}(e, t, n, r) : function __PRIVATE_deleteMutationApplyToLocalView(e$1, t$1, n$1) {
		if (__PRIVATE_preconditionIsValidForDocument(e$1.precondition, t$1)) return t$1.convertToNoDocument(t$1.version).setHasLocalMutations(), null;
		return n$1;
	}(e, t, n);
}
/**
* If this mutation is not idempotent, returns the base value to persist with
* this mutation. If a base value is returned, the mutation is always applied
* to this base value, even if document has already been updated.
*
* The base value is a sparse object that consists of only the document
* fields for which this mutation contains a non-idempotent transformation
* (e.g. a numeric increment). The provided value guarantees consistent
* behavior for non-idempotent transforms and allow us to return the same
* latency-compensated value even if the backend has already applied the
* mutation. The base value is null for idempotent mutations, as they can be
* re-played even if the backend has already applied them.
*
* @returns a base value to store along with the mutation, or null for
* idempotent mutations.
*/ function __PRIVATE_mutationExtractBaseValue(e, t) {
	let n = null;
	for (const r of e.fieldTransforms) {
		const e$1 = t.data.field(r.field), i = __PRIVATE_computeTransformOperationBaseValue(r.transform, e$1 || null);
		null != i && (null === n && (n = ObjectValue.empty()), n.set(r.field, i));
	}
	return n || null;
}
function __PRIVATE_mutationEquals(e, t) {
	return e.type === t.type && !!e.key.isEqual(t.key) && !!e.precondition.isEqual(t.precondition) && !!function __PRIVATE_fieldTransformsAreEqual(e$1, t$1) {
		return void 0 === e$1 && void 0 === t$1 || !(!e$1 || !t$1) && __PRIVATE_arrayEquals(e$1, t$1, ((e$2, t$2) => __PRIVATE_fieldTransformEquals(e$2, t$2)));
	}(e.fieldTransforms, t.fieldTransforms) && (0 === e.type ? e.value.isEqual(t.value) : 1 !== e.type || e.data.isEqual(t.data) && e.fieldMask.isEqual(t.fieldMask));
}
/**
* A mutation that creates or replaces the document at the given key with the
* object value contents.
*/ var __PRIVATE_SetMutation = class extends Mutation {
	constructor(e, t, n, r = []) {
		super(), this.key = e, this.value = t, this.precondition = n, this.fieldTransforms = r, this.type = 0;
	}
	getFieldMask() {
		return null;
	}
};
var __PRIVATE_PatchMutation = class extends Mutation {
	constructor(e, t, n, r, i = []) {
		super(), this.key = e, this.data = t, this.fieldMask = n, this.precondition = r, this.fieldTransforms = i, this.type = 1;
	}
	getFieldMask() {
		return this.fieldMask;
	}
};
function __PRIVATE_getPatch(e) {
	const t = /* @__PURE__ */ new Map();
	return e.fieldMask.fields.forEach(((n) => {
		if (!n.isEmpty()) {
			const r = e.data.field(n);
			t.set(n, r);
		}
	})), t;
}
/**
* Creates a list of "transform results" (a transform result is a field value
* representing the result of applying a transform) for use after a mutation
* containing transforms has been acknowledged by the server.
*
* @param fieldTransforms - The field transforms to apply the result to.
* @param mutableDocument - The current state of the document after applying all
* previous mutations.
* @param serverTransformResults - The transform results received by the server.
* @returns The transform results list.
*/ function __PRIVATE_serverTransformResults(e, t, n) {
	const r = /* @__PURE__ */ new Map();
	__PRIVATE_hardAssert(e.length === n.length, 32656, {
		Re: n.length,
		Ve: e.length
	});
	for (let i = 0; i < n.length; i++) {
		const s = e[i], o = s.transform, _ = t.data.field(s.field);
		r.set(s.field, __PRIVATE_applyTransformOperationToRemoteDocument(o, _, n[i]));
	}
	return r;
}
/**
* Creates a list of "transform results" (a transform result is a field value
* representing the result of applying a transform) for use when applying a
* transform locally.
*
* @param fieldTransforms - The field transforms to apply the result to.
* @param localWriteTime - The local time of the mutation (used to
*     generate ServerTimestampValues).
* @param mutableDocument - The document to apply transforms on.
* @returns The transform results list.
*/ function __PRIVATE_localTransformResults(e, t, n) {
	const r = /* @__PURE__ */ new Map();
	for (const i of e) {
		const e$1 = i.transform, s = n.data.field(i.field);
		r.set(i.field, __PRIVATE_applyTransformOperationToLocalView(e$1, s, t));
	}
	return r;
}
/** A mutation that deletes the document at the given key. */ var __PRIVATE_DeleteMutation = class extends Mutation {
	constructor(e, t) {
		super(), this.key = e, this.precondition = t, this.type = 2, this.fieldTransforms = [];
	}
	getFieldMask() {
		return null;
	}
};
var __PRIVATE_VerifyMutation = class extends Mutation {
	constructor(e, t) {
		super(), this.key = e, this.precondition = t, this.type = 3, this.fieldTransforms = [];
	}
	getFieldMask() {
		return null;
	}
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* A batch of mutations that will be sent as one unit to the backend.
*/ var MutationBatch = class {
	/**
	* @param batchId - The unique ID of this mutation batch.
	* @param localWriteTime - The original write time of this mutation.
	* @param baseMutations - Mutations that are used to populate the base
	* values when this mutation is applied locally. This can be used to locally
	* overwrite values that are persisted in the remote document cache. Base
	* mutations are never sent to the backend.
	* @param mutations - The user-provided mutations in this mutation batch.
	* User-provided mutations are applied both locally and remotely on the
	* backend.
	*/
	constructor(e, t, n, r) {
		this.batchId = e, this.localWriteTime = t, this.baseMutations = n, this.mutations = r;
	}
	/**
	* Applies all the mutations in this MutationBatch to the specified document
	* to compute the state of the remote document
	*
	* @param document - The document to apply mutations to.
	* @param batchResult - The result of applying the MutationBatch to the
	* backend.
	*/ applyToRemoteDocument(e, t) {
		const n = t.mutationResults;
		for (let t$1 = 0; t$1 < this.mutations.length; t$1++) {
			const r = this.mutations[t$1];
			if (r.key.isEqual(e.key)) __PRIVATE_mutationApplyToRemoteDocument(r, e, n[t$1]);
		}
	}
	/**
	* Computes the local view of a document given all the mutations in this
	* batch.
	*
	* @param document - The document to apply mutations to.
	* @param mutatedFields - Fields that have been updated before applying this mutation batch.
	* @returns A `FieldMask` representing all the fields that are mutated.
	*/ applyToLocalView(e, t) {
		for (const n of this.baseMutations) n.key.isEqual(e.key) && (t = __PRIVATE_mutationApplyToLocalView(n, e, t, this.localWriteTime));
		for (const n of this.mutations) n.key.isEqual(e.key) && (t = __PRIVATE_mutationApplyToLocalView(n, e, t, this.localWriteTime));
		return t;
	}
	/**
	* Computes the local view for all provided documents given the mutations in
	* this batch. Returns a `DocumentKey` to `Mutation` map which can be used to
	* replace all the mutation applications.
	*/ applyToLocalDocumentSet(e, t) {
		const n = __PRIVATE_newMutationMap();
		return this.mutations.forEach(((r) => {
			const i = e.get(r.key), s = i.overlayedDocument;
			let o = this.applyToLocalView(s, i.mutatedFields);
			o = t.has(r.key) ? null : o;
			const _ = __PRIVATE_calculateOverlayMutation(s, o);
			null !== _ && n.set(r.key, _), s.isValidDocument() || s.convertToNoDocument(SnapshotVersion.min());
		})), n;
	}
	keys() {
		return this.mutations.reduce(((e, t) => e.add(t.key)), __PRIVATE_documentKeySet());
	}
	isEqual(e) {
		return this.batchId === e.batchId && __PRIVATE_arrayEquals(this.mutations, e.mutations, ((e$1, t) => __PRIVATE_mutationEquals(e$1, t))) && __PRIVATE_arrayEquals(this.baseMutations, e.baseMutations, ((e$1, t) => __PRIVATE_mutationEquals(e$1, t)));
	}
};
/** The result of applying a mutation batch to the backend. */ var MutationBatchResult = class MutationBatchResult {
	constructor(e, t, n, r) {
		this.batch = e, this.commitVersion = t, this.mutationResults = n, this.docVersions = r;
	}
	/**
	* Creates a new MutationBatchResult for the given batch and results. There
	* must be one result for each mutation in the batch. This static factory
	* caches a document=&gt;version mapping (docVersions).
	*/ static from(e, t, n) {
		__PRIVATE_hardAssert(e.mutations.length === n.length, 58842, {
			me: e.mutations.length,
			fe: n.length
		});
		let r = function __PRIVATE_documentVersionMap() {
			return mt;
		}();
		const i = e.mutations;
		for (let e$1 = 0; e$1 < i.length; e$1++) r = r.insert(i[e$1].key, n[e$1].version);
		return new MutationBatchResult(e, t, n, r);
	}
};
/**
* @license
* Copyright 2022 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Representation of an overlay computed by Firestore.
*
* Holds information about a mutation and the largest batch id in Firestore when
* the mutation was created.
*/ var Overlay = class {
	constructor(e, t) {
		this.largestBatchId = e, this.mutation = t;
	}
	getKey() {
		return this.mutation.key;
	}
	isEqual(e) {
		return null !== e && this.mutation === e.mutation;
	}
	toString() {
		return `Overlay{\n      largestBatchId: ${this.largestBatchId},\n      mutation: ${this.mutation.toString()}\n    }`;
	}
};
/**
* @license
* Copyright 2023 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Concrete implementation of the Aggregate type.
*/ var __PRIVATE_AggregateImpl = class {
	constructor(e, t, n) {
		this.alias = e, this.aggregateType = t, this.fieldPath = n;
	}
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ var ExistenceFilter = class {
	constructor(e, t) {
		this.count = e, this.unchangedNames = t;
	}
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Error Codes describing the different ways GRPC can fail. These are copied
* directly from GRPC's sources here:
*
* https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
*
* Important! The names of these identifiers matter because the string forms
* are used for reverse lookups from the webchannel stream. Do NOT change the
* names of these identifiers or change this into a const enum.
*/ var pt, yt;
/**
* Determines whether an error code represents a permanent error when received
* in response to a non-write operation.
*
* See isPermanentWriteError for classifying write errors.
*/
function __PRIVATE_isPermanentError(e) {
	switch (e) {
		case N.OK: return fail(64938);
		case N.CANCELLED:
		case N.UNKNOWN:
		case N.DEADLINE_EXCEEDED:
		case N.RESOURCE_EXHAUSTED:
		case N.INTERNAL:
		case N.UNAVAILABLE:
		case N.UNAUTHENTICATED: return !1;
		case N.INVALID_ARGUMENT:
		case N.NOT_FOUND:
		case N.ALREADY_EXISTS:
		case N.PERMISSION_DENIED:
		case N.FAILED_PRECONDITION:
		case N.ABORTED:
		case N.OUT_OF_RANGE:
		case N.UNIMPLEMENTED:
		case N.DATA_LOSS: return !0;
		default: return fail(15467, { code: e });
	}
}
/**
* Determines whether an error code represents a permanent error when received
* in response to a write operation.
*
* Write operations must be handled specially because as of b/119437764, ABORTED
* errors on the write stream should be retried too (even though ABORTED errors
* are not generally retryable).
*
* Note that during the initial handshake on the write stream an ABORTED error
* signals that we should discard our stream token (i.e. it is permanent). This
* means a handshake error should be classified with isPermanentError, above.
*/
/**
* Maps an error Code from GRPC status code number, like 0, 1, or 14. These
* are not the same as HTTP status codes.
*
* @returns The Code equivalent to the given GRPC status code. Fails if there
*     is no match.
*/
function __PRIVATE_mapCodeFromRpcCode(e) {
	if (void 0 === e) return __PRIVATE_logError("GRPC error has no .code"), N.UNKNOWN;
	switch (e) {
		case pt.OK: return N.OK;
		case pt.CANCELLED: return N.CANCELLED;
		case pt.UNKNOWN: return N.UNKNOWN;
		case pt.DEADLINE_EXCEEDED: return N.DEADLINE_EXCEEDED;
		case pt.RESOURCE_EXHAUSTED: return N.RESOURCE_EXHAUSTED;
		case pt.INTERNAL: return N.INTERNAL;
		case pt.UNAVAILABLE: return N.UNAVAILABLE;
		case pt.UNAUTHENTICATED: return N.UNAUTHENTICATED;
		case pt.INVALID_ARGUMENT: return N.INVALID_ARGUMENT;
		case pt.NOT_FOUND: return N.NOT_FOUND;
		case pt.ALREADY_EXISTS: return N.ALREADY_EXISTS;
		case pt.PERMISSION_DENIED: return N.PERMISSION_DENIED;
		case pt.FAILED_PRECONDITION: return N.FAILED_PRECONDITION;
		case pt.ABORTED: return N.ABORTED;
		case pt.OUT_OF_RANGE: return N.OUT_OF_RANGE;
		case pt.UNIMPLEMENTED: return N.UNIMPLEMENTED;
		case pt.DATA_LOSS: return N.DATA_LOSS;
		default: return fail(39323, { code: e });
	}
}
/**
* Converts an HTTP response's error status to the equivalent error code.
*
* @param status - An HTTP error response status ("FAILED_PRECONDITION",
* "UNKNOWN", etc.)
* @returns The equivalent Code. Non-matching responses are mapped to
*     Code.UNKNOWN.
*/ (yt = pt || (pt = {}))[yt.OK = 0] = "OK", yt[yt.CANCELLED = 1] = "CANCELLED", yt[yt.UNKNOWN = 2] = "UNKNOWN", yt[yt.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", yt[yt.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", yt[yt.NOT_FOUND = 5] = "NOT_FOUND", yt[yt.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", yt[yt.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", yt[yt.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", yt[yt.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", yt[yt.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", yt[yt.ABORTED = 10] = "ABORTED", yt[yt.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", yt[yt.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", yt[yt.INTERNAL = 13] = "INTERNAL", yt[yt.UNAVAILABLE = 14] = "UNAVAILABLE", yt[yt.DATA_LOSS = 15] = "DATA_LOSS";
/**
* @license
* Copyright 2023 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* The global, singleton instance of TestingHooksSpi.
*
* This variable will be `null` in all cases _except_ when running from
* integration tests that have registered callbacks to be notified of events
* that happen during the test execution.
*/
var wt = null;
/**
* Sets the value of the `testingHooksSpi` object.
* @param instance the instance to set.
*/
/**
* @license
* Copyright 2023 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* An instance of the Platform's 'TextEncoder' implementation.
*/
function __PRIVATE_newTextEncoder() {
	return new TextEncoder();
}
/**
* An instance of the Platform's 'TextDecoder' implementation.
*/
/**
* @license
* Copyright 2022 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var St = new Integer([4294967295, 4294967295], 0);
function __PRIVATE_getMd5HashValue(e) {
	const t = __PRIVATE_newTextEncoder().encode(e), n = new Md5();
	return n.update(t), new Uint8Array(n.digest());
}
function __PRIVATE_get64BitUints(e) {
	const t = new DataView(e.buffer), n = t.getUint32(0, !0), r = t.getUint32(4, !0), i = t.getUint32(8, !0), s = t.getUint32(12, !0);
	return [new Integer([n, r], 0), new Integer([i, s], 0)];
}
var BloomFilter = class BloomFilter {
	constructor(e, t, n) {
		if (this.bitmap = e, this.padding = t, this.hashCount = n, t < 0 || t >= 8) throw new __PRIVATE_BloomFilterError(`Invalid padding: ${t}`);
		if (n < 0) throw new __PRIVATE_BloomFilterError(`Invalid hash count: ${n}`);
		if (e.length > 0 && 0 === this.hashCount) throw new __PRIVATE_BloomFilterError(`Invalid hash count: ${n}`);
		if (0 === e.length && 0 !== t) throw new __PRIVATE_BloomFilterError(`Invalid padding when bitmap length is 0: ${t}`);
		this.ge = 8 * e.length - t, this.pe = Integer.fromNumber(this.ge);
	}
	ye(e, t, n) {
		let r = e.add(t.multiply(Integer.fromNumber(n)));
		return 1 === r.compare(St) && (r = new Integer([r.getBits(0), r.getBits(1)], 0)), r.modulo(this.pe).toNumber();
	}
	we(e) {
		return !!(this.bitmap[Math.floor(e / 8)] & 1 << e % 8);
	}
	mightContain(e) {
		if (0 === this.ge) return !1;
		const t = __PRIVATE_getMd5HashValue(e), [n, r] = __PRIVATE_get64BitUints(t);
		for (let e$1 = 0; e$1 < this.hashCount; e$1++) {
			const t$1 = this.ye(n, r, e$1);
			if (!this.we(t$1)) return !1;
		}
		return !0;
	}
	/** Create bloom filter for testing purposes only. */ static create(e, t, n) {
		const r = e % 8 == 0 ? 0 : 8 - e % 8, i = new Uint8Array(Math.ceil(e / 8)), s = new BloomFilter(i, r, t);
		return n.forEach(((e$1) => s.insert(e$1))), s;
	}
	insert(e) {
		if (0 === this.ge) return;
		const t = __PRIVATE_getMd5HashValue(e), [n, r] = __PRIVATE_get64BitUints(t);
		for (let e$1 = 0; e$1 < this.hashCount; e$1++) {
			const t$1 = this.ye(n, r, e$1);
			this.Se(t$1);
		}
	}
	Se(e) {
		const t = Math.floor(e / 8), n = e % 8;
		this.bitmap[t] |= 1 << n;
	}
};
var __PRIVATE_BloomFilterError = class extends Error {
	constructor() {
		super(...arguments), this.name = "BloomFilterError";
	}
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* An event from the RemoteStore. It is split into targetChanges (changes to the
* state or the set of documents in our watched targets) and documentUpdates
* (changes to the actual documents).
*/ var RemoteEvent = class RemoteEvent {
	constructor(e, t, n, r, i) {
		this.snapshotVersion = e, this.targetChanges = t, this.targetMismatches = n, this.documentUpdates = r, this.resolvedLimboDocuments = i;
	}
	/**
	* HACK: Views require RemoteEvents in order to determine whether the view is
	* CURRENT, but secondary tabs don't receive remote events. So this method is
	* used to create a synthesized RemoteEvent that can be used to apply a
	* CURRENT status change to a View, for queries executed in a different tab.
	*/
	static createSynthesizedRemoteEventForCurrentChange(e, t, n) {
		const r = /* @__PURE__ */ new Map();
		return r.set(e, TargetChange.createSynthesizedTargetChangeForCurrentChange(e, t, n)), new RemoteEvent(SnapshotVersion.min(), r, new SortedMap(__PRIVATE_primitiveComparator), __PRIVATE_mutableDocumentMap(), __PRIVATE_documentKeySet());
	}
};
/**
* A TargetChange specifies the set of changes for a specific target as part of
* a RemoteEvent. These changes track which documents are added, modified or
* removed, as well as the target's resume token and whether the target is
* marked CURRENT.
* The actual changes *to* documents are not part of the TargetChange since
* documents may be part of multiple targets.
*/ var TargetChange = class TargetChange {
	constructor(e, t, n, r, i) {
		this.resumeToken = e, this.current = t, this.addedDocuments = n, this.modifiedDocuments = r, this.removedDocuments = i;
	}
	/**
	* This method is used to create a synthesized TargetChanges that can be used to
	* apply a CURRENT status change to a View (for queries executed in a different
	* tab) or for new queries (to raise snapshots with correct CURRENT status).
	*/ static createSynthesizedTargetChangeForCurrentChange(e, t, n) {
		return new TargetChange(n, t, __PRIVATE_documentKeySet(), __PRIVATE_documentKeySet(), __PRIVATE_documentKeySet());
	}
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Represents a changed document and a list of target ids to which this change
* applies.
*
* If document has been deleted NoDocument will be provided.
*/ var __PRIVATE_DocumentWatchChange = class {
	constructor(e, t, n, r) {
		this.be = e, this.removedTargetIds = t, this.key = n, this.De = r;
	}
};
var __PRIVATE_ExistenceFilterChange = class {
	constructor(e, t) {
		this.targetId = e, this.Ce = t;
	}
};
var __PRIVATE_WatchTargetChange = class {
	constructor(e, t, n = ByteString.EMPTY_BYTE_STRING, r = null) {
		this.state = e, this.targetIds = t, this.resumeToken = n, this.cause = r;
	}
};
/** Tracks the internal state of a Watch target. */ var __PRIVATE_TargetState = class {
	constructor() {
		/**
		* The number of pending responses (adds or removes) that we are waiting on.
		* We only consider targets active that have no pending responses.
		*/
		this.ve = 0, this.Fe = __PRIVATE_snapshotChangesMap(), this.Me = ByteString.EMPTY_BYTE_STRING, this.xe = !1, this.Oe = !0;
	}
	/**
	* Whether this target has been marked 'current'.
	*
	* 'Current' has special meaning in the RPC protocol: It implies that the
	* Watch backend has sent us all changes up to the point at which the target
	* was added and that the target is consistent with the rest of the watch
	* stream.
	*/ get current() {
		return this.xe;
	}
	/** The last resume token sent to us for this target. */ get resumeToken() {
		return this.Me;
	}
	/** Whether this target has pending target adds or target removes. */ get Ne() {
		return 0 !== this.ve;
	}
	/** Whether we have modified any state that should trigger a snapshot. */ get Be() {
		return this.Oe;
	}
	/**
	* Applies the resume token to the TargetChange, but only when it has a new
	* value. Empty resumeTokens are discarded.
	*/ Le(e) {
		e.approximateByteSize() > 0 && (this.Oe = !0, this.Me = e);
	}
	/**
	* Creates a target change from the current set of changes.
	*
	* To reset the document changes after raising this snapshot, call
	* `clearPendingChanges()`.
	*/ ke() {
		let e = __PRIVATE_documentKeySet(), t = __PRIVATE_documentKeySet(), n = __PRIVATE_documentKeySet();
		return this.Fe.forEach(((r, i) => {
			switch (i) {
				case 0:
					e = e.add(r);
					break;
				case 2:
					t = t.add(r);
					break;
				case 1:
					n = n.add(r);
					break;
				default: fail(38017, { changeType: i });
			}
		})), new TargetChange(this.Me, this.xe, e, t, n);
	}
	/**
	* Resets the document changes and sets `hasPendingChanges` to false.
	*/ qe() {
		this.Oe = !1, this.Fe = __PRIVATE_snapshotChangesMap();
	}
	Qe(e, t) {
		this.Oe = !0, this.Fe = this.Fe.insert(e, t);
	}
	$e(e) {
		this.Oe = !0, this.Fe = this.Fe.remove(e);
	}
	Ue() {
		this.ve += 1;
	}
	Ke() {
		this.ve -= 1, __PRIVATE_hardAssert(this.ve >= 0, 3241, { ve: this.ve });
	}
	We() {
		this.Oe = !0, this.xe = !0;
	}
};
/**
* A helper class to accumulate watch changes into a RemoteEvent.
*/
var __PRIVATE_WatchChangeAggregator = class {
	constructor(e) {
		this.Ge = e, this.ze = /* @__PURE__ */ new Map(), this.je = __PRIVATE_mutableDocumentMap(), this.Je = __PRIVATE_documentTargetMap(), this.He = __PRIVATE_documentTargetMap(), this.Ye = new SortedMap(__PRIVATE_primitiveComparator);
	}
	/**
	* Processes and adds the DocumentWatchChange to the current set of changes.
	*/ Ze(e) {
		for (const t of e.be) e.De && e.De.isFoundDocument() ? this.Xe(t, e.De) : this.et(t, e.key, e.De);
		for (const t of e.removedTargetIds) this.et(t, e.key, e.De);
	}
	/** Processes and adds the WatchTargetChange to the current set of changes. */ tt(e) {
		this.forEachTarget(e, ((t) => {
			const n = this.nt(t);
			switch (e.state) {
				case 0:
					this.rt(t) && n.Le(e.resumeToken);
					break;
				case 1:
					n.Ke(), n.Ne || n.qe(), n.Le(e.resumeToken);
					break;
				case 2:
					n.Ke(), n.Ne || this.removeTarget(t);
					break;
				case 3:
					this.rt(t) && (n.We(), n.Le(e.resumeToken));
					break;
				case 4:
					this.rt(t) && (this.it(t), n.Le(e.resumeToken));
					break;
				default: fail(56790, { state: e.state });
			}
		}));
	}
	/**
	* Iterates over all targetIds that the watch change applies to: either the
	* targetIds explicitly listed in the change or the targetIds of all currently
	* active targets.
	*/ forEachTarget(e, t) {
		e.targetIds.length > 0 ? e.targetIds.forEach(t) : this.ze.forEach(((e$1, n) => {
			this.rt(n) && t(n);
		}));
	}
	/**
	* Handles existence filters and synthesizes deletes for filter mismatches.
	* Targets that are invalidated by filter mismatches are added to
	* `pendingTargetResets`.
	*/ st(e) {
		const t = e.targetId, n = e.Ce.count, r = this.ot(t);
		if (r) {
			const i = r.target;
			if (__PRIVATE_targetIsDocumentTarget(i)) if (0 === n) {
				const e$1 = new DocumentKey(i.path);
				this.et(t, e$1, MutableDocument.newNoDocument(e$1, SnapshotVersion.min()));
			} else __PRIVATE_hardAssert(1 === n, 20013, { expectedCount: n });
			else {
				const r$1 = this._t(t);
				if (r$1 !== n) {
					const n$1 = this.ut(e), i$1 = n$1 ? this.ct(n$1, e, r$1) : 1;
					if (0 !== i$1) {
						this.it(t);
						const e$1 = 2 === i$1 ? "TargetPurposeExistenceFilterMismatchBloom" : "TargetPurposeExistenceFilterMismatch";
						this.Ye = this.Ye.insert(t, e$1);
					}
					wt?.lt(function __PRIVATE_createExistenceFilterMismatchInfoForTestingHooks(e$1, t$1, n$2, r$2, i$2) {
						const s = {
							localCacheCount: e$1,
							existenceFilterCount: t$1.count,
							databaseId: n$2.database,
							projectId: n$2.projectId
						}, o = t$1.unchangedNames;
						o && (s.bloomFilter = {
							applied: 0 === i$2,
							hashCount: o?.hashCount ?? 0,
							bitmapLength: o?.bits?.bitmap?.length ?? 0,
							padding: o?.bits?.padding ?? 0,
							mightContain: (e$2) => r$2?.mightContain(e$2) ?? !1
						});
						return s;
					}(r$1, e.Ce, this.Ge.ht(), n$1, i$1));
				}
			}
		}
	}
	/**
	* Parse the bloom filter from the "unchanged_names" field of an existence
	* filter.
	*/ ut(e) {
		const t = e.Ce.unchangedNames;
		if (!t || !t.bits) return null;
		const { bits: { bitmap: n = "", padding: r = 0 }, hashCount: i = 0 } = t;
		let s, o;
		try {
			s = __PRIVATE_normalizeByteString(n).toUint8Array();
		} catch (e$1) {
			if (e$1 instanceof __PRIVATE_Base64DecodeError) return __PRIVATE_logWarn("Decoding the base64 bloom filter in existence filter failed (" + e$1.message + "); ignoring the bloom filter and falling back to full re-query."), null;
			throw e$1;
		}
		try {
			o = new BloomFilter(s, r, i);
		} catch (e$1) {
			return __PRIVATE_logWarn(e$1 instanceof __PRIVATE_BloomFilterError ? "BloomFilter error: " : "Applying bloom filter failed: ", e$1), null;
		}
		return 0 === o.ge ? null : o;
	}
	/**
	* Apply bloom filter to remove the deleted documents, and return the
	* application status.
	*/ ct(e, t, n) {
		return t.Ce.count === n - this.Pt(e, t.targetId) ? 0 : 2;
	}
	/**
	* Filter out removed documents based on bloom filter membership result and
	* return number of documents removed.
	*/ Pt(e, t) {
		const n = this.Ge.getRemoteKeysForTarget(t);
		let r = 0;
		return n.forEach(((n$1) => {
			const i = this.Ge.ht(), s = `projects/${i.projectId}/databases/${i.database}/documents/${n$1.path.canonicalString()}`;
			e.mightContain(s) || (this.et(t, n$1, null), r++);
		})), r;
	}
	/**
	* Converts the currently accumulated state into a remote event at the
	* provided snapshot version. Resets the accumulated changes before returning.
	*/ Tt(e) {
		const t = /* @__PURE__ */ new Map();
		this.ze.forEach(((n$1, r$1) => {
			const i = this.ot(r$1);
			if (i) {
				if (n$1.current && __PRIVATE_targetIsDocumentTarget(i.target)) {
					const t$1 = new DocumentKey(i.target.path);
					this.It(t$1).has(r$1) || this.Et(r$1, t$1) || this.et(r$1, t$1, MutableDocument.newNoDocument(t$1, e));
				}
				n$1.Be && (t.set(r$1, n$1.ke()), n$1.qe());
			}
		}));
		let n = __PRIVATE_documentKeySet();
		this.He.forEach(((e$1, t$1) => {
			let r$1 = !0;
			t$1.forEachWhile(((e$2) => {
				const t$2 = this.ot(e$2);
				return !t$2 || "TargetPurposeLimboResolution" === t$2.purpose || (r$1 = !1, !1);
			})), r$1 && (n = n.add(e$1));
		})), this.je.forEach(((t$1, n$1) => n$1.setReadTime(e)));
		const r = new RemoteEvent(e, t, this.Ye, this.je, n);
		return this.je = __PRIVATE_mutableDocumentMap(), this.Je = __PRIVATE_documentTargetMap(), this.He = __PRIVATE_documentTargetMap(), this.Ye = new SortedMap(__PRIVATE_primitiveComparator), r;
	}
	/**
	* Adds the provided document to the internal list of document updates and
	* its document key to the given target's mapping.
	*/
	Xe(e, t) {
		if (!this.rt(e)) return;
		const n = this.Et(e, t.key) ? 2 : 0;
		this.nt(e).Qe(t.key, n), this.je = this.je.insert(t.key, t), this.Je = this.Je.insert(t.key, this.It(t.key).add(e)), this.He = this.He.insert(t.key, this.dt(t.key).add(e));
	}
	/**
	* Removes the provided document from the target mapping. If the
	* document no longer matches the target, but the document's state is still
	* known (e.g. we know that the document was deleted or we received the change
	* that caused the filter mismatch), the new document can be provided
	* to update the remote document cache.
	*/
	et(e, t, n) {
		if (!this.rt(e)) return;
		const r = this.nt(e);
		this.Et(e, t) ? r.Qe(t, 1) : r.$e(t), this.He = this.He.insert(t, this.dt(t).delete(e)), this.He = this.He.insert(t, this.dt(t).add(e)), n && (this.je = this.je.insert(t, n));
	}
	removeTarget(e) {
		this.ze.delete(e);
	}
	/**
	* Returns the current count of documents in the target. This includes both
	* the number of documents that the LocalStore considers to be part of the
	* target as well as any accumulated changes.
	*/ _t(e) {
		const t = this.nt(e).ke();
		return this.Ge.getRemoteKeysForTarget(e).size + t.addedDocuments.size - t.removedDocuments.size;
	}
	/**
	* Increment the number of acks needed from watch before we can consider the
	* server to be 'in-sync' with the client's active targets.
	*/ Ue(e) {
		this.nt(e).Ue();
	}
	nt(e) {
		let t = this.ze.get(e);
		return t || (t = new __PRIVATE_TargetState(), this.ze.set(e, t)), t;
	}
	dt(e) {
		let t = this.He.get(e);
		return t || (t = new SortedSet(__PRIVATE_primitiveComparator), this.He = this.He.insert(e, t)), t;
	}
	It(e) {
		let t = this.Je.get(e);
		return t || (t = new SortedSet(__PRIVATE_primitiveComparator), this.Je = this.Je.insert(e, t)), t;
	}
	/**
	* Verifies that the user is still interested in this target (by calling
	* `getTargetDataForTarget()`) and that we are not waiting for pending ADDs
	* from watch.
	*/ rt(e) {
		const t = null !== this.ot(e);
		return t || __PRIVATE_logDebug("WatchChangeAggregator", "Detected inactive target", e), t;
	}
	/**
	* Returns the TargetData for an active target (i.e. a target that the user
	* is still interested in that has no outstanding target change requests).
	*/ ot(e) {
		const t = this.ze.get(e);
		return t && t.Ne ? null : this.Ge.At(e);
	}
	/**
	* Resets the state of a Watch target to its initial state (e.g. sets
	* 'current' to false, clears the resume token and removes its target mapping
	* from all documents).
	*/ it(e) {
		this.ze.set(e, new __PRIVATE_TargetState());
		this.Ge.getRemoteKeysForTarget(e).forEach(((t) => {
			this.et(e, t, null);
		}));
	}
	/**
	* Returns whether the LocalStore considers the document to be part of the
	* specified target.
	*/ Et(e, t) {
		return this.Ge.getRemoteKeysForTarget(e).has(t);
	}
};
function __PRIVATE_documentTargetMap() {
	return new SortedMap(DocumentKey.comparator);
}
function __PRIVATE_snapshotChangesMap() {
	return new SortedMap(DocumentKey.comparator);
}
var bt = (() => {
	return {
		asc: "ASCENDING",
		desc: "DESCENDING"
	};
})(), Dt = (() => {
	return {
		"<": "LESS_THAN",
		"<=": "LESS_THAN_OR_EQUAL",
		">": "GREATER_THAN",
		">=": "GREATER_THAN_OR_EQUAL",
		"==": "EQUAL",
		"!=": "NOT_EQUAL",
		"array-contains": "ARRAY_CONTAINS",
		in: "IN",
		"not-in": "NOT_IN",
		"array-contains-any": "ARRAY_CONTAINS_ANY"
	};
})(), Ct = (() => {
	return {
		and: "AND",
		or: "OR"
	};
})();
/**
* This class generates JsonObject values for the Datastore API suitable for
* sending to either GRPC stub methods or via the JSON/HTTP REST API.
*
* The serializer supports both Protobuf.js and Proto3 JSON formats. By
* setting `useProto3Json` to true, the serializer will use the Proto3 JSON
* format.
*
* For a description of the Proto3 JSON format check
* https://developers.google.com/protocol-buffers/docs/proto3#json
*
* TODO(klimt): We can remove the databaseId argument if we keep the full
* resource name in documents.
*/
var JsonProtoSerializer = class {
	constructor(e, t) {
		this.databaseId = e, this.useProto3Json = t;
	}
};
/**
* Returns a value for a number (or null) that's appropriate to put into
* a google.protobuf.Int32Value proto.
* DO NOT USE THIS FOR ANYTHING ELSE.
* This method cheats. It's typed as returning "number" because that's what
* our generated proto interfaces say Int32Value must be. But GRPC actually
* expects a { value: <number> } struct.
*/
function __PRIVATE_toInt32Proto(e, t) {
	return e.useProto3Json || __PRIVATE_isNullOrUndefined(t) ? t : { value: t };
}
/**
* Returns a number (or null) from a google.protobuf.Int32Value proto.
*/
/**
* Returns a value for a Date that's appropriate to put into a proto.
*/
function toTimestamp(e, t) {
	if (e.useProto3Json) return `${(/* @__PURE__ */ new Date(1e3 * t.seconds)).toISOString().replace(/\.\d*/, "").replace("Z", "")}.${("000000000" + t.nanoseconds).slice(-9)}Z`;
	return {
		seconds: "" + t.seconds,
		nanos: t.nanoseconds
	};
}
/**
* Returns a Timestamp typed object given protobuf timestamp value.
*/
/**
* Returns a value for bytes that's appropriate to put in a proto.
*
* Visible for testing.
*/
function __PRIVATE_toBytes(e, t) {
	return e.useProto3Json ? t.toBase64() : t.toUint8Array();
}
/**
* Returns a ByteString based on the proto string value.
*/ function __PRIVATE_toVersion(e, t) {
	return toTimestamp(e, t.toTimestamp());
}
function __PRIVATE_fromVersion(e) {
	return __PRIVATE_hardAssert(!!e, 49232), SnapshotVersion.fromTimestamp(function fromTimestamp(e$1) {
		const t = __PRIVATE_normalizeTimestamp(e$1);
		return new Timestamp(t.seconds, t.nanos);
	}(e));
}
function __PRIVATE_toResourceName(e, t) {
	return __PRIVATE_toResourcePath(e, t).canonicalString();
}
function __PRIVATE_toResourcePath(e, t) {
	const n = function __PRIVATE_fullyQualifiedPrefixPath(e$1) {
		return new ResourcePath([
			"projects",
			e$1.projectId,
			"databases",
			e$1.database
		]);
	}(e).child("documents");
	return void 0 === t ? n : n.child(t);
}
function __PRIVATE_fromResourceName(e) {
	const t = ResourcePath.fromString(e);
	return __PRIVATE_hardAssert(__PRIVATE_isValidResourceName(t), 10190, { key: t.toString() }), t;
}
function __PRIVATE_toName(e, t) {
	return __PRIVATE_toResourceName(e.databaseId, t.path);
}
function fromName(e, t) {
	const n = __PRIVATE_fromResourceName(t);
	if (n.get(1) !== e.databaseId.projectId) throw new FirestoreError(N.INVALID_ARGUMENT, "Tried to deserialize key from different project: " + n.get(1) + " vs " + e.databaseId.projectId);
	if (n.get(3) !== e.databaseId.database) throw new FirestoreError(N.INVALID_ARGUMENT, "Tried to deserialize key from different database: " + n.get(3) + " vs " + e.databaseId.database);
	return new DocumentKey(__PRIVATE_extractLocalPathFromResourceName(n));
}
function __PRIVATE_toQueryPath(e, t) {
	return __PRIVATE_toResourceName(e.databaseId, t);
}
function __PRIVATE_fromQueryPath(e) {
	const t = __PRIVATE_fromResourceName(e);
	return 4 === t.length ? ResourcePath.emptyPath() : __PRIVATE_extractLocalPathFromResourceName(t);
}
function __PRIVATE_getEncodedDatabaseId(e) {
	return new ResourcePath([
		"projects",
		e.databaseId.projectId,
		"databases",
		e.databaseId.database
	]).canonicalString();
}
function __PRIVATE_extractLocalPathFromResourceName(e) {
	return __PRIVATE_hardAssert(e.length > 4 && "documents" === e.get(4), 29091, { key: e.toString() }), e.popFirst(5);
}
/** Creates a Document proto from key and fields (but no create/update time) */ function __PRIVATE_toMutationDocument(e, t, n) {
	return {
		name: __PRIVATE_toName(e, t),
		fields: n.value.mapValue.fields
	};
}
function __PRIVATE_fromDocument(e, t, n) {
	const r = fromName(e, t.name), i = __PRIVATE_fromVersion(t.updateTime), s = t.createTime ? __PRIVATE_fromVersion(t.createTime) : SnapshotVersion.min(), o = new ObjectValue({ mapValue: { fields: t.fields } }), _ = MutableDocument.newFoundDocument(r, i, s, o);
	return n && _.setHasCommittedMutations(), n ? _.setHasCommittedMutations() : _;
}
function __PRIVATE_fromBatchGetDocumentsResponse(e, t) {
	return "found" in t ? function __PRIVATE_fromFound(e$1, t$1) {
		__PRIVATE_hardAssert(!!t$1.found, 43571), t$1.found.name, t$1.found.updateTime;
		const n = fromName(e$1, t$1.found.name), r = __PRIVATE_fromVersion(t$1.found.updateTime), i = t$1.found.createTime ? __PRIVATE_fromVersion(t$1.found.createTime) : SnapshotVersion.min(), s = new ObjectValue({ mapValue: { fields: t$1.found.fields } });
		return MutableDocument.newFoundDocument(n, r, i, s);
	}(e, t) : "missing" in t ? function __PRIVATE_fromMissing(e$1, t$1) {
		__PRIVATE_hardAssert(!!t$1.missing, 3894), __PRIVATE_hardAssert(!!t$1.readTime, 22933);
		const n = fromName(e$1, t$1.missing), r = __PRIVATE_fromVersion(t$1.readTime);
		return MutableDocument.newNoDocument(n, r);
	}(e, t) : fail(7234, { result: t });
}
function __PRIVATE_fromWatchChange(e, t) {
	let n;
	if ("targetChange" in t) {
		t.targetChange;
		const r = function __PRIVATE_fromWatchTargetChangeState(e$1) {
			return "NO_CHANGE" === e$1 ? 0 : "ADD" === e$1 ? 1 : "REMOVE" === e$1 ? 2 : "CURRENT" === e$1 ? 3 : "RESET" === e$1 ? 4 : fail(39313, { state: e$1 });
		}(t.targetChange.targetChangeType || "NO_CHANGE"), i = t.targetChange.targetIds || [], s = function __PRIVATE_fromBytes(e$1, t$1) {
			return e$1.useProto3Json ? (__PRIVATE_hardAssert(void 0 === t$1 || "string" == typeof t$1, 58123), ByteString.fromBase64String(t$1 || "")) : (__PRIVATE_hardAssert(void 0 === t$1 || t$1 instanceof Buffer || t$1 instanceof Uint8Array, 16193), ByteString.fromUint8Array(t$1 || new Uint8Array()));
		}(e, t.targetChange.resumeToken), o = t.targetChange.cause, _ = o && function __PRIVATE_fromRpcStatus(e$1) {
			const t$1 = void 0 === e$1.code ? N.UNKNOWN : __PRIVATE_mapCodeFromRpcCode(e$1.code);
			return new FirestoreError(t$1, e$1.message || "");
		}(o);
		n = new __PRIVATE_WatchTargetChange(r, i, s, _ || null);
	} else if ("documentChange" in t) {
		t.documentChange;
		const r = t.documentChange;
		r.document, r.document.name, r.document.updateTime;
		const i = fromName(e, r.document.name), s = __PRIVATE_fromVersion(r.document.updateTime), o = r.document.createTime ? __PRIVATE_fromVersion(r.document.createTime) : SnapshotVersion.min(), _ = new ObjectValue({ mapValue: { fields: r.document.fields } }), a = MutableDocument.newFoundDocument(i, s, o, _), u = r.targetIds || [], c = r.removedTargetIds || [];
		n = new __PRIVATE_DocumentWatchChange(u, c, a.key, a);
	} else if ("documentDelete" in t) {
		t.documentDelete;
		const r = t.documentDelete;
		r.document;
		const i = fromName(e, r.document), s = r.readTime ? __PRIVATE_fromVersion(r.readTime) : SnapshotVersion.min(), o = MutableDocument.newNoDocument(i, s), _ = r.removedTargetIds || [];
		n = new __PRIVATE_DocumentWatchChange([], _, o.key, o);
	} else if ("documentRemove" in t) {
		t.documentRemove;
		const r = t.documentRemove;
		r.document;
		const i = fromName(e, r.document), s = r.removedTargetIds || [];
		n = new __PRIVATE_DocumentWatchChange([], s, i, null);
	} else {
		if (!("filter" in t)) return fail(11601, { Rt: t });
		{
			t.filter;
			const e$1 = t.filter;
			e$1.targetId;
			const { count: r = 0, unchangedNames: i } = e$1, s = new ExistenceFilter(r, i), o = e$1.targetId;
			n = new __PRIVATE_ExistenceFilterChange(o, s);
		}
	}
	return n;
}
function toMutation(e, t) {
	let n;
	if (t instanceof __PRIVATE_SetMutation) n = { update: __PRIVATE_toMutationDocument(e, t.key, t.value) };
	else if (t instanceof __PRIVATE_DeleteMutation) n = { delete: __PRIVATE_toName(e, t.key) };
	else if (t instanceof __PRIVATE_PatchMutation) n = {
		update: __PRIVATE_toMutationDocument(e, t.key, t.data),
		updateMask: __PRIVATE_toDocumentMask(t.fieldMask)
	};
	else {
		if (!(t instanceof __PRIVATE_VerifyMutation)) return fail(16599, { Vt: t.type });
		n = { verify: __PRIVATE_toName(e, t.key) };
	}
	return t.fieldTransforms.length > 0 && (n.updateTransforms = t.fieldTransforms.map(((e$1) => function __PRIVATE_toFieldTransform(e$2, t$1) {
		const n$1 = t$1.transform;
		if (n$1 instanceof __PRIVATE_ServerTimestampTransform) return {
			fieldPath: t$1.field.canonicalString(),
			setToServerValue: "REQUEST_TIME"
		};
		if (n$1 instanceof __PRIVATE_ArrayUnionTransformOperation) return {
			fieldPath: t$1.field.canonicalString(),
			appendMissingElements: { values: n$1.elements }
		};
		if (n$1 instanceof __PRIVATE_ArrayRemoveTransformOperation) return {
			fieldPath: t$1.field.canonicalString(),
			removeAllFromArray: { values: n$1.elements }
		};
		if (n$1 instanceof __PRIVATE_NumericIncrementTransformOperation) return {
			fieldPath: t$1.field.canonicalString(),
			increment: n$1.Ae
		};
		throw fail(20930, { transform: t$1.transform });
	}(0, e$1)))), t.precondition.isNone || (n.currentDocument = function __PRIVATE_toPrecondition(e$1, t$1) {
		return void 0 !== t$1.updateTime ? { updateTime: __PRIVATE_toVersion(e$1, t$1.updateTime) } : void 0 !== t$1.exists ? { exists: t$1.exists } : fail(27497);
	}(e, t.precondition)), n;
}
function __PRIVATE_fromMutation(e, t) {
	const n = t.currentDocument ? function __PRIVATE_fromPrecondition(e$1) {
		return void 0 !== e$1.updateTime ? Precondition.updateTime(__PRIVATE_fromVersion(e$1.updateTime)) : void 0 !== e$1.exists ? Precondition.exists(e$1.exists) : Precondition.none();
	}(t.currentDocument) : Precondition.none(), r = t.updateTransforms ? t.updateTransforms.map(((t$1) => function __PRIVATE_fromFieldTransform(e$1, t$2) {
		let n$1 = null;
		if ("setToServerValue" in t$2) __PRIVATE_hardAssert("REQUEST_TIME" === t$2.setToServerValue, 16630, { proto: t$2 }), n$1 = new __PRIVATE_ServerTimestampTransform();
		else if ("appendMissingElements" in t$2) {
			const e$2 = t$2.appendMissingElements.values || [];
			n$1 = new __PRIVATE_ArrayUnionTransformOperation(e$2);
		} else if ("removeAllFromArray" in t$2) {
			const e$2 = t$2.removeAllFromArray.values || [];
			n$1 = new __PRIVATE_ArrayRemoveTransformOperation(e$2);
		} else "increment" in t$2 ? n$1 = new __PRIVATE_NumericIncrementTransformOperation(e$1, t$2.increment) : fail(16584, { proto: t$2 });
		const r$1 = FieldPath$1.fromServerFormat(t$2.fieldPath);
		return new FieldTransform(r$1, n$1);
	}(e, t$1))) : [];
	if (t.update) {
		t.update.name;
		const i = fromName(e, t.update.name), s = new ObjectValue({ mapValue: { fields: t.update.fields } });
		if (t.updateMask) {
			const e$1 = function __PRIVATE_fromDocumentMask(e$2) {
				const t$1 = e$2.fieldPaths || [];
				return new FieldMask(t$1.map(((e$3) => FieldPath$1.fromServerFormat(e$3))));
			}(t.updateMask);
			return new __PRIVATE_PatchMutation(i, s, e$1, n, r);
		}
		return new __PRIVATE_SetMutation(i, s, n, r);
	}
	if (t.delete) {
		const r$1 = fromName(e, t.delete);
		return new __PRIVATE_DeleteMutation(r$1, n);
	}
	if (t.verify) {
		const r$1 = fromName(e, t.verify);
		return new __PRIVATE_VerifyMutation(r$1, n);
	}
	return fail(1463, { proto: t });
}
function __PRIVATE_fromWriteResults(e, t) {
	return e && e.length > 0 ? (__PRIVATE_hardAssert(void 0 !== t, 14353), e.map(((e$1) => function __PRIVATE_fromWriteResult(e$2, t$1) {
		let n = e$2.updateTime ? __PRIVATE_fromVersion(e$2.updateTime) : __PRIVATE_fromVersion(t$1);
		return n.isEqual(SnapshotVersion.min()) && (n = __PRIVATE_fromVersion(t$1)), new MutationResult(n, e$2.transformResults || []);
	}(e$1, t)))) : [];
}
function __PRIVATE_toDocumentsTarget(e, t) {
	return { documents: [__PRIVATE_toQueryPath(e, t.path)] };
}
function __PRIVATE_toQueryTarget(e, t) {
	const n = { structuredQuery: {} }, r = t.path;
	let i;
	null !== t.collectionGroup ? (i = r, n.structuredQuery.from = [{
		collectionId: t.collectionGroup,
		allDescendants: !0
	}]) : (i = r.popLast(), n.structuredQuery.from = [{ collectionId: r.lastSegment() }]), n.parent = __PRIVATE_toQueryPath(e, i);
	const s = function __PRIVATE_toFilters(e$1) {
		if (0 === e$1.length) return;
		return __PRIVATE_toFilter(CompositeFilter.create(e$1, "and"));
	}(t.filters);
	s && (n.structuredQuery.where = s);
	const o = function __PRIVATE_toOrder(e$1) {
		if (0 === e$1.length) return;
		return e$1.map(((e$2) => function __PRIVATE_toPropertyOrder(e$3) {
			return {
				field: __PRIVATE_toFieldPathReference(e$3.field),
				direction: __PRIVATE_toDirection(e$3.dir)
			};
		}(e$2)));
	}(t.orderBy);
	o && (n.structuredQuery.orderBy = o);
	const _ = __PRIVATE_toInt32Proto(e, t.limit);
	return null !== _ && (n.structuredQuery.limit = _), t.startAt && (n.structuredQuery.startAt = function __PRIVATE_toStartAtCursor(e$1) {
		return {
			before: e$1.inclusive,
			values: e$1.position
		};
	}(t.startAt)), t.endAt && (n.structuredQuery.endAt = function __PRIVATE_toEndAtCursor(e$1) {
		return {
			before: !e$1.inclusive,
			values: e$1.position
		};
	}(t.endAt)), {
		ft: n,
		parent: i
	};
}
function __PRIVATE_toRunAggregationQueryRequest(e, t, n, r) {
	const { ft: i, parent: s } = __PRIVATE_toQueryTarget(e, t), o = {}, _ = [];
	let a = 0;
	return n.forEach(((e$1) => {
		const t$1 = r ? e$1.alias : "aggregate_" + a++;
		o[t$1] = e$1.alias, "count" === e$1.aggregateType ? _.push({
			alias: t$1,
			count: {}
		}) : "avg" === e$1.aggregateType ? _.push({
			alias: t$1,
			avg: { field: __PRIVATE_toFieldPathReference(e$1.fieldPath) }
		}) : "sum" === e$1.aggregateType && _.push({
			alias: t$1,
			sum: { field: __PRIVATE_toFieldPathReference(e$1.fieldPath) }
		});
	})), {
		request: {
			structuredAggregationQuery: {
				aggregations: _,
				structuredQuery: i.structuredQuery
			},
			parent: i.parent
		},
		gt: o,
		parent: s
	};
}
function __PRIVATE_convertQueryTargetToQuery(e) {
	let t = __PRIVATE_fromQueryPath(e.parent);
	const n = e.structuredQuery, r = n.from ? n.from.length : 0;
	let i = null;
	if (r > 0) {
		__PRIVATE_hardAssert(1 === r, 65062);
		const e$1 = n.from[0];
		e$1.allDescendants ? i = e$1.collectionId : t = t.child(e$1.collectionId);
	}
	let s = [];
	n.where && (s = function __PRIVATE_fromFilters(e$1) {
		const t$1 = __PRIVATE_fromFilter(e$1);
		if (t$1 instanceof CompositeFilter && __PRIVATE_compositeFilterIsFlatConjunction(t$1)) return t$1.getFilters();
		return [t$1];
	}(n.where));
	let o = [];
	n.orderBy && (o = function __PRIVATE_fromOrder(e$1) {
		return e$1.map(((e$2) => function __PRIVATE_fromPropertyOrder(e$3) {
			return new OrderBy(__PRIVATE_fromFieldPathReference(e$3.field), function __PRIVATE_fromDirection(e$4) {
				switch (e$4) {
					case "ASCENDING": return "asc";
					case "DESCENDING": return "desc";
					default: return;
				}
			}(e$3.direction));
		}(e$2)));
	}(n.orderBy));
	let _ = null;
	n.limit && (_ = function __PRIVATE_fromInt32Proto(e$1) {
		let t$1;
		return t$1 = "object" == typeof e$1 ? e$1.value : e$1, __PRIVATE_isNullOrUndefined(t$1) ? null : t$1;
	}(n.limit));
	let a = null;
	n.startAt && (a = function __PRIVATE_fromStartAtCursor(e$1) {
		const t$1 = !!e$1.before, n$1 = e$1.values || [];
		return new Bound(n$1, t$1);
	}(n.startAt));
	let u = null;
	return n.endAt && (u = function __PRIVATE_fromEndAtCursor(e$1) {
		const t$1 = !e$1.before, n$1 = e$1.values || [];
		return new Bound(n$1, t$1);
	}(n.endAt)), __PRIVATE_newQuery(t, i, o, s, _, "F", a, u);
}
function __PRIVATE_toListenRequestLabels(e, t) {
	const n = function __PRIVATE_toLabel(e$1) {
		switch (e$1) {
			case "TargetPurposeListen": return null;
			case "TargetPurposeExistenceFilterMismatch": return "existence-filter-mismatch";
			case "TargetPurposeExistenceFilterMismatchBloom": return "existence-filter-mismatch-bloom";
			case "TargetPurposeLimboResolution": return "limbo-document";
			default: return fail(28987, { purpose: e$1 });
		}
	}(t.purpose);
	return null == n ? null : { "goog-listen-tags": n };
}
function __PRIVATE_fromFilter(e) {
	return void 0 !== e.unaryFilter ? function __PRIVATE_fromUnaryFilter(e$1) {
		switch (e$1.unaryFilter.op) {
			case "IS_NAN":
				const t = __PRIVATE_fromFieldPathReference(e$1.unaryFilter.field);
				return FieldFilter.create(t, "==", { doubleValue: NaN });
			case "IS_NULL":
				const n = __PRIVATE_fromFieldPathReference(e$1.unaryFilter.field);
				return FieldFilter.create(n, "==", { nullValue: "NULL_VALUE" });
			case "IS_NOT_NAN":
				const r = __PRIVATE_fromFieldPathReference(e$1.unaryFilter.field);
				return FieldFilter.create(r, "!=", { doubleValue: NaN });
			case "IS_NOT_NULL":
				const i = __PRIVATE_fromFieldPathReference(e$1.unaryFilter.field);
				return FieldFilter.create(i, "!=", { nullValue: "NULL_VALUE" });
			case "OPERATOR_UNSPECIFIED": return fail(61313);
			default: return fail(60726);
		}
	}(e) : void 0 !== e.fieldFilter ? function __PRIVATE_fromFieldFilter(e$1) {
		return FieldFilter.create(__PRIVATE_fromFieldPathReference(e$1.fieldFilter.field), function __PRIVATE_fromOperatorName(e$2) {
			switch (e$2) {
				case "EQUAL": return "==";
				case "NOT_EQUAL": return "!=";
				case "GREATER_THAN": return ">";
				case "GREATER_THAN_OR_EQUAL": return ">=";
				case "LESS_THAN": return "<";
				case "LESS_THAN_OR_EQUAL": return "<=";
				case "ARRAY_CONTAINS": return "array-contains";
				case "IN": return "in";
				case "NOT_IN": return "not-in";
				case "ARRAY_CONTAINS_ANY": return "array-contains-any";
				case "OPERATOR_UNSPECIFIED": return fail(58110);
				default: return fail(50506);
			}
		}(e$1.fieldFilter.op), e$1.fieldFilter.value);
	}(e) : void 0 !== e.compositeFilter ? function __PRIVATE_fromCompositeFilter(e$1) {
		return CompositeFilter.create(e$1.compositeFilter.filters.map(((e$2) => __PRIVATE_fromFilter(e$2))), function __PRIVATE_fromCompositeOperatorName(e$2) {
			switch (e$2) {
				case "AND": return "and";
				case "OR": return "or";
				default: return fail(1026);
			}
		}(e$1.compositeFilter.op));
	}(e) : fail(30097, { filter: e });
}
function __PRIVATE_toDirection(e) {
	return bt[e];
}
function __PRIVATE_toOperatorName(e) {
	return Dt[e];
}
function __PRIVATE_toCompositeOperatorName(e) {
	return Ct[e];
}
function __PRIVATE_toFieldPathReference(e) {
	return { fieldPath: e.canonicalString() };
}
function __PRIVATE_fromFieldPathReference(e) {
	return FieldPath$1.fromServerFormat(e.fieldPath);
}
function __PRIVATE_toFilter(e) {
	return e instanceof FieldFilter ? function __PRIVATE_toUnaryOrFieldFilter(e$1) {
		if ("==" === e$1.op) {
			if (__PRIVATE_isNanValue(e$1.value)) return { unaryFilter: {
				field: __PRIVATE_toFieldPathReference(e$1.field),
				op: "IS_NAN"
			} };
			if (__PRIVATE_isNullValue(e$1.value)) return { unaryFilter: {
				field: __PRIVATE_toFieldPathReference(e$1.field),
				op: "IS_NULL"
			} };
		} else if ("!=" === e$1.op) {
			if (__PRIVATE_isNanValue(e$1.value)) return { unaryFilter: {
				field: __PRIVATE_toFieldPathReference(e$1.field),
				op: "IS_NOT_NAN"
			} };
			if (__PRIVATE_isNullValue(e$1.value)) return { unaryFilter: {
				field: __PRIVATE_toFieldPathReference(e$1.field),
				op: "IS_NOT_NULL"
			} };
		}
		return { fieldFilter: {
			field: __PRIVATE_toFieldPathReference(e$1.field),
			op: __PRIVATE_toOperatorName(e$1.op),
			value: e$1.value
		} };
	}(e) : e instanceof CompositeFilter ? function __PRIVATE_toCompositeFilter(e$1) {
		const t = e$1.getFilters().map(((e$2) => __PRIVATE_toFilter(e$2)));
		if (1 === t.length) return t[0];
		return { compositeFilter: {
			op: __PRIVATE_toCompositeOperatorName(e$1.op),
			filters: t
		} };
	}(e) : fail(54877, { filter: e });
}
function __PRIVATE_toDocumentMask(e) {
	const t = [];
	return e.fields.forEach(((e$1) => t.push(e$1.canonicalString()))), { fieldPaths: t };
}
function __PRIVATE_isValidResourceName(e) {
	return e.length >= 4 && "projects" === e.get(0) && "databases" === e.get(2);
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* An immutable set of metadata that the local store tracks for each target.
*/ var TargetData = class TargetData {
	constructor(e, t, n, r, i = SnapshotVersion.min(), s = SnapshotVersion.min(), o = ByteString.EMPTY_BYTE_STRING, _ = null) {
		this.target = e, this.targetId = t, this.purpose = n, this.sequenceNumber = r, this.snapshotVersion = i, this.lastLimboFreeSnapshotVersion = s, this.resumeToken = o, this.expectedCount = _;
	}
	/** Creates a new target data instance with an updated sequence number. */ withSequenceNumber(e) {
		return new TargetData(this.target, this.targetId, this.purpose, e, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken, this.expectedCount);
	}
	/**
	* Creates a new target data instance with an updated resume token and
	* snapshot version.
	*/ withResumeToken(e, t) {
		return new TargetData(this.target, this.targetId, this.purpose, this.sequenceNumber, t, this.lastLimboFreeSnapshotVersion, e, null);
	}
	/**
	* Creates a new target data instance with an updated expected count.
	*/ withExpectedCount(e) {
		return new TargetData(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken, e);
	}
	/**
	* Creates a new target data instance with an updated last limbo free
	* snapshot version number.
	*/ withLastLimboFreeSnapshotVersion(e) {
		return new TargetData(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, e, this.resumeToken, this.expectedCount);
	}
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/** Serializer for values stored in the LocalStore. */ var __PRIVATE_LocalSerializer = class {
	constructor(e) {
		this.yt = e;
	}
};
/** Decodes a remote document from storage locally to a Document. */ function __PRIVATE_fromDbRemoteDocument(e, t) {
	let n;
	if (t.document) n = __PRIVATE_fromDocument(e.yt, t.document, !!t.hasCommittedMutations);
	else if (t.noDocument) {
		const e$1 = DocumentKey.fromSegments(t.noDocument.path), r = __PRIVATE_fromDbTimestamp(t.noDocument.readTime);
		n = MutableDocument.newNoDocument(e$1, r), t.hasCommittedMutations && n.setHasCommittedMutations();
	} else {
		if (!t.unknownDocument) return fail(56709);
		{
			const e$1 = DocumentKey.fromSegments(t.unknownDocument.path), r = __PRIVATE_fromDbTimestamp(t.unknownDocument.version);
			n = MutableDocument.newUnknownDocument(e$1, r);
		}
	}
	return t.readTime && n.setReadTime(function __PRIVATE_fromDbTimestampKey(e$1) {
		const t$1 = new Timestamp(e$1[0], e$1[1]);
		return SnapshotVersion.fromTimestamp(t$1);
	}(t.readTime)), n;
}
/** Encodes a document for storage locally. */ function __PRIVATE_toDbRemoteDocument(e, t) {
	const n = t.key, r = {
		prefixPath: n.getCollectionPath().popLast().toArray(),
		collectionGroup: n.collectionGroup,
		documentId: n.path.lastSegment(),
		readTime: __PRIVATE_toDbTimestampKey(t.readTime),
		hasCommittedMutations: t.hasCommittedMutations
	};
	if (t.isFoundDocument()) r.document = function __PRIVATE_toDocument(e$1, t$1) {
		return {
			name: __PRIVATE_toName(e$1, t$1.key),
			fields: t$1.data.value.mapValue.fields,
			updateTime: toTimestamp(e$1, t$1.version.toTimestamp()),
			createTime: toTimestamp(e$1, t$1.createTime.toTimestamp())
		};
	}(e.yt, t);
	else if (t.isNoDocument()) r.noDocument = {
		path: n.path.toArray(),
		readTime: __PRIVATE_toDbTimestamp(t.version)
	};
	else {
		if (!t.isUnknownDocument()) return fail(57904, { document: t });
		r.unknownDocument = {
			path: n.path.toArray(),
			version: __PRIVATE_toDbTimestamp(t.version)
		};
	}
	return r;
}
function __PRIVATE_toDbTimestampKey(e) {
	const t = e.toTimestamp();
	return [t.seconds, t.nanoseconds];
}
function __PRIVATE_toDbTimestamp(e) {
	const t = e.toTimestamp();
	return {
		seconds: t.seconds,
		nanoseconds: t.nanoseconds
	};
}
function __PRIVATE_fromDbTimestamp(e) {
	const t = new Timestamp(e.seconds, e.nanoseconds);
	return SnapshotVersion.fromTimestamp(t);
}
/** Encodes a batch of mutations into a DbMutationBatch for local storage. */
/** Decodes a DbMutationBatch into a MutationBatch */
function __PRIVATE_fromDbMutationBatch(e, t) {
	const n = (t.baseMutations || []).map(((t$1) => __PRIVATE_fromMutation(e.yt, t$1)));
	for (let e$1 = 0; e$1 < t.mutations.length - 1; ++e$1) {
		const n$1 = t.mutations[e$1];
		if (e$1 + 1 < t.mutations.length && void 0 !== t.mutations[e$1 + 1].transform) n$1.updateTransforms = t.mutations[e$1 + 1].transform.fieldTransforms, t.mutations.splice(e$1 + 1, 1), ++e$1;
	}
	const r = t.mutations.map(((t$1) => __PRIVATE_fromMutation(e.yt, t$1))), i = Timestamp.fromMillis(t.localWriteTimeMs);
	return new MutationBatch(t.batchId, i, n, r);
}
/** Decodes a DbTarget into TargetData */ function __PRIVATE_fromDbTarget(e) {
	const t = __PRIVATE_fromDbTimestamp(e.readTime), n = void 0 !== e.lastLimboFreeSnapshotVersion ? __PRIVATE_fromDbTimestamp(e.lastLimboFreeSnapshotVersion) : SnapshotVersion.min();
	let r;
	return r = function __PRIVATE_isDocumentQuery(e$1) {
		return void 0 !== e$1.documents;
	}(e.query) ? function __PRIVATE_fromDocumentsTarget(e$1) {
		const t$1 = e$1.documents.length;
		return __PRIVATE_hardAssert(1 === t$1, 1966, { count: t$1 }), __PRIVATE_queryToTarget(__PRIVATE_newQueryForPath(__PRIVATE_fromQueryPath(e$1.documents[0])));
	}(e.query) : function __PRIVATE_fromQueryTarget(e$1) {
		return __PRIVATE_queryToTarget(__PRIVATE_convertQueryTargetToQuery(e$1));
	}(e.query), new TargetData(r, e.targetId, "TargetPurposeListen", e.lastListenSequenceNumber, t, n, ByteString.fromBase64String(e.resumeToken));
}
/** Encodes TargetData into a DbTarget for storage locally. */ function __PRIVATE_toDbTarget(e, t) {
	const n = __PRIVATE_toDbTimestamp(t.snapshotVersion), r = __PRIVATE_toDbTimestamp(t.lastLimboFreeSnapshotVersion);
	let i;
	i = __PRIVATE_targetIsDocumentTarget(t.target) ? __PRIVATE_toDocumentsTarget(e.yt, t.target) : __PRIVATE_toQueryTarget(e.yt, t.target).ft;
	const s = t.resumeToken.toBase64();
	return {
		targetId: t.targetId,
		canonicalId: __PRIVATE_canonifyTarget(t.target),
		readTime: n,
		resumeToken: s,
		lastListenSequenceNumber: t.sequenceNumber,
		lastLimboFreeSnapshotVersion: r,
		query: i
	};
}
/**
* Encodes a `BundledQuery` from bundle proto to a Query object.
*
* This reconstructs the original query used to build the bundle being loaded,
* including features exists only in SDKs (for example: limit-to-last).
*/
function __PRIVATE_fromBundledQuery(e) {
	const t = __PRIVATE_convertQueryTargetToQuery({
		parent: e.parent,
		structuredQuery: e.structuredQuery
	});
	return "LAST" === e.limitType ? __PRIVATE_queryWithLimit(t, t.limit, "L") : t;
}
/** Encodes a NamedQuery proto object to a NamedQuery model object. */
/** Encodes a DbDocumentOverlay object to an Overlay model object. */
function __PRIVATE_fromDbDocumentOverlay(e, t) {
	return new Overlay(t.largestBatchId, __PRIVATE_fromMutation(e.yt, t.overlayMutation));
}
/** Decodes an Overlay model object into a DbDocumentOverlay object. */
/**
* Returns the DbDocumentOverlayKey corresponding to the given user and
* document key.
*/
function __PRIVATE_toDbDocumentOverlayKey(e, t) {
	const n = t.path.lastSegment();
	return [
		e,
		__PRIVATE_encodeResourcePath(t.path.popLast()),
		n
	];
}
function __PRIVATE_toDbIndexState(e, t, n, r) {
	return {
		indexId: e,
		uid: t,
		sequenceNumber: n,
		readTime: __PRIVATE_toDbTimestamp(r.readTime),
		documentKey: __PRIVATE_encodeResourcePath(r.documentKey.path),
		largestBatchId: r.largestBatchId
	};
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ var __PRIVATE_IndexedDbBundleCache = class {
	getBundleMetadata(e, t) {
		return __PRIVATE_bundlesStore(e).get(t).next(((e$1) => {
			if (e$1) return function __PRIVATE_fromDbBundle(e$2) {
				return {
					id: e$2.bundleId,
					createTime: __PRIVATE_fromDbTimestamp(e$2.createTime),
					version: e$2.version
				};
			}(e$1);
		}));
	}
	saveBundleMetadata(e, t) {
		return __PRIVATE_bundlesStore(e).put(function __PRIVATE_toDbBundle(e$1) {
			return {
				bundleId: e$1.id,
				createTime: __PRIVATE_toDbTimestamp(__PRIVATE_fromVersion(e$1.createTime)),
				version: e$1.version
			};
		}(t));
	}
	getNamedQuery(e, t) {
		return __PRIVATE_namedQueriesStore(e).get(t).next(((e$1) => {
			if (e$1) return function __PRIVATE_fromDbNamedQuery(e$2) {
				return {
					name: e$2.name,
					query: __PRIVATE_fromBundledQuery(e$2.bundledQuery),
					readTime: __PRIVATE_fromDbTimestamp(e$2.readTime)
				};
			}(e$1);
		}));
	}
	saveNamedQuery(e, t) {
		return __PRIVATE_namedQueriesStore(e).put(function __PRIVATE_toDbNamedQuery(e$1) {
			return {
				name: e$1.name,
				readTime: __PRIVATE_toDbTimestamp(__PRIVATE_fromVersion(e$1.readTime)),
				bundledQuery: e$1.bundledQuery
			};
		}(t));
	}
};
/**
* Helper to get a typed SimpleDbStore for the bundles object store.
*/ function __PRIVATE_bundlesStore(e) {
	return __PRIVATE_getStore(e, be);
}
/**
* Helper to get a typed SimpleDbStore for the namedQueries object store.
*/ function __PRIVATE_namedQueriesStore(e) {
	return __PRIVATE_getStore(e, Ce);
}
/**
* @license
* Copyright 2022 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Implementation of DocumentOverlayCache using IndexedDb.
*/ var __PRIVATE_IndexedDbDocumentOverlayCache = class __PRIVATE_IndexedDbDocumentOverlayCache {
	/**
	* @param serializer - The document serializer.
	* @param userId - The userId for which we are accessing overlays.
	*/
	constructor(e, t) {
		this.serializer = e, this.userId = t;
	}
	static wt(e, t) {
		const n = t.uid || "";
		return new __PRIVATE_IndexedDbDocumentOverlayCache(e, n);
	}
	getOverlay(e, t) {
		return __PRIVATE_documentOverlayStore(e).get(__PRIVATE_toDbDocumentOverlayKey(this.userId, t)).next(((e$1) => e$1 ? __PRIVATE_fromDbDocumentOverlay(this.serializer, e$1) : null));
	}
	getOverlays(e, t) {
		const n = __PRIVATE_newOverlayMap();
		return PersistencePromise.forEach(t, ((t$1) => this.getOverlay(e, t$1).next(((e$1) => {
			null !== e$1 && n.set(t$1, e$1);
		})))).next((() => n));
	}
	saveOverlays(e, t, n) {
		const r = [];
		return n.forEach(((n$1, i) => {
			const s = new Overlay(t, i);
			r.push(this.St(e, s));
		})), PersistencePromise.waitFor(r);
	}
	removeOverlaysForBatchId(e, t, n) {
		const r = /* @__PURE__ */ new Set();
		t.forEach(((e$1) => r.add(__PRIVATE_encodeResourcePath(e$1.getCollectionPath()))));
		const i = [];
		return r.forEach(((t$1) => {
			const r$1 = IDBKeyRange.bound([
				this.userId,
				t$1,
				n
			], [
				this.userId,
				t$1,
				n + 1
			], !1, !0);
			i.push(__PRIVATE_documentOverlayStore(e).Z(Ge, r$1));
		})), PersistencePromise.waitFor(i);
	}
	getOverlaysForCollection(e, t, n) {
		const r = __PRIVATE_newOverlayMap(), i = __PRIVATE_encodeResourcePath(t), s = IDBKeyRange.bound([
			this.userId,
			i,
			n
		], [
			this.userId,
			i,
			Number.POSITIVE_INFINITY
		], !0);
		return __PRIVATE_documentOverlayStore(e).J(Ge, s).next(((e$1) => {
			for (const t$1 of e$1) {
				const e$2 = __PRIVATE_fromDbDocumentOverlay(this.serializer, t$1);
				r.set(e$2.getKey(), e$2);
			}
			return r;
		}));
	}
	getOverlaysForCollectionGroup(e, t, n, r) {
		const i = __PRIVATE_newOverlayMap();
		let s;
		const o = IDBKeyRange.bound([
			this.userId,
			t,
			n
		], [
			this.userId,
			t,
			Number.POSITIVE_INFINITY
		], !0);
		return __PRIVATE_documentOverlayStore(e).ee({
			index: je,
			range: o
		}, ((e$1, t$1, n$1) => {
			const o$1 = __PRIVATE_fromDbDocumentOverlay(this.serializer, t$1);
			i.size() < r || o$1.largestBatchId === s ? (i.set(o$1.getKey(), o$1), s = o$1.largestBatchId) : n$1.done();
		})).next((() => i));
	}
	St(e, t) {
		return __PRIVATE_documentOverlayStore(e).put(function __PRIVATE_toDbDocumentOverlay(e$1, t$1, n) {
			const [r, i, s] = __PRIVATE_toDbDocumentOverlayKey(t$1, n.mutation.key);
			return {
				userId: t$1,
				collectionPath: i,
				documentId: s,
				collectionGroup: n.mutation.key.getCollectionGroup(),
				largestBatchId: n.largestBatchId,
				overlayMutation: toMutation(e$1.yt, n.mutation)
			};
		}(this.serializer, this.userId, t));
	}
};
/**
* Helper to get a typed SimpleDbStore for the document overlay object store.
*/ function __PRIVATE_documentOverlayStore(e) {
	return __PRIVATE_getStore(e, Ke);
}
/**
* @license
* Copyright 2024 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ var __PRIVATE_IndexedDbGlobalsCache = class {
	bt(e) {
		return __PRIVATE_getStore(e, He);
	}
	getSessionToken(e) {
		return this.bt(e).get("sessionToken").next(((e$1) => {
			const t = e$1?.value;
			return t ? ByteString.fromUint8Array(t) : ByteString.EMPTY_BYTE_STRING;
		}));
	}
	setSessionToken(e, t) {
		return this.bt(e).put({
			name: "sessionToken",
			value: t.toUint8Array()
		});
	}
};
/**
* @license
* Copyright 2021 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/** Firestore index value writer.  */
var __PRIVATE_FirestoreIndexValueWriter = class {
	constructor() {}
	/** Writes an index value.  */
	Dt(e, t) {
		this.Ct(e, t), t.vt();
	}
	Ct(e, t) {
		if ("nullValue" in e) this.Ft(t, 5);
		else if ("booleanValue" in e) this.Ft(t, 10), t.Mt(e.booleanValue ? 1 : 0);
		else if ("integerValue" in e) this.Ft(t, 15), t.Mt(__PRIVATE_normalizeNumber(e.integerValue));
		else if ("doubleValue" in e) {
			const n = __PRIVATE_normalizeNumber(e.doubleValue);
			isNaN(n) ? this.Ft(t, 13) : (this.Ft(t, 15), __PRIVATE_isNegativeZero(n) ? t.Mt(0) : t.Mt(n));
		} else if ("timestampValue" in e) {
			let n = e.timestampValue;
			this.Ft(t, 20), "string" == typeof n && (n = __PRIVATE_normalizeTimestamp(n)), t.xt(`${n.seconds || ""}`), t.Mt(n.nanos || 0);
		} else if ("stringValue" in e) this.Ot(e.stringValue, t), this.Nt(t);
		else if ("bytesValue" in e) this.Ft(t, 30), t.Bt(__PRIVATE_normalizeByteString(e.bytesValue)), this.Nt(t);
		else if ("referenceValue" in e) this.Lt(e.referenceValue, t);
		else if ("geoPointValue" in e) {
			const n = e.geoPointValue;
			this.Ft(t, 45), t.Mt(n.latitude || 0), t.Mt(n.longitude || 0);
		} else "mapValue" in e ? __PRIVATE_isMaxValue(e) ? this.Ft(t, Number.MAX_SAFE_INTEGER) : __PRIVATE_isVectorValue(e) ? this.kt(e.mapValue, t) : (this.qt(e.mapValue, t), this.Nt(t)) : "arrayValue" in e ? (this.Qt(e.arrayValue, t), this.Nt(t)) : fail(19022, { $t: e });
	}
	Ot(e, t) {
		this.Ft(t, 25), this.Ut(e, t);
	}
	Ut(e, t) {
		t.xt(e);
	}
	qt(e, t) {
		const n = e.fields || {};
		this.Ft(t, 55);
		for (const e$1 of Object.keys(n)) this.Ot(e$1, t), this.Ct(n[e$1], t);
	}
	kt(e, t) {
		const n = e.fields || {};
		this.Ft(t, 53);
		const r = Et, i = n[r].arrayValue?.values?.length || 0;
		this.Ft(t, 15), t.Mt(__PRIVATE_normalizeNumber(i)), this.Ot(r, t), this.Ct(n[r], t);
	}
	Qt(e, t) {
		const n = e.values || [];
		this.Ft(t, 50);
		for (const e$1 of n) this.Ct(e$1, t);
	}
	Lt(e, t) {
		this.Ft(t, 37);
		DocumentKey.fromName(e).path.forEach(((e$1) => {
			this.Ft(t, 60), this.Ut(e$1, t);
		}));
	}
	Ft(e, t) {
		e.Mt(t);
	}
	Nt(e) {
		e.Mt(2);
	}
};
__PRIVATE_FirestoreIndexValueWriter.Kt = new __PRIVATE_FirestoreIndexValueWriter();
/**
* @license
* Copyright 2021 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law | agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES | CONDITIONS OF ANY KIND, either express | implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/** These constants are taken from the backend. */
var vt = 255;
/**
* Counts the number of zeros in a byte.
*
* Visible for testing.
*/
function __PRIVATE_numberOfLeadingZerosInByte(e) {
	if (0 === e) return 8;
	let t = 0;
	return e >> 4 || (t += 4, e <<= 4), e >> 6 || (t += 2, e <<= 2), e >> 7 || (t += 1), t;
}
/** Counts the number of leading zeros in the given byte array. */
/**
* Returns the number of bytes required to store "value". Leading zero bytes
* are skipped.
*/
function __PRIVATE_unsignedNumLength(e) {
	const t = 64 - function __PRIVATE_numberOfLeadingZeros(e$1) {
		let t$1 = 0;
		for (let n = 0; n < 8; ++n) {
			const r = __PRIVATE_numberOfLeadingZerosInByte(255 & e$1[n]);
			if (t$1 += r, 8 !== r) break;
		}
		return t$1;
	}(e);
	return Math.ceil(t / 8);
}
/**
* OrderedCodeWriter is a minimal-allocation implementation of the writing
* behavior defined by the backend.
*
* The code is ported from its Java counterpart.
*/ var __PRIVATE_OrderedCodeWriter = class {
	constructor() {
		this.buffer = new Uint8Array(1024), this.position = 0;
	}
	Wt(e) {
		const t = e[Symbol.iterator]();
		let n = t.next();
		for (; !n.done;) this.Gt(n.value), n = t.next();
		this.zt();
	}
	jt(e) {
		const t = e[Symbol.iterator]();
		let n = t.next();
		for (; !n.done;) this.Jt(n.value), n = t.next();
		this.Ht();
	}
	/** Writes utf8 bytes into this byte sequence, ascending. */ Yt(e) {
		for (const t of e) {
			const e$1 = t.charCodeAt(0);
			if (e$1 < 128) this.Gt(e$1);
			else if (e$1 < 2048) this.Gt(960 | e$1 >>> 6), this.Gt(128 | 63 & e$1);
			else if (t < "\ud800" || "\udbff" < t) this.Gt(480 | e$1 >>> 12), this.Gt(128 | 63 & e$1 >>> 6), this.Gt(128 | 63 & e$1);
			else {
				const e$2 = t.codePointAt(0);
				this.Gt(240 | e$2 >>> 18), this.Gt(128 | 63 & e$2 >>> 12), this.Gt(128 | 63 & e$2 >>> 6), this.Gt(128 | 63 & e$2);
			}
		}
		this.zt();
	}
	/** Writes utf8 bytes into this byte sequence, descending */ Zt(e) {
		for (const t of e) {
			const e$1 = t.charCodeAt(0);
			if (e$1 < 128) this.Jt(e$1);
			else if (e$1 < 2048) this.Jt(960 | e$1 >>> 6), this.Jt(128 | 63 & e$1);
			else if (t < "\ud800" || "\udbff" < t) this.Jt(480 | e$1 >>> 12), this.Jt(128 | 63 & e$1 >>> 6), this.Jt(128 | 63 & e$1);
			else {
				const e$2 = t.codePointAt(0);
				this.Jt(240 | e$2 >>> 18), this.Jt(128 | 63 & e$2 >>> 12), this.Jt(128 | 63 & e$2 >>> 6), this.Jt(128 | 63 & e$2);
			}
		}
		this.Ht();
	}
	Xt(e) {
		const t = this.en(e), n = __PRIVATE_unsignedNumLength(t);
		this.tn(1 + n), this.buffer[this.position++] = 255 & n;
		for (let e$1 = t.length - n; e$1 < t.length; ++e$1) this.buffer[this.position++] = 255 & t[e$1];
	}
	nn(e) {
		const t = this.en(e), n = __PRIVATE_unsignedNumLength(t);
		this.tn(1 + n), this.buffer[this.position++] = ~(255 & n);
		for (let e$1 = t.length - n; e$1 < t.length; ++e$1) this.buffer[this.position++] = ~(255 & t[e$1]);
	}
	/**
	* Writes the "infinity" byte sequence that sorts after all other byte
	* sequences written in ascending order.
	*/ rn() {
		this.sn(vt), this.sn(255);
	}
	/**
	* Writes the "infinity" byte sequence that sorts before all other byte
	* sequences written in descending order.
	*/ _n() {
		this.an(vt), this.an(255);
	}
	/**
	* Resets the buffer such that it is the same as when it was newly
	* constructed.
	*/ reset() {
		this.position = 0;
	}
	seed(e) {
		this.tn(e.length), this.buffer.set(e, this.position), this.position += e.length;
	}
	/** Makes a copy of the encoded bytes in this buffer.  */ un() {
		return this.buffer.slice(0, this.position);
	}
	/**
	* Encodes `val` into an encoding so that the order matches the IEEE 754
	* floating-point comparison results with the following exceptions:
	*   -0.0 < 0.0
	*   all non-NaN < NaN
	*   NaN = NaN
	*/ en(e) {
		const t = function __PRIVATE_doubleToLongBits(e$1) {
			const t$1 = /* @__PURE__ */ new DataView(/* @__PURE__ */ new ArrayBuffer(8));
			return t$1.setFloat64(0, e$1, !1), new Uint8Array(t$1.buffer);
		}(e), n = !!(128 & t[0]);
		t[0] ^= n ? 255 : 128;
		for (let e$1 = 1; e$1 < t.length; ++e$1) t[e$1] ^= n ? 255 : 0;
		return t;
	}
	/** Writes a single byte ascending to the buffer. */ Gt(e) {
		const t = 255 & e;
		0 === t ? (this.sn(0), this.sn(255)) : t === vt ? (this.sn(vt), this.sn(0)) : this.sn(t);
	}
	/** Writes a single byte descending to the buffer.  */ Jt(e) {
		const t = 255 & e;
		0 === t ? (this.an(0), this.an(255)) : t === vt ? (this.an(vt), this.an(0)) : this.an(e);
	}
	zt() {
		this.sn(0), this.sn(1);
	}
	Ht() {
		this.an(0), this.an(1);
	}
	sn(e) {
		this.tn(1), this.buffer[this.position++] = e;
	}
	an(e) {
		this.tn(1), this.buffer[this.position++] = ~e;
	}
	tn(e) {
		const t = e + this.position;
		if (t <= this.buffer.length) return;
		let n = 2 * this.buffer.length;
		n < t && (n = t);
		const r = new Uint8Array(n);
		r.set(this.buffer), this.buffer = r;
	}
};
var __PRIVATE_AscendingIndexByteEncoder = class {
	constructor(e) {
		this.cn = e;
	}
	Bt(e) {
		this.cn.Wt(e);
	}
	xt(e) {
		this.cn.Yt(e);
	}
	Mt(e) {
		this.cn.Xt(e);
	}
	vt() {
		this.cn.rn();
	}
};
var __PRIVATE_DescendingIndexByteEncoder = class {
	constructor(e) {
		this.cn = e;
	}
	Bt(e) {
		this.cn.jt(e);
	}
	xt(e) {
		this.cn.Zt(e);
	}
	Mt(e) {
		this.cn.nn(e);
	}
	vt() {
		this.cn._n();
	}
};
/**
* Implements `DirectionalIndexByteEncoder` using `OrderedCodeWriter` for the
* actual encoding.
*/ var __PRIVATE_IndexByteEncoder = class {
	constructor() {
		this.cn = new __PRIVATE_OrderedCodeWriter(), this.ln = new __PRIVATE_AscendingIndexByteEncoder(this.cn), this.hn = new __PRIVATE_DescendingIndexByteEncoder(this.cn);
	}
	seed(e) {
		this.cn.seed(e);
	}
	Pn(e) {
		return 0 === e ? this.ln : this.hn;
	}
	un() {
		return this.cn.un();
	}
	reset() {
		this.cn.reset();
	}
};
/**
* @license
* Copyright 2022 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/** Represents an index entry saved by the SDK in persisted storage. */ var __PRIVATE_IndexEntry = class __PRIVATE_IndexEntry {
	constructor(e, t, n, r) {
		this.Tn = e, this.In = t, this.En = n, this.dn = r;
	}
	/**
	* Returns an IndexEntry entry that sorts immediately after the current
	* directional value.
	*/ An() {
		const e = this.dn.length, t = 0 === e || 255 === this.dn[e - 1] ? e + 1 : e, n = new Uint8Array(t);
		return n.set(this.dn, 0), t !== e ? n.set([0], this.dn.length) : ++n[n.length - 1], new __PRIVATE_IndexEntry(this.Tn, this.In, this.En, n);
	}
	Rn(e, t, n) {
		return {
			indexId: this.Tn,
			uid: e,
			arrayValue: __PRIVATE_encodeKeySafeBytes(this.En),
			directionalValue: __PRIVATE_encodeKeySafeBytes(this.dn),
			orderedDocumentKey: __PRIVATE_encodeKeySafeBytes(t),
			documentKey: n.path.toArray()
		};
	}
	Vn(e, t, n) {
		const r = this.Rn(e, t, n);
		return [
			r.indexId,
			r.uid,
			r.arrayValue,
			r.directionalValue,
			r.orderedDocumentKey,
			r.documentKey
		];
	}
};
function __PRIVATE_indexEntryComparator(e, t) {
	let n = e.Tn - t.Tn;
	return 0 !== n ? n : (n = __PRIVATE_compareByteArrays(e.En, t.En), 0 !== n ? n : (n = __PRIVATE_compareByteArrays(e.dn, t.dn), 0 !== n ? n : DocumentKey.comparator(e.In, t.In)));
}
function __PRIVATE_compareByteArrays(e, t) {
	for (let n = 0; n < e.length && n < t.length; ++n) {
		const r = e[n] - t[n];
		if (0 !== r) return r;
	}
	return e.length - t.length;
}
/**
* Workaround for WebKit bug: https://bugs.webkit.org/show_bug.cgi?id=292721
* Create a key safe representation of Uint8Array values.
* If the browser is detected as Safari or WebKit, then
* the input array will be converted to "sortable byte string".
* Otherwise, the input array will be returned in its original type.
*/ function __PRIVATE_encodeKeySafeBytes(e) {
	return isSafariOrWebkit() ? function __PRIVATE_encodeUint8ArrayToSortableString(e$1) {
		let t = "";
		for (let n = 0; n < e$1.length; n++) t += String.fromCharCode(e$1[n]);
		return t;
	}(e) : e;
}
/**
* Reverts the key safe representation of Uint8Array (created by
* encodeKeySafeBytes) to a normal Uint8Array.
*/ function __PRIVATE_decodeKeySafeBytes(e) {
	return "string" != typeof e ? e : function __PRIVATE_decodeSortableStringToUint8Array(e$1) {
		const t = new Uint8Array(e$1.length);
		for (let n = 0; n < e$1.length; n++) t[n] = e$1.charCodeAt(n);
		return t;
	}(e);
}
var __PRIVATE_TargetIndexMatcher = class {
	constructor(e) {
		this.mn = new SortedSet(((e$1, t) => FieldPath$1.comparator(e$1.field, t.field))), this.collectionId = null != e.collectionGroup ? e.collectionGroup : e.path.lastSegment(), this.fn = e.orderBy, this.gn = [];
		for (const t of e.filters) {
			const e$1 = t;
			e$1.isInequality() ? this.mn = this.mn.add(e$1) : this.gn.push(e$1);
		}
	}
	get pn() {
		return this.mn.size > 1;
	}
	/**
	* Returns whether the index can be used to serve the TargetIndexMatcher's
	* target.
	*
	* An index is considered capable of serving the target when:
	* - The target uses all index segments for its filters and orderBy clauses.
	*   The target can have additional filter and orderBy clauses, but not
	*   fewer.
	* - If an ArrayContains/ArrayContainsAnyfilter is used, the index must also
	*   have a corresponding `CONTAINS` segment.
	* - All directional index segments can be mapped to the target as a series of
	*   equality filters, a single inequality filter and a series of orderBy
	*   clauses.
	* - The segments that represent the equality filters may appear out of order.
	* - The optional segment for the inequality filter must appear after all
	*   equality segments.
	* - The segments that represent that orderBy clause of the target must appear
	*   in order after all equality and inequality segments. Single orderBy
	*   clauses cannot be skipped, but a continuous orderBy suffix may be
	*   omitted.
	*/ yn(e) {
		if (__PRIVATE_hardAssert(e.collectionGroup === this.collectionId, 49279), this.pn) return !1;
		const t = __PRIVATE_fieldIndexGetArraySegment(e);
		if (void 0 !== t && !this.wn(t)) return !1;
		const n = __PRIVATE_fieldIndexGetDirectionalSegments(e);
		let r = /* @__PURE__ */ new Set(), i = 0, s = 0;
		for (; i < n.length && this.wn(n[i]); ++i) r = r.add(n[i].fieldPath.canonicalString());
		if (i === n.length) return !0;
		if (this.mn.size > 0) {
			const e$1 = this.mn.getIterator().getNext();
			if (!r.has(e$1.field.canonicalString())) {
				const t$1 = n[i];
				if (!this.Sn(e$1, t$1) || !this.bn(this.fn[s++], t$1)) return !1;
			}
			++i;
		}
		for (; i < n.length; ++i) {
			const e$1 = n[i];
			if (s >= this.fn.length || !this.bn(this.fn[s++], e$1)) return !1;
		}
		return !0;
	}
	/**
	* Returns a full matched field index for this target. Currently multiple
	* inequality query is not supported so function returns null.
	*/ Dn() {
		if (this.pn) return null;
		let e = new SortedSet(FieldPath$1.comparator);
		const t = [];
		for (const n of this.gn) {
			if (n.field.isKeyField()) continue;
			if ("array-contains" === n.op || "array-contains-any" === n.op) t.push(new IndexSegment(n.field, 2));
			else {
				if (e.has(n.field)) continue;
				e = e.add(n.field), t.push(new IndexSegment(n.field, 0));
			}
		}
		for (const n of this.fn) n.field.isKeyField() || e.has(n.field) || (e = e.add(n.field), t.push(new IndexSegment(n.field, "asc" === n.dir ? 0 : 1)));
		return new FieldIndex(FieldIndex.UNKNOWN_ID, this.collectionId, t, IndexState.empty());
	}
	wn(e) {
		for (const t of this.gn) if (this.Sn(t, e)) return !0;
		return !1;
	}
	Sn(e, t) {
		if (void 0 === e || !e.field.isEqual(t.fieldPath)) return !1;
		const n = "array-contains" === e.op || "array-contains-any" === e.op;
		return 2 === t.kind === n;
	}
	bn(e, t) {
		return !!e.field.isEqual(t.fieldPath) && (0 === t.kind && "asc" === e.dir || 1 === t.kind && "desc" === e.dir);
	}
};
/**
* @license
* Copyright 2022 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Provides utility functions that help with boolean logic transformations needed for handling
* complex filters used in queries.
*/
/**
* The `in` filter is only a syntactic sugar over a disjunction of equalities. For instance: `a in
* [1,2,3]` is in fact `a==1 || a==2 || a==3`. This method expands any `in` filter in the given
* input into a disjunction of equality filters and returns the expanded filter.
*/ function __PRIVATE_computeInExpansion(e) {
	if (__PRIVATE_hardAssert(e instanceof FieldFilter || e instanceof CompositeFilter, 20012), e instanceof FieldFilter) {
		if (e instanceof __PRIVATE_InFilter) {
			const t$1 = e.value.arrayValue?.values?.map(((t$2) => FieldFilter.create(e.field, "==", t$2))) || [];
			return CompositeFilter.create(t$1, "or");
		}
		return e;
	}
	const t = e.filters.map(((e$1) => __PRIVATE_computeInExpansion(e$1)));
	return CompositeFilter.create(t, e.op);
}
/**
* Given a composite filter, returns the list of terms in its disjunctive normal form.
*
* <p>Each element in the return value is one term of the resulting DNF. For instance: For the
* input: (A || B) && C, the DNF form is: (A && C) || (B && C), and the return value is a list
* with two elements: a composite filter that performs (A && C), and a composite filter that
* performs (B && C).
*
* @param filter the composite filter to calculate DNF transform for.
* @return the terms in the DNF transform.
*/ function __PRIVATE_getDnfTerms(e) {
	if (0 === e.getFilters().length) return [];
	const t = __PRIVATE_computeDistributedNormalForm(__PRIVATE_computeInExpansion(e));
	return __PRIVATE_hardAssert(__PRIVATE_isDisjunctiveNormalForm(t), 7391), __PRIVATE_isSingleFieldFilter(t) || __PRIVATE_isFlatConjunction(t) ? [t] : t.getFilters();
}
/** Returns true if the given filter is a single field filter. e.g. (a == 10). */ function __PRIVATE_isSingleFieldFilter(e) {
	return e instanceof FieldFilter;
}
/**
* Returns true if the given filter is the conjunction of one or more field filters. e.g. (a == 10
* && b == 20)
*/ function __PRIVATE_isFlatConjunction(e) {
	return e instanceof CompositeFilter && __PRIVATE_compositeFilterIsFlatConjunction(e);
}
/**
* Returns whether or not the given filter is in disjunctive normal form (DNF).
*
* <p>In boolean logic, a disjunctive normal form (DNF) is a canonical normal form of a logical
* formula consisting of a disjunction of conjunctions; it can also be described as an OR of ANDs.
*
* <p>For more info, visit: https://en.wikipedia.org/wiki/Disjunctive_normal_form
*/ function __PRIVATE_isDisjunctiveNormalForm(e) {
	return __PRIVATE_isSingleFieldFilter(e) || __PRIVATE_isFlatConjunction(e) || function __PRIVATE_isDisjunctionOfFieldFiltersAndFlatConjunctions(e$1) {
		if (e$1 instanceof CompositeFilter && __PRIVATE_compositeFilterIsDisjunction(e$1)) {
			for (const t of e$1.getFilters()) if (!__PRIVATE_isSingleFieldFilter(t) && !__PRIVATE_isFlatConjunction(t)) return !1;
			return !0;
		}
		return !1;
	}(e);
}
function __PRIVATE_computeDistributedNormalForm(e) {
	if (__PRIVATE_hardAssert(e instanceof FieldFilter || e instanceof CompositeFilter, 34018), e instanceof FieldFilter) return e;
	if (1 === e.filters.length) return __PRIVATE_computeDistributedNormalForm(e.filters[0]);
	const t = e.filters.map(((e$1) => __PRIVATE_computeDistributedNormalForm(e$1)));
	let n = CompositeFilter.create(t, e.op);
	return n = __PRIVATE_applyAssociation(n), __PRIVATE_isDisjunctiveNormalForm(n) ? n : (__PRIVATE_hardAssert(n instanceof CompositeFilter, 64498), __PRIVATE_hardAssert(__PRIVATE_compositeFilterIsConjunction(n), 40251), __PRIVATE_hardAssert(n.filters.length > 1, 57927), n.filters.reduce(((e$1, t$1) => __PRIVATE_applyDistribution(e$1, t$1))));
}
function __PRIVATE_applyDistribution(e, t) {
	let n;
	return __PRIVATE_hardAssert(e instanceof FieldFilter || e instanceof CompositeFilter, 38388), __PRIVATE_hardAssert(t instanceof FieldFilter || t instanceof CompositeFilter, 25473), n = e instanceof FieldFilter ? t instanceof FieldFilter ? function __PRIVATE_applyDistributionFieldFilters(e$1, t$1) {
		return CompositeFilter.create([e$1, t$1], "and");
	}(e, t) : __PRIVATE_applyDistributionFieldAndCompositeFilters(e, t) : t instanceof FieldFilter ? __PRIVATE_applyDistributionFieldAndCompositeFilters(t, e) : function __PRIVATE_applyDistributionCompositeFilters(e$1, t$1) {
		if (__PRIVATE_hardAssert(e$1.filters.length > 0 && t$1.filters.length > 0, 48005), __PRIVATE_compositeFilterIsConjunction(e$1) && __PRIVATE_compositeFilterIsConjunction(t$1)) return __PRIVATE_compositeFilterWithAddedFilters(e$1, t$1.getFilters());
		const n$1 = __PRIVATE_compositeFilterIsDisjunction(e$1) ? e$1 : t$1, r = __PRIVATE_compositeFilterIsDisjunction(e$1) ? t$1 : e$1, i = n$1.filters.map(((e$2) => __PRIVATE_applyDistribution(e$2, r)));
		return CompositeFilter.create(i, "or");
	}(e, t), __PRIVATE_applyAssociation(n);
}
function __PRIVATE_applyDistributionFieldAndCompositeFilters(e, t) {
	if (__PRIVATE_compositeFilterIsConjunction(t)) return __PRIVATE_compositeFilterWithAddedFilters(t, e.getFilters());
	{
		const n = t.filters.map(((t$1) => __PRIVATE_applyDistribution(e, t$1)));
		return CompositeFilter.create(n, "or");
	}
}
/**
* Applies the associativity property to the given filter and returns the resulting filter.
*
* <ul>
*   <li>A | (B | C) == (A | B) | C == (A | B | C)
*   <li>A & (B & C) == (A & B) & C == (A & B & C)
* </ul>
*
* <p>For more info, visit: https://en.wikipedia.org/wiki/Associative_property#Propositional_logic
*/ function __PRIVATE_applyAssociation(e) {
	if (__PRIVATE_hardAssert(e instanceof FieldFilter || e instanceof CompositeFilter, 11850), e instanceof FieldFilter) return e;
	const t = e.getFilters();
	if (1 === t.length) return __PRIVATE_applyAssociation(t[0]);
	if (__PRIVATE_compositeFilterIsFlat(e)) return e;
	const n = t.map(((e$1) => __PRIVATE_applyAssociation(e$1))), r = [];
	return n.forEach(((t$1) => {
		t$1 instanceof FieldFilter ? r.push(t$1) : t$1 instanceof CompositeFilter && (t$1.op === e.op ? r.push(...t$1.filters) : r.push(t$1));
	})), 1 === r.length ? r[0] : CompositeFilter.create(r, e.op);
}
/**
* @license
* Copyright 2019 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* An in-memory implementation of IndexManager.
*/ var __PRIVATE_MemoryIndexManager = class {
	constructor() {
		this.Cn = new __PRIVATE_MemoryCollectionParentIndex();
	}
	addToCollectionParentIndex(e, t) {
		return this.Cn.add(t), PersistencePromise.resolve();
	}
	getCollectionParents(e, t) {
		return PersistencePromise.resolve(this.Cn.getEntries(t));
	}
	addFieldIndex(e, t) {
		return PersistencePromise.resolve();
	}
	deleteFieldIndex(e, t) {
		return PersistencePromise.resolve();
	}
	deleteAllFieldIndexes(e) {
		return PersistencePromise.resolve();
	}
	createTargetIndexes(e, t) {
		return PersistencePromise.resolve();
	}
	getDocumentsMatchingTarget(e, t) {
		return PersistencePromise.resolve(null);
	}
	getIndexType(e, t) {
		return PersistencePromise.resolve(0);
	}
	getFieldIndexes(e, t) {
		return PersistencePromise.resolve([]);
	}
	getNextCollectionGroupToUpdate(e) {
		return PersistencePromise.resolve(null);
	}
	getMinOffset(e, t) {
		return PersistencePromise.resolve(IndexOffset.min());
	}
	getMinOffsetFromCollectionGroup(e, t) {
		return PersistencePromise.resolve(IndexOffset.min());
	}
	updateCollectionGroup(e, t, n) {
		return PersistencePromise.resolve();
	}
	updateIndexEntries(e, t) {
		return PersistencePromise.resolve();
	}
};
/**
* Internal implementation of the collection-parent index exposed by MemoryIndexManager.
* Also used for in-memory caching by IndexedDbIndexManager and initial index population
* in indexeddb_schema.ts
*/ var __PRIVATE_MemoryCollectionParentIndex = class {
	constructor() {
		this.index = {};
	}
	add(e) {
		const t = e.lastSegment(), n = e.popLast(), r = this.index[t] || new SortedSet(ResourcePath.comparator), i = !r.has(n);
		return this.index[t] = r.add(n), i;
	}
	has(e) {
		const t = e.lastSegment(), n = e.popLast(), r = this.index[t];
		return r && r.has(n);
	}
	getEntries(e) {
		return (this.index[e] || new SortedSet(ResourcePath.comparator)).toArray();
	}
};
/**
* @license
* Copyright 2019 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ var Ft = "IndexedDbIndexManager", Mt = new Uint8Array(0);
/**
* A persisted implementation of IndexManager.
*
* PORTING NOTE: Unlike iOS and Android, the Web SDK does not memoize index
* data as it supports multi-tab access.
*/
var __PRIVATE_IndexedDbIndexManager = class {
	constructor(e, t) {
		this.databaseId = t, this.vn = new __PRIVATE_MemoryCollectionParentIndex(), this.Fn = new ObjectMap(((e$1) => __PRIVATE_canonifyTarget(e$1)), ((e$1, t$1) => __PRIVATE_targetEquals(e$1, t$1))), this.uid = e.uid || "";
	}
	/**
	* Adds a new entry to the collection parent index.
	*
	* Repeated calls for the same collectionPath should be avoided within a
	* transaction as IndexedDbIndexManager only caches writes once a transaction
	* has been committed.
	*/ addToCollectionParentIndex(e, t) {
		if (!this.vn.has(t)) {
			const n = t.lastSegment(), r = t.popLast();
			e.addOnCommittedListener((() => {
				this.vn.add(t);
			}));
			const i = {
				collectionId: n,
				parent: __PRIVATE_encodeResourcePath(r)
			};
			return __PRIVATE_collectionParentsStore(e).put(i);
		}
		return PersistencePromise.resolve();
	}
	getCollectionParents(e, t) {
		const n = [], r = IDBKeyRange.bound([t, ""], [__PRIVATE_immediateSuccessor(t), ""], !1, !0);
		return __PRIVATE_collectionParentsStore(e).J(r).next(((e$1) => {
			for (const r$1 of e$1) {
				if (r$1.collectionId !== t) break;
				n.push(__PRIVATE_decodeResourcePath(r$1.parent));
			}
			return n;
		}));
	}
	addFieldIndex(e, t) {
		const n = __PRIVATE_indexConfigurationStore(e), r = function __PRIVATE_toDbIndexConfiguration(e$1) {
			return {
				indexId: e$1.indexId,
				collectionGroup: e$1.collectionGroup,
				fields: e$1.fields.map(((e$2) => [e$2.fieldPath.canonicalString(), e$2.kind]))
			};
		}(t);
		delete r.indexId;
		const i = n.add(r);
		if (t.indexState) {
			const n$1 = __PRIVATE_indexStateStore(e);
			return i.next(((e$1) => {
				n$1.put(__PRIVATE_toDbIndexState(e$1, this.uid, t.indexState.sequenceNumber, t.indexState.offset));
			}));
		}
		return i.next();
	}
	deleteFieldIndex(e, t) {
		const n = __PRIVATE_indexConfigurationStore(e), r = __PRIVATE_indexStateStore(e), i = __PRIVATE_indexEntriesStore(e);
		return n.delete(t.indexId).next((() => r.delete(IDBKeyRange.bound([t.indexId], [t.indexId + 1], !1, !0)))).next((() => i.delete(IDBKeyRange.bound([t.indexId], [t.indexId + 1], !1, !0))));
	}
	deleteAllFieldIndexes(e) {
		const t = __PRIVATE_indexConfigurationStore(e), n = __PRIVATE_indexEntriesStore(e), r = __PRIVATE_indexStateStore(e);
		return t.Z().next((() => n.Z())).next((() => r.Z()));
	}
	createTargetIndexes(e, t) {
		return PersistencePromise.forEach(this.Mn(t), ((t$1) => this.getIndexType(e, t$1).next(((n) => {
			if (0 === n || 1 === n) {
				const n$1 = new __PRIVATE_TargetIndexMatcher(t$1).Dn();
				if (null != n$1) return this.addFieldIndex(e, n$1);
			}
		}))));
	}
	getDocumentsMatchingTarget(e, t) {
		const n = __PRIVATE_indexEntriesStore(e);
		let r = !0;
		const i = /* @__PURE__ */ new Map();
		return PersistencePromise.forEach(this.Mn(t), ((t$1) => this.xn(e, t$1).next(((e$1) => {
			r && (r = !!e$1), i.set(t$1, e$1);
		})))).next((() => {
			if (r) {
				let e$1 = __PRIVATE_documentKeySet();
				const r$1 = [];
				return PersistencePromise.forEach(i, ((i$1, s) => {
					__PRIVATE_logDebug(Ft, `Using index ${function __PRIVATE_fieldIndexToString(e$2) {
						return `id=${e$2.indexId}|cg=${e$2.collectionGroup}|f=${e$2.fields.map(((e$3) => `${e$3.fieldPath}:${e$3.kind}`)).join(",")}`;
					}(i$1)} to execute ${__PRIVATE_canonifyTarget(t)}`);
					const o = function __PRIVATE_targetGetArrayValues(e$2, t$1) {
						const n$1 = __PRIVATE_fieldIndexGetArraySegment(t$1);
						if (void 0 === n$1) return null;
						for (const t$2 of __PRIVATE_targetGetFieldFiltersForPath(e$2, n$1.fieldPath)) switch (t$2.op) {
							case "array-contains-any": return t$2.value.arrayValue.values || [];
							case "array-contains": return [t$2.value];
						}
						return null;
					}(s, i$1), _ = function __PRIVATE_targetGetNotInValues(e$2, t$1) {
						const n$1 = /* @__PURE__ */ new Map();
						for (const r$2 of __PRIVATE_fieldIndexGetDirectionalSegments(t$1)) for (const t$2 of __PRIVATE_targetGetFieldFiltersForPath(e$2, r$2.fieldPath)) switch (t$2.op) {
							case "==":
							case "in":
								n$1.set(r$2.fieldPath.canonicalString(), t$2.value);
								break;
							case "not-in":
							case "!=": return n$1.set(r$2.fieldPath.canonicalString(), t$2.value), Array.from(n$1.values());
						}
						return null;
					}(s, i$1), a = function __PRIVATE_targetGetLowerBound(e$2, t$1) {
						const n$1 = [];
						let r$2 = !0;
						for (const i$2 of __PRIVATE_fieldIndexGetDirectionalSegments(t$1)) {
							const t$2 = 0 === i$2.kind ? __PRIVATE_targetGetAscendingBound(e$2, i$2.fieldPath, e$2.startAt) : __PRIVATE_targetGetDescendingBound(e$2, i$2.fieldPath, e$2.startAt);
							n$1.push(t$2.value), r$2 && (r$2 = t$2.inclusive);
						}
						return new Bound(n$1, r$2);
					}(s, i$1), u = function __PRIVATE_targetGetUpperBound(e$2, t$1) {
						const n$1 = [];
						let r$2 = !0;
						for (const i$2 of __PRIVATE_fieldIndexGetDirectionalSegments(t$1)) {
							const t$2 = 0 === i$2.kind ? __PRIVATE_targetGetDescendingBound(e$2, i$2.fieldPath, e$2.endAt) : __PRIVATE_targetGetAscendingBound(e$2, i$2.fieldPath, e$2.endAt);
							n$1.push(t$2.value), r$2 && (r$2 = t$2.inclusive);
						}
						return new Bound(n$1, r$2);
					}(s, i$1), c = this.On(i$1, s, a), l = this.On(i$1, s, u), h = this.Nn(i$1, s, _), P = this.Bn(i$1.indexId, o, c, a.inclusive, l, u.inclusive, h);
					return PersistencePromise.forEach(P, ((i$2) => n.Y(i$2, t.limit).next(((t$1) => {
						t$1.forEach(((t$2) => {
							const n$1 = DocumentKey.fromSegments(t$2.documentKey);
							e$1.has(n$1) || (e$1 = e$1.add(n$1), r$1.push(n$1));
						}));
					}))));
				})).next((() => r$1));
			}
			return PersistencePromise.resolve(null);
		}));
	}
	Mn(e) {
		let t = this.Fn.get(e);
		if (t) return t;
		if (0 === e.filters.length) t = [e];
		else t = __PRIVATE_getDnfTerms(CompositeFilter.create(e.filters, "and")).map(((t$1) => __PRIVATE_newTarget(e.path, e.collectionGroup, e.orderBy, t$1.getFilters(), e.limit, e.startAt, e.endAt)));
		return this.Fn.set(e, t), t;
	}
	/**
	* Constructs a key range query on `DbIndexEntryStore` that unions all
	* bounds.
	*/ Bn(e, t, n, r, i, s, o) {
		const _ = (null != t ? t.length : 1) * Math.max(n.length, i.length), a = _ / (null != t ? t.length : 1), u = [];
		for (let c = 0; c < _; ++c) {
			const _$1 = t ? this.Ln(t[c / a]) : Mt, l = this.kn(e, _$1, n[c % a], r), h = this.qn(e, _$1, i[c % a], s), P = o.map(((t$1) => this.kn(e, _$1, t$1, !0)));
			u.push(...this.createRange(l, h, P));
		}
		return u;
	}
	/** Generates the lower bound for `arrayValue` and `directionalValue`. */ kn(e, t, n, r) {
		const i = new __PRIVATE_IndexEntry(e, DocumentKey.empty(), t, n);
		return r ? i : i.An();
	}
	/** Generates the upper bound for `arrayValue` and `directionalValue`. */ qn(e, t, n, r) {
		const i = new __PRIVATE_IndexEntry(e, DocumentKey.empty(), t, n);
		return r ? i.An() : i;
	}
	xn(e, t) {
		const n = new __PRIVATE_TargetIndexMatcher(t), r = null != t.collectionGroup ? t.collectionGroup : t.path.lastSegment();
		return this.getFieldIndexes(e, r).next(((e$1) => {
			let t$1 = null;
			for (const r$1 of e$1) n.yn(r$1) && (!t$1 || r$1.fields.length > t$1.fields.length) && (t$1 = r$1);
			return t$1;
		}));
	}
	getIndexType(e, t) {
		let n = 2;
		const r = this.Mn(t);
		return PersistencePromise.forEach(r, ((t$1) => this.xn(e, t$1).next(((e$1) => {
			e$1 ? 0 !== n && e$1.fields.length < function __PRIVATE_targetGetSegmentCount(e$2) {
				let t$2 = new SortedSet(FieldPath$1.comparator), n$1 = !1;
				for (const r$1 of e$2.filters) for (const e$3 of r$1.getFlattenedFilters()) e$3.field.isKeyField() || ("array-contains" === e$3.op || "array-contains-any" === e$3.op ? n$1 = !0 : t$2 = t$2.add(e$3.field));
				for (const n$2 of e$2.orderBy) n$2.field.isKeyField() || (t$2 = t$2.add(n$2.field));
				return t$2.size + (n$1 ? 1 : 0);
			}(t$1) && (n = 1) : n = 0;
		})))).next((() => function __PRIVATE_targetHasLimit(e$1) {
			return null !== e$1.limit;
		}(t) && r.length > 1 && 2 === n ? 1 : n));
	}
	/**
	* Returns the byte encoded form of the directional values in the field index.
	* Returns `null` if the document does not have all fields specified in the
	* index.
	*/ Qn(e, t) {
		const n = new __PRIVATE_IndexByteEncoder();
		for (const r of __PRIVATE_fieldIndexGetDirectionalSegments(e)) {
			const e$1 = t.data.field(r.fieldPath);
			if (null == e$1) return null;
			const i = n.Pn(r.kind);
			__PRIVATE_FirestoreIndexValueWriter.Kt.Dt(e$1, i);
		}
		return n.un();
	}
	/** Encodes a single value to the ascending index format. */ Ln(e) {
		const t = new __PRIVATE_IndexByteEncoder();
		return __PRIVATE_FirestoreIndexValueWriter.Kt.Dt(e, t.Pn(0)), t.un();
	}
	/**
	* Returns an encoded form of the document key that sorts based on the key
	* ordering of the field index.
	*/ $n(e, t) {
		const n = new __PRIVATE_IndexByteEncoder();
		return __PRIVATE_FirestoreIndexValueWriter.Kt.Dt(__PRIVATE_refValue(this.databaseId, t), n.Pn(function __PRIVATE_fieldIndexGetKeyOrder(e$1) {
			const t$1 = __PRIVATE_fieldIndexGetDirectionalSegments(e$1);
			return 0 === t$1.length ? 0 : t$1[t$1.length - 1].kind;
		}(e))), n.un();
	}
	/**
	* Encodes the given field values according to the specification in `target`.
	* For IN queries, a list of possible values is returned.
	*/ Nn(e, t, n) {
		if (null === n) return [];
		let r = [];
		r.push(new __PRIVATE_IndexByteEncoder());
		let i = 0;
		for (const s of __PRIVATE_fieldIndexGetDirectionalSegments(e)) {
			const e$1 = n[i++];
			for (const n$1 of r) if (this.Un(t, s.fieldPath) && isArray(e$1)) r = this.Kn(r, s, e$1);
			else {
				const t$1 = n$1.Pn(s.kind);
				__PRIVATE_FirestoreIndexValueWriter.Kt.Dt(e$1, t$1);
			}
		}
		return this.Wn(r);
	}
	/**
	* Encodes the given bounds according to the specification in `target`. For IN
	* queries, a list of possible values is returned.
	*/ On(e, t, n) {
		return this.Nn(e, t, n.position);
	}
	/** Returns the byte representation for the provided encoders. */ Wn(e) {
		const t = [];
		for (let n = 0; n < e.length; ++n) t[n] = e[n].un();
		return t;
	}
	/**
	* Creates a separate encoder for each element of an array.
	*
	* The method appends each value to all existing encoders (e.g. filter("a",
	* "==", "a1").filter("b", "in", ["b1", "b2"]) becomes ["a1,b1", "a1,b2"]). A
	* list of new encoders is returned.
	*/ Kn(e, t, n) {
		const r = [...e], i = [];
		for (const e$1 of n.arrayValue.values || []) for (const n$1 of r) {
			const r$1 = new __PRIVATE_IndexByteEncoder();
			r$1.seed(n$1.un()), __PRIVATE_FirestoreIndexValueWriter.Kt.Dt(e$1, r$1.Pn(t.kind)), i.push(r$1);
		}
		return i;
	}
	Un(e, t) {
		return !!e.filters.find(((e$1) => e$1 instanceof FieldFilter && e$1.field.isEqual(t) && ("in" === e$1.op || "not-in" === e$1.op)));
	}
	getFieldIndexes(e, t) {
		const n = __PRIVATE_indexConfigurationStore(e), r = __PRIVATE_indexStateStore(e);
		return (t ? n.J(xe, IDBKeyRange.bound(t, t)) : n.J()).next(((e$1) => {
			const t$1 = [];
			return PersistencePromise.forEach(e$1, ((e$2) => r.get([e$2.indexId, this.uid]).next(((n$1) => {
				t$1.push(function __PRIVATE_fromDbIndexConfiguration(e$3, t$2) {
					const n$2 = t$2 ? new IndexState(t$2.sequenceNumber, new IndexOffset(__PRIVATE_fromDbTimestamp(t$2.readTime), new DocumentKey(__PRIVATE_decodeResourcePath(t$2.documentKey)), t$2.largestBatchId)) : IndexState.empty(), r$1 = e$3.fields.map((([e$4, t$3]) => new IndexSegment(FieldPath$1.fromServerFormat(e$4), t$3)));
					return new FieldIndex(e$3.indexId, e$3.collectionGroup, r$1, n$2);
				}(e$2, n$1));
			})))).next((() => t$1));
		}));
	}
	getNextCollectionGroupToUpdate(e) {
		return this.getFieldIndexes(e).next(((e$1) => 0 === e$1.length ? null : (e$1.sort(((e$2, t) => {
			const n = e$2.indexState.sequenceNumber - t.indexState.sequenceNumber;
			return 0 !== n ? n : __PRIVATE_primitiveComparator(e$2.collectionGroup, t.collectionGroup);
		})), e$1[0].collectionGroup)));
	}
	updateCollectionGroup(e, t, n) {
		const r = __PRIVATE_indexConfigurationStore(e), i = __PRIVATE_indexStateStore(e);
		return this.Gn(e).next(((e$1) => r.J(xe, IDBKeyRange.bound(t, t)).next(((t$1) => PersistencePromise.forEach(t$1, ((t$2) => i.put(__PRIVATE_toDbIndexState(t$2.indexId, this.uid, e$1, n))))))));
	}
	updateIndexEntries(e, t) {
		const n = /* @__PURE__ */ new Map();
		return PersistencePromise.forEach(t, ((t$1, r) => {
			const i = n.get(t$1.collectionGroup);
			return (i ? PersistencePromise.resolve(i) : this.getFieldIndexes(e, t$1.collectionGroup)).next(((i$1) => (n.set(t$1.collectionGroup, i$1), PersistencePromise.forEach(i$1, ((n$1) => this.zn(e, t$1, n$1).next(((t$2) => {
				const i$2 = this.jn(r, n$1);
				return t$2.isEqual(i$2) ? PersistencePromise.resolve() : this.Jn(e, r, n$1, t$2, i$2);
			})))))));
		}));
	}
	Hn(e, t, n, r) {
		return __PRIVATE_indexEntriesStore(e).put(r.Rn(this.uid, this.$n(n, t.key), t.key));
	}
	Yn(e, t, n, r) {
		return __PRIVATE_indexEntriesStore(e).delete(r.Vn(this.uid, this.$n(n, t.key), t.key));
	}
	zn(e, t, n) {
		const r = __PRIVATE_indexEntriesStore(e);
		let i = new SortedSet(__PRIVATE_indexEntryComparator);
		return r.ee({
			index: $e,
			range: IDBKeyRange.only([
				n.indexId,
				this.uid,
				__PRIVATE_encodeKeySafeBytes(this.$n(n, t))
			])
		}, ((e$1, r$1) => {
			i = i.add(new __PRIVATE_IndexEntry(n.indexId, t, __PRIVATE_decodeKeySafeBytes(r$1.arrayValue), __PRIVATE_decodeKeySafeBytes(r$1.directionalValue)));
		})).next((() => i));
	}
	/** Creates the index entries for the given document. */ jn(e, t) {
		let n = new SortedSet(__PRIVATE_indexEntryComparator);
		const r = this.Qn(t, e);
		if (null == r) return n;
		const i = __PRIVATE_fieldIndexGetArraySegment(t);
		if (null != i) {
			const s = e.data.field(i.fieldPath);
			if (isArray(s)) for (const i$1 of s.arrayValue.values || []) n = n.add(new __PRIVATE_IndexEntry(t.indexId, e.key, this.Ln(i$1), r));
		} else n = n.add(new __PRIVATE_IndexEntry(t.indexId, e.key, Mt, r));
		return n;
	}
	/**
	* Updates the index entries for the provided document by deleting entries
	* that are no longer referenced in `newEntries` and adding all newly added
	* entries.
	*/ Jn(e, t, n, r, i) {
		__PRIVATE_logDebug(Ft, "Updating index entries for document '%s'", t.key);
		const s = [];
		return function __PRIVATE_diffSortedSets(e$1, t$1, n$1, r$1, i$1) {
			const s$1 = e$1.getIterator(), o = t$1.getIterator();
			let _ = __PRIVATE_advanceIterator(s$1), a = __PRIVATE_advanceIterator(o);
			for (; _ || a;) {
				let e$2 = !1, t$2 = !1;
				if (_ && a) {
					const r$2 = n$1(_, a);
					r$2 < 0 ? t$2 = !0 : r$2 > 0 && (e$2 = !0);
				} else null != _ ? t$2 = !0 : e$2 = !0;
				e$2 ? (r$1(a), a = __PRIVATE_advanceIterator(o)) : t$2 ? (i$1(_), _ = __PRIVATE_advanceIterator(s$1)) : (_ = __PRIVATE_advanceIterator(s$1), a = __PRIVATE_advanceIterator(o));
			}
		}(r, i, __PRIVATE_indexEntryComparator, ((r$1) => {
			s.push(this.Hn(e, t, n, r$1));
		}), ((r$1) => {
			s.push(this.Yn(e, t, n, r$1));
		})), PersistencePromise.waitFor(s);
	}
	Gn(e) {
		let t = 1;
		return __PRIVATE_indexStateStore(e).ee({
			index: Le,
			reverse: !0,
			range: IDBKeyRange.upperBound([this.uid, Number.MAX_SAFE_INTEGER])
		}, ((e$1, n, r) => {
			r.done(), t = n.sequenceNumber + 1;
		})).next((() => t));
	}
	/**
	* Returns a new set of IDB ranges that splits the existing range and excludes
	* any values that match the `notInValue` from these ranges. As an example,
	* '[foo > 2 && foo != 3]` becomes  `[foo > 2 && < 3, foo > 3]`.
	*/ createRange(e, t, n) {
		n = n.sort(((e$1, t$1) => __PRIVATE_indexEntryComparator(e$1, t$1))).filter(((e$1, t$1, n$1) => !t$1 || 0 !== __PRIVATE_indexEntryComparator(e$1, n$1[t$1 - 1])));
		const r = [];
		r.push(e);
		for (const i$1 of n) {
			const n$1 = __PRIVATE_indexEntryComparator(i$1, e), s = __PRIVATE_indexEntryComparator(i$1, t);
			if (0 === n$1) r[0] = e.An();
			else if (n$1 > 0 && s < 0) r.push(i$1), r.push(i$1.An());
			else if (s > 0) break;
		}
		r.push(t);
		const i = [];
		for (let e$1 = 0; e$1 < r.length; e$1 += 2) {
			if (this.Zn(r[e$1], r[e$1 + 1])) return [];
			const t$1 = r[e$1].Vn(this.uid, Mt, DocumentKey.empty()), n$1 = r[e$1 + 1].Vn(this.uid, Mt, DocumentKey.empty());
			i.push(IDBKeyRange.bound(t$1, n$1));
		}
		return i;
	}
	Zn(e, t) {
		return __PRIVATE_indexEntryComparator(e, t) > 0;
	}
	getMinOffsetFromCollectionGroup(e, t) {
		return this.getFieldIndexes(e, t).next(__PRIVATE_getMinOffsetFromFieldIndexes);
	}
	getMinOffset(e, t) {
		return PersistencePromise.mapArray(this.Mn(t), ((t$1) => this.xn(e, t$1).next(((e$1) => e$1 || fail(44426))))).next(__PRIVATE_getMinOffsetFromFieldIndexes);
	}
};
/**
* Helper to get a typed SimpleDbStore for the collectionParents
* document store.
*/ function __PRIVATE_collectionParentsStore(e) {
	return __PRIVATE_getStore(e, pe);
}
/**
* Helper to get a typed SimpleDbStore for the index entry object store.
*/ function __PRIVATE_indexEntriesStore(e) {
	return __PRIVATE_getStore(e, qe);
}
/**
* Helper to get a typed SimpleDbStore for the index configuration object store.
*/ function __PRIVATE_indexConfigurationStore(e) {
	return __PRIVATE_getStore(e, Fe);
}
/**
* Helper to get a typed SimpleDbStore for the index state object store.
*/ function __PRIVATE_indexStateStore(e) {
	return __PRIVATE_getStore(e, Ne);
}
function __PRIVATE_getMinOffsetFromFieldIndexes(e) {
	__PRIVATE_hardAssert(0 !== e.length, 28825);
	let t = e[0].indexState.offset, n = t.largestBatchId;
	for (let r = 1; r < e.length; r++) {
		const i = e[r].indexState.offset;
		__PRIVATE_indexOffsetComparator(i, t) < 0 && (t = i), n < i.largestBatchId && (n = i.largestBatchId);
	}
	return new IndexOffset(t.readTime, t.documentKey, n);
}
/**
* @license
* Copyright 2018 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ var xt = {
	didRun: !1,
	sequenceNumbersCollected: 0,
	targetsRemoved: 0,
	documentsRemoved: 0
}, Ot = 41943040;
var LruParams = class LruParams {
	static withCacheSize(e) {
		return new LruParams(e, LruParams.DEFAULT_COLLECTION_PERCENTILE, LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);
	}
	constructor(e, t, n) {
		this.cacheSizeCollectionThreshold = e, this.percentileToCollect = t, this.maximumSequenceNumbersToCollect = n;
	}
};
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Delete a mutation batch and the associated document mutations.
* @returns A PersistencePromise of the document mutations that were removed.
*/
function removeMutationBatch(e, t, n) {
	const r = e.store(te), i = e.store(oe), s = [], o = IDBKeyRange.only(n.batchId);
	let _ = 0;
	const a = r.ee({ range: o }, ((e$1, t$1, n$1) => (_++, n$1.delete())));
	s.push(a.next((() => {
		__PRIVATE_hardAssert(1 === _, 47070, { batchId: n.batchId });
	})));
	const u = [];
	for (const e$1 of n.mutations) {
		const r$1 = __PRIVATE_newDbDocumentMutationKey(t, e$1.key.path, n.batchId);
		s.push(i.delete(r$1)), u.push(e$1.key);
	}
	return PersistencePromise.waitFor(s).next((() => u));
}
/**
* Returns an approximate size for the given document.
*/ function __PRIVATE_dbDocumentSize(e) {
	if (!e) return 0;
	let t;
	if (e.document) t = e.document;
	else if (e.unknownDocument) t = e.unknownDocument;
	else {
		if (!e.noDocument) throw fail(14731);
		t = e.noDocument;
	}
	return JSON.stringify(t).length;
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/** A mutation queue for a specific user, backed by IndexedDB. */ LruParams.DEFAULT_COLLECTION_PERCENTILE = 10, LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT = 1e3, LruParams.DEFAULT = new LruParams(Ot, LruParams.DEFAULT_COLLECTION_PERCENTILE, LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT), LruParams.DISABLED = new LruParams(-1, 0, 0);
var __PRIVATE_IndexedDbMutationQueue = class __PRIVATE_IndexedDbMutationQueue {
	constructor(e, t, n, r) {
		this.userId = e, this.serializer = t, this.indexManager = n, this.referenceDelegate = r, this.Xn = {};
	}
	/**
	* Creates a new mutation queue for the given user.
	* @param user - The user for which to create a mutation queue.
	* @param serializer - The serializer to use when persisting to IndexedDb.
	*/ static wt(e, t, n, r) {
		__PRIVATE_hardAssert("" !== e.uid, 64387);
		const i = e.isAuthenticated() ? e.uid : "";
		return new __PRIVATE_IndexedDbMutationQueue(i, t, n, r);
	}
	checkEmpty(e) {
		let t = !0;
		const n = IDBKeyRange.bound([this.userId, Number.NEGATIVE_INFINITY], [this.userId, Number.POSITIVE_INFINITY]);
		return __PRIVATE_mutationsStore(e).ee({
			index: re,
			range: n
		}, ((e$1, n$1, r) => {
			t = !1, r.done();
		})).next((() => t));
	}
	addMutationBatch(e, t, n, r) {
		const i = __PRIVATE_documentMutationsStore(e), s = __PRIVATE_mutationsStore(e);
		return s.add({}).next(((o) => {
			__PRIVATE_hardAssert("number" == typeof o, 49019);
			const _ = new MutationBatch(o, t, n, r), a = function __PRIVATE_toDbMutationBatch(e$1, t$1, n$1) {
				const r$1 = n$1.baseMutations.map(((t$2) => toMutation(e$1.yt, t$2))), i$1 = n$1.mutations.map(((t$2) => toMutation(e$1.yt, t$2)));
				return {
					userId: t$1,
					batchId: n$1.batchId,
					localWriteTimeMs: n$1.localWriteTime.toMillis(),
					baseMutations: r$1,
					mutations: i$1
				};
			}(this.serializer, this.userId, _), u = [];
			let c = new SortedSet(((e$1, t$1) => __PRIVATE_primitiveComparator(e$1.canonicalString(), t$1.canonicalString())));
			for (const e$1 of r) {
				const t$1 = __PRIVATE_newDbDocumentMutationKey(this.userId, e$1.key.path, o);
				c = c.add(e$1.key.path.popLast()), u.push(s.put(a)), u.push(i.put(t$1, se));
			}
			return c.forEach(((t$1) => {
				u.push(this.indexManager.addToCollectionParentIndex(e, t$1));
			})), e.addOnCommittedListener((() => {
				this.Xn[o] = _.keys();
			})), PersistencePromise.waitFor(u).next((() => _));
		}));
	}
	lookupMutationBatch(e, t) {
		return __PRIVATE_mutationsStore(e).get(t).next(((e$1) => e$1 ? (__PRIVATE_hardAssert(e$1.userId === this.userId, 48, "Unexpected user for mutation batch", {
			userId: e$1.userId,
			batchId: t
		}), __PRIVATE_fromDbMutationBatch(this.serializer, e$1)) : null));
	}
	/**
	* Returns the document keys for the mutation batch with the given batchId.
	* For primary clients, this method returns `null` after
	* `removeMutationBatches()` has been called. Secondary clients return a
	* cached result until `removeCachedMutationKeys()` is invoked.
	*/
	er(e, t) {
		return this.Xn[t] ? PersistencePromise.resolve(this.Xn[t]) : this.lookupMutationBatch(e, t).next(((e$1) => {
			if (e$1) {
				const n = e$1.keys();
				return this.Xn[t] = n, n;
			}
			return null;
		}));
	}
	getNextMutationBatchAfterBatchId(e, t) {
		const n = t + 1, r = IDBKeyRange.lowerBound([this.userId, n]);
		let i = null;
		return __PRIVATE_mutationsStore(e).ee({
			index: re,
			range: r
		}, ((e$1, t$1, r$1) => {
			t$1.userId === this.userId && (__PRIVATE_hardAssert(t$1.batchId >= n, 47524, { tr: n }), i = __PRIVATE_fromDbMutationBatch(this.serializer, t$1)), r$1.done();
		})).next((() => i));
	}
	getHighestUnacknowledgedBatchId(e) {
		const t = IDBKeyRange.upperBound([this.userId, Number.POSITIVE_INFINITY]);
		let n = j;
		return __PRIVATE_mutationsStore(e).ee({
			index: re,
			range: t,
			reverse: !0
		}, ((e$1, t$1, r) => {
			n = t$1.batchId, r.done();
		})).next((() => n));
	}
	getAllMutationBatches(e) {
		const t = IDBKeyRange.bound([this.userId, j], [this.userId, Number.POSITIVE_INFINITY]);
		return __PRIVATE_mutationsStore(e).J(re, t).next(((e$1) => e$1.map(((e$2) => __PRIVATE_fromDbMutationBatch(this.serializer, e$2)))));
	}
	getAllMutationBatchesAffectingDocumentKey(e, t) {
		const n = __PRIVATE_newDbDocumentMutationPrefixForPath(this.userId, t.path), r = IDBKeyRange.lowerBound(n), i = [];
		return __PRIVATE_documentMutationsStore(e).ee({ range: r }, ((n$1, r$1, s) => {
			const [o, _, a] = n$1, u = __PRIVATE_decodeResourcePath(_);
			if (o === this.userId && t.path.isEqual(u)) return __PRIVATE_mutationsStore(e).get(a).next(((e$1) => {
				if (!e$1) throw fail(61480, {
					nr: n$1,
					batchId: a
				});
				__PRIVATE_hardAssert(e$1.userId === this.userId, 10503, "Unexpected user for mutation batch", {
					userId: e$1.userId,
					batchId: a
				}), i.push(__PRIVATE_fromDbMutationBatch(this.serializer, e$1));
			}));
			s.done();
		})).next((() => i));
	}
	getAllMutationBatchesAffectingDocumentKeys(e, t) {
		let n = new SortedSet(__PRIVATE_primitiveComparator);
		const r = [];
		return t.forEach(((t$1) => {
			const i = __PRIVATE_newDbDocumentMutationPrefixForPath(this.userId, t$1.path), s = IDBKeyRange.lowerBound(i), o = __PRIVATE_documentMutationsStore(e).ee({ range: s }, ((e$1, r$1, i$1) => {
				const [s$1, o$1, _] = e$1, a = __PRIVATE_decodeResourcePath(o$1);
				s$1 === this.userId && t$1.path.isEqual(a) ? n = n.add(_) : i$1.done();
			}));
			r.push(o);
		})), PersistencePromise.waitFor(r).next((() => this.rr(e, n)));
	}
	getAllMutationBatchesAffectingQuery(e, t) {
		const n = t.path, r = n.length + 1, i = __PRIVATE_newDbDocumentMutationPrefixForPath(this.userId, n), s = IDBKeyRange.lowerBound(i);
		let o = new SortedSet(__PRIVATE_primitiveComparator);
		return __PRIVATE_documentMutationsStore(e).ee({ range: s }, ((e$1, t$1, i$1) => {
			const [s$1, _, a] = e$1, u = __PRIVATE_decodeResourcePath(_);
			s$1 === this.userId && n.isPrefixOf(u) ? u.length === r && (o = o.add(a)) : i$1.done();
		})).next((() => this.rr(e, o)));
	}
	rr(e, t) {
		const n = [], r = [];
		return t.forEach(((t$1) => {
			r.push(__PRIVATE_mutationsStore(e).get(t$1).next(((e$1) => {
				if (null === e$1) throw fail(35274, { batchId: t$1 });
				__PRIVATE_hardAssert(e$1.userId === this.userId, 9748, "Unexpected user for mutation batch", {
					userId: e$1.userId,
					batchId: t$1
				}), n.push(__PRIVATE_fromDbMutationBatch(this.serializer, e$1));
			})));
		})), PersistencePromise.waitFor(r).next((() => n));
	}
	removeMutationBatch(e, t) {
		return removeMutationBatch(e.le, this.userId, t).next(((n) => (e.addOnCommittedListener((() => {
			this.ir(t.batchId);
		})), PersistencePromise.forEach(n, ((t$1) => this.referenceDelegate.markPotentiallyOrphaned(e, t$1))))));
	}
	/**
	* Clears the cached keys for a mutation batch. This method should be
	* called by secondary clients after they process mutation updates.
	*
	* Note that this method does not have to be called from primary clients as
	* the corresponding cache entries are cleared when an acknowledged or
	* rejected batch is removed from the mutation queue.
	*/
	ir(e) {
		delete this.Xn[e];
	}
	performConsistencyCheck(e) {
		return this.checkEmpty(e).next(((t) => {
			if (!t) return PersistencePromise.resolve();
			const n = IDBKeyRange.lowerBound(
				/**
				* Creates a [userId] key for use in the DbDocumentMutations index to iterate
				* over all of a user's document mutations.
				*/
				function __PRIVATE_newDbDocumentMutationPrefixForUser(e$1) {
					return [e$1];
				}(this.userId)
			), r = [];
			return __PRIVATE_documentMutationsStore(e).ee({ range: n }, ((e$1, t$1, n$1) => {
				if (e$1[0] === this.userId) {
					const t$2 = __PRIVATE_decodeResourcePath(e$1[1]);
					r.push(t$2);
				} else n$1.done();
			})).next((() => {
				__PRIVATE_hardAssert(0 === r.length, 56720, { sr: r.map(((e$1) => e$1.canonicalString())) });
			}));
		}));
	}
	containsKey(e, t) {
		return __PRIVATE_mutationQueueContainsKey(e, this.userId, t);
	}
	/** Returns the mutation queue's metadata from IndexedDb. */
	_r(e) {
		return __PRIVATE_mutationQueuesStore(e).get(this.userId).next(((e$1) => e$1 || {
			userId: this.userId,
			lastAcknowledgedBatchId: j,
			lastStreamToken: ""
		}));
	}
};
/**
* @returns true if the mutation queue for the given user contains a pending
*         mutation for the given key.
*/ function __PRIVATE_mutationQueueContainsKey(e, t, n) {
	const r = __PRIVATE_newDbDocumentMutationPrefixForPath(t, n.path), i = r[1], s = IDBKeyRange.lowerBound(r);
	let o = !1;
	return __PRIVATE_documentMutationsStore(e).ee({
		range: s,
		X: !0
	}, ((e$1, n$1, r$1) => {
		const [s$1, _, a] = e$1;
		s$1 === t && _ === i && (o = !0), r$1.done();
	})).next((() => o));
}
/** Returns true if any mutation queue contains the given document. */
/**
* Helper to get a typed SimpleDbStore for the mutations object store.
*/
function __PRIVATE_mutationsStore(e) {
	return __PRIVATE_getStore(e, te);
}
/**
* Helper to get a typed SimpleDbStore for the mutationQueues object store.
*/ function __PRIVATE_documentMutationsStore(e) {
	return __PRIVATE_getStore(e, oe);
}
/**
* Helper to get a typed SimpleDbStore for the mutationQueues object store.
*/ function __PRIVATE_mutationQueuesStore(e) {
	return __PRIVATE_getStore(e, X);
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/** Offset to ensure non-overlapping target ids. */
/**
* Generates monotonically increasing target IDs for sending targets to the
* watch stream.
*
* The client constructs two generators, one for the target cache, and one for
* for the sync engine (to generate limbo documents targets). These
* generators produce non-overlapping IDs (by using even and odd IDs
* respectively).
*
* By separating the target ID space, the query cache can generate target IDs
* that persist across client restarts, while sync engine can independently
* generate in-memory target IDs that are transient and can be reused after a
* restart.
*/
var __PRIVATE_TargetIdGenerator = class __PRIVATE_TargetIdGenerator {
	constructor(e) {
		this.ar = e;
	}
	next() {
		return this.ar += 2, this.ar;
	}
	static ur() {
		return new __PRIVATE_TargetIdGenerator(0);
	}
	static cr() {
		return new __PRIVATE_TargetIdGenerator(-1);
	}
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ var __PRIVATE_IndexedDbTargetCache = class {
	constructor(e, t) {
		this.referenceDelegate = e, this.serializer = t;
	}
	allocateTargetId(e) {
		return this.lr(e).next(((t) => {
			return t.highestTargetId = new __PRIVATE_TargetIdGenerator(t.highestTargetId).next(), this.hr(e, t).next((() => t.highestTargetId));
		}));
	}
	getLastRemoteSnapshotVersion(e) {
		return this.lr(e).next(((e$1) => SnapshotVersion.fromTimestamp(new Timestamp(e$1.lastRemoteSnapshotVersion.seconds, e$1.lastRemoteSnapshotVersion.nanoseconds))));
	}
	getHighestSequenceNumber(e) {
		return this.lr(e).next(((e$1) => e$1.highestListenSequenceNumber));
	}
	setTargetsMetadata(e, t, n) {
		return this.lr(e).next(((r) => (r.highestListenSequenceNumber = t, n && (r.lastRemoteSnapshotVersion = n.toTimestamp()), t > r.highestListenSequenceNumber && (r.highestListenSequenceNumber = t), this.hr(e, r))));
	}
	addTargetData(e, t) {
		return this.Pr(e, t).next((() => this.lr(e).next(((n) => (n.targetCount += 1, this.Tr(t, n), this.hr(e, n))))));
	}
	updateTargetData(e, t) {
		return this.Pr(e, t);
	}
	removeTargetData(e, t) {
		return this.removeMatchingKeysForTargetId(e, t.targetId).next((() => __PRIVATE_targetsStore(e).delete(t.targetId))).next((() => this.lr(e))).next(((t$1) => (__PRIVATE_hardAssert(t$1.targetCount > 0, 8065), t$1.targetCount -= 1, this.hr(e, t$1))));
	}
	/**
	* Drops any targets with sequence number less than or equal to the upper bound, excepting those
	* present in `activeTargetIds`. Document associations for the removed targets are also removed.
	* Returns the number of targets removed.
	*/ removeTargets(e, t, n) {
		let r = 0;
		const i = [];
		return __PRIVATE_targetsStore(e).ee(((s, o) => {
			const _ = __PRIVATE_fromDbTarget(o);
			_.sequenceNumber <= t && null === n.get(_.targetId) && (r++, i.push(this.removeTargetData(e, _)));
		})).next((() => PersistencePromise.waitFor(i))).next((() => r));
	}
	/**
	* Call provided function with each `TargetData` that we have cached.
	*/ forEachTarget(e, t) {
		return __PRIVATE_targetsStore(e).ee(((e$1, n) => {
			const r = __PRIVATE_fromDbTarget(n);
			t(r);
		}));
	}
	lr(e) {
		return __PRIVATE_globalTargetStore(e).get(fe).next(((e$1) => (__PRIVATE_hardAssert(null !== e$1, 2888), e$1)));
	}
	hr(e, t) {
		return __PRIVATE_globalTargetStore(e).put(fe, t);
	}
	Pr(e, t) {
		return __PRIVATE_targetsStore(e).put(__PRIVATE_toDbTarget(this.serializer, t));
	}
	/**
	* In-place updates the provided metadata to account for values in the given
	* TargetData. Saving is done separately. Returns true if there were any
	* changes to the metadata.
	*/ Tr(e, t) {
		let n = !1;
		return e.targetId > t.highestTargetId && (t.highestTargetId = e.targetId, n = !0), e.sequenceNumber > t.highestListenSequenceNumber && (t.highestListenSequenceNumber = e.sequenceNumber, n = !0), n;
	}
	getTargetCount(e) {
		return this.lr(e).next(((e$1) => e$1.targetCount));
	}
	getTargetData(e, t) {
		const n = __PRIVATE_canonifyTarget(t), r = IDBKeyRange.bound([n, Number.NEGATIVE_INFINITY], [n, Number.POSITIVE_INFINITY]);
		let i = null;
		return __PRIVATE_targetsStore(e).ee({
			range: r,
			index: Ee
		}, ((e$1, n$1, r$1) => {
			const s = __PRIVATE_fromDbTarget(n$1);
			__PRIVATE_targetEquals(t, s.target) && (i = s, r$1.done());
		})).next((() => i));
	}
	addMatchingKeys(e, t, n) {
		const r = [], i = __PRIVATE_documentTargetStore(e);
		return t.forEach(((t$1) => {
			const s = __PRIVATE_encodeResourcePath(t$1.path);
			r.push(i.put({
				targetId: n,
				path: s
			})), r.push(this.referenceDelegate.addReference(e, n, t$1));
		})), PersistencePromise.waitFor(r);
	}
	removeMatchingKeys(e, t, n) {
		const r = __PRIVATE_documentTargetStore(e);
		return PersistencePromise.forEach(t, ((t$1) => {
			const i = __PRIVATE_encodeResourcePath(t$1.path);
			return PersistencePromise.waitFor([r.delete([n, i]), this.referenceDelegate.removeReference(e, n, t$1)]);
		}));
	}
	removeMatchingKeysForTargetId(e, t) {
		const n = __PRIVATE_documentTargetStore(e), r = IDBKeyRange.bound([t], [t + 1], !1, !0);
		return n.delete(r);
	}
	getMatchingKeysForTargetId(e, t) {
		const n = IDBKeyRange.bound([t], [t + 1], !1, !0), r = __PRIVATE_documentTargetStore(e);
		let i = __PRIVATE_documentKeySet();
		return r.ee({
			range: n,
			X: !0
		}, ((e$1, t$1, n$1) => {
			const r$1 = __PRIVATE_decodeResourcePath(e$1[1]), s = new DocumentKey(r$1);
			i = i.add(s);
		})).next((() => i));
	}
	containsKey(e, t) {
		const n = __PRIVATE_encodeResourcePath(t.path), r = IDBKeyRange.bound([n], [__PRIVATE_immediateSuccessor(n)], !1, !0);
		let i = 0;
		return __PRIVATE_documentTargetStore(e).ee({
			index: Ve,
			X: !0,
			range: r
		}, (([e$1, t$1], n$1, r$1) => {
			0 !== e$1 && (i++, r$1.done());
		})).next((() => i > 0));
	}
	/**
	* Looks up a TargetData entry by target ID.
	*
	* @param targetId - The target ID of the TargetData entry to look up.
	* @returns The cached TargetData entry, or null if the cache has no entry for
	* the target.
	*/
	At(e, t) {
		return __PRIVATE_targetsStore(e).get(t).next(((e$1) => e$1 ? __PRIVATE_fromDbTarget(e$1) : null));
	}
};
/**
* Helper to get a typed SimpleDbStore for the queries object store.
*/ function __PRIVATE_targetsStore(e) {
	return __PRIVATE_getStore(e, Ie);
}
/**
* Helper to get a typed SimpleDbStore for the target globals object store.
*/ function __PRIVATE_globalTargetStore(e) {
	return __PRIVATE_getStore(e, ge);
}
/**
* Helper to get a typed SimpleDbStore for the document target object store.
*/ function __PRIVATE_documentTargetStore(e) {
	return __PRIVATE_getStore(e, Ae);
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ var Nt = "LruGarbageCollector", Bt = 1048576;
function __PRIVATE_bufferEntryComparator([e, t], [n, r]) {
	const i = __PRIVATE_primitiveComparator(e, n);
	return 0 === i ? __PRIVATE_primitiveComparator(t, r) : i;
}
/**
* Used to calculate the nth sequence number. Keeps a rolling buffer of the
* lowest n values passed to `addElement`, and finally reports the largest of
* them in `maxValue`.
*/ var __PRIVATE_RollingSequenceNumberBuffer = class {
	constructor(e) {
		this.Ir = e, this.buffer = new SortedSet(__PRIVATE_bufferEntryComparator), this.Er = 0;
	}
	dr() {
		return ++this.Er;
	}
	Ar(e) {
		const t = [e, this.dr()];
		if (this.buffer.size < this.Ir) this.buffer = this.buffer.add(t);
		else {
			const e$1 = this.buffer.last();
			__PRIVATE_bufferEntryComparator(t, e$1) < 0 && (this.buffer = this.buffer.delete(e$1).add(t));
		}
	}
	get maxValue() {
		return this.buffer.last()[0];
	}
};
/**
* This class is responsible for the scheduling of LRU garbage collection. It handles checking
* whether or not GC is enabled, as well as which delay to use before the next run.
*/ var __PRIVATE_LruScheduler = class {
	constructor(e, t, n) {
		this.garbageCollector = e, this.asyncQueue = t, this.localStore = n, this.Rr = null;
	}
	start() {
		-1 !== this.garbageCollector.params.cacheSizeCollectionThreshold && this.Vr(6e4);
	}
	stop() {
		this.Rr && (this.Rr.cancel(), this.Rr = null);
	}
	get started() {
		return null !== this.Rr;
	}
	Vr(e) {
		__PRIVATE_logDebug(Nt, `Garbage collection scheduled in ${e}ms`), this.Rr = this.asyncQueue.enqueueAfterDelay("lru_garbage_collection", e, (async () => {
			this.Rr = null;
			try {
				await this.localStore.collectGarbage(this.garbageCollector);
			} catch (e$1) {
				__PRIVATE_isIndexedDbTransactionError(e$1) ? __PRIVATE_logDebug(Nt, "Ignoring IndexedDB error during garbage collection: ", e$1) : await __PRIVATE_ignoreIfPrimaryLeaseLoss(e$1);
			}
			await this.Vr(3e5);
		}));
	}
};
/**
* Implements the steps for LRU garbage collection.
*/ var __PRIVATE_LruGarbageCollectorImpl = class {
	constructor(e, t) {
		this.mr = e, this.params = t;
	}
	calculateTargetCount(e, t) {
		return this.mr.gr(e).next(((e$1) => Math.floor(t / 100 * e$1)));
	}
	nthSequenceNumber(e, t) {
		if (0 === t) return PersistencePromise.resolve(__PRIVATE_ListenSequence.ce);
		const n = new __PRIVATE_RollingSequenceNumberBuffer(t);
		return this.mr.forEachTarget(e, ((e$1) => n.Ar(e$1.sequenceNumber))).next((() => this.mr.pr(e, ((e$1) => n.Ar(e$1))))).next((() => n.maxValue));
	}
	removeTargets(e, t, n) {
		return this.mr.removeTargets(e, t, n);
	}
	removeOrphanedDocuments(e, t) {
		return this.mr.removeOrphanedDocuments(e, t);
	}
	collect(e, t) {
		return -1 === this.params.cacheSizeCollectionThreshold ? (__PRIVATE_logDebug("LruGarbageCollector", "Garbage collection skipped; disabled"), PersistencePromise.resolve(xt)) : this.getCacheSize(e).next(((n) => n < this.params.cacheSizeCollectionThreshold ? (__PRIVATE_logDebug("LruGarbageCollector", `Garbage collection skipped; Cache size ${n} is lower than threshold ${this.params.cacheSizeCollectionThreshold}`), xt) : this.yr(e, t)));
	}
	getCacheSize(e) {
		return this.mr.getCacheSize(e);
	}
	yr(e, t) {
		let n, r, i, s, o, _, u;
		const c = Date.now();
		return this.calculateTargetCount(e, this.params.percentileToCollect).next(((t$1) => (t$1 > this.params.maximumSequenceNumbersToCollect ? (__PRIVATE_logDebug("LruGarbageCollector", `Capping sequence numbers to collect down to the maximum of ${this.params.maximumSequenceNumbersToCollect} from ${t$1}`), r = this.params.maximumSequenceNumbersToCollect) : r = t$1, s = Date.now(), this.nthSequenceNumber(e, r)))).next(((r$1) => (n = r$1, o = Date.now(), this.removeTargets(e, n, t)))).next(((t$1) => (i = t$1, _ = Date.now(), this.removeOrphanedDocuments(e, n)))).next(((e$1) => {
			if (u = Date.now(), __PRIVATE_getLogLevel() <= LogLevel.DEBUG) __PRIVATE_logDebug("LruGarbageCollector", `LRU Garbage Collection\n\tCounted targets in ${s - c}ms\n\tDetermined least recently used ${r} in ` + (o - s) + `ms
\tRemoved ${i} targets in ` + (_ - o) + `ms
\tRemoved ${e$1} documents in ` + (u - _) + `ms
Total Duration: ${u - c}ms`);
			return PersistencePromise.resolve({
				didRun: !0,
				sequenceNumbersCollected: r,
				targetsRemoved: i,
				documentsRemoved: e$1
			});
		}));
	}
};
function __PRIVATE_newLruGarbageCollector(e, t) {
	return new __PRIVATE_LruGarbageCollectorImpl(e, t);
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/** Provides LRU functionality for IndexedDB persistence. */ var __PRIVATE_IndexedDbLruDelegateImpl = class {
	constructor(e, t) {
		this.db = e, this.garbageCollector = __PRIVATE_newLruGarbageCollector(this, t);
	}
	gr(e) {
		const t = this.wr(e);
		return this.db.getTargetCache().getTargetCount(e).next(((e$1) => t.next(((t$1) => e$1 + t$1))));
	}
	wr(e) {
		let t = 0;
		return this.pr(e, ((e$1) => {
			t++;
		})).next((() => t));
	}
	forEachTarget(e, t) {
		return this.db.getTargetCache().forEachTarget(e, t);
	}
	pr(e, t) {
		return this.Sr(e, ((e$1, n) => t(n)));
	}
	addReference(e, t, n) {
		return __PRIVATE_writeSentinelKey(e, n);
	}
	removeReference(e, t, n) {
		return __PRIVATE_writeSentinelKey(e, n);
	}
	removeTargets(e, t, n) {
		return this.db.getTargetCache().removeTargets(e, t, n);
	}
	markPotentiallyOrphaned(e, t) {
		return __PRIVATE_writeSentinelKey(e, t);
	}
	/**
	* Returns true if anything would prevent this document from being garbage
	* collected, given that the document in question is not present in any
	* targets and has a sequence number less than or equal to the upper bound for
	* the collection run.
	*/ br(e, t) {
		return function __PRIVATE_mutationQueuesContainKey(e$1, t$1) {
			let n = !1;
			return __PRIVATE_mutationQueuesStore(e$1).te(((r) => __PRIVATE_mutationQueueContainsKey(e$1, r, t$1).next(((e$2) => (e$2 && (n = !0), PersistencePromise.resolve(!e$2)))))).next((() => n));
		}(e, t);
	}
	removeOrphanedDocuments(e, t) {
		const n = this.db.getRemoteDocumentCache().newChangeBuffer(), r = [];
		let i = 0;
		return this.Sr(e, ((s, o) => {
			if (o <= t) {
				const t$1 = this.br(e, s).next(((t$2) => {
					if (!t$2) return i++, n.getEntry(e, s).next((() => (n.removeEntry(s, SnapshotVersion.min()), __PRIVATE_documentTargetStore(e).delete(function __PRIVATE_sentinelKey$1(e$1) {
						return [0, __PRIVATE_encodeResourcePath(e$1.path)];
					}(s)))));
				}));
				r.push(t$1);
			}
		})).next((() => PersistencePromise.waitFor(r))).next((() => n.apply(e))).next((() => i));
	}
	removeTarget(e, t) {
		const n = t.withSequenceNumber(e.currentSequenceNumber);
		return this.db.getTargetCache().updateTargetData(e, n);
	}
	updateLimboDocument(e, t) {
		return __PRIVATE_writeSentinelKey(e, t);
	}
	/**
	* Call provided function for each document in the cache that is 'orphaned'. Orphaned
	* means not a part of any target, so the only entry in the target-document index for
	* that document will be the sentinel row (targetId 0), which will also have the sequence
	* number for the last time the document was accessed.
	*/ Sr(e, t) {
		const n = __PRIVATE_documentTargetStore(e);
		let r, i = __PRIVATE_ListenSequence.ce;
		return n.ee({ index: Ve }, (([e$1, n$1], { path: s, sequenceNumber: o }) => {
			0 === e$1 ? (i !== __PRIVATE_ListenSequence.ce && t(new DocumentKey(__PRIVATE_decodeResourcePath(r)), i), i = o, r = s) : i = __PRIVATE_ListenSequence.ce;
		})).next((() => {
			i !== __PRIVATE_ListenSequence.ce && t(new DocumentKey(__PRIVATE_decodeResourcePath(r)), i);
		}));
	}
	getCacheSize(e) {
		return this.db.getRemoteDocumentCache().getSize(e);
	}
};
function __PRIVATE_writeSentinelKey(e, t) {
	return __PRIVATE_documentTargetStore(e).put(function __PRIVATE_sentinelRow(e$1, t$1) {
		return {
			targetId: 0,
			path: __PRIVATE_encodeResourcePath(e$1.path),
			sequenceNumber: t$1
		};
	}(t, e.currentSequenceNumber));
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* An in-memory buffer of entries to be written to a RemoteDocumentCache.
* It can be used to batch up a set of changes to be written to the cache, but
* additionally supports reading entries back with the `getEntry()` method,
* falling back to the underlying RemoteDocumentCache if no entry is
* buffered.
*
* Entries added to the cache *must* be read first. This is to facilitate
* calculating the size delta of the pending changes.
*
* PORTING NOTE: This class was implemented then removed from other platforms.
* If byte-counting ends up being needed on the other platforms, consider
* porting this class as part of that implementation work.
*/ var RemoteDocumentChangeBuffer = class {
	constructor() {
		this.changes = new ObjectMap(((e) => e.toString()), ((e, t) => e.isEqual(t))), this.changesApplied = !1;
	}
	/**
	* Buffers a `RemoteDocumentCache.addEntry()` call.
	*
	* You can only modify documents that have already been retrieved via
	* `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
	*/ addEntry(e) {
		this.assertNotApplied(), this.changes.set(e.key, e);
	}
	/**
	* Buffers a `RemoteDocumentCache.removeEntry()` call.
	*
	* You can only remove documents that have already been retrieved via
	* `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
	*/ removeEntry(e, t) {
		this.assertNotApplied(), this.changes.set(e, MutableDocument.newInvalidDocument(e).setReadTime(t));
	}
	/**
	* Looks up an entry in the cache. The buffered changes will first be checked,
	* and if no buffered change applies, this will forward to
	* `RemoteDocumentCache.getEntry()`.
	*
	* @param transaction - The transaction in which to perform any persistence
	*     operations.
	* @param documentKey - The key of the entry to look up.
	* @returns The cached document or an invalid document if we have nothing
	* cached.
	*/ getEntry(e, t) {
		this.assertNotApplied();
		const n = this.changes.get(t);
		return void 0 !== n ? PersistencePromise.resolve(n) : this.getFromCache(e, t);
	}
	/**
	* Looks up several entries in the cache, forwarding to
	* `RemoteDocumentCache.getEntry()`.
	*
	* @param transaction - The transaction in which to perform any persistence
	*     operations.
	* @param documentKeys - The keys of the entries to look up.
	* @returns A map of cached documents, indexed by key. If an entry cannot be
	*     found, the corresponding key will be mapped to an invalid document.
	*/ getEntries(e, t) {
		return this.getAllFromCache(e, t);
	}
	/**
	* Applies buffered changes to the underlying RemoteDocumentCache, using
	* the provided transaction.
	*/ apply(e) {
		return this.assertNotApplied(), this.changesApplied = !0, this.applyChanges(e);
	}
	/** Helper to assert this.changes is not null  */ assertNotApplied() {}
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* The RemoteDocumentCache for IndexedDb. To construct, invoke
* `newIndexedDbRemoteDocumentCache()`.
*/ var __PRIVATE_IndexedDbRemoteDocumentCacheImpl = class {
	constructor(e) {
		this.serializer = e;
	}
	setIndexManager(e) {
		this.indexManager = e;
	}
	/**
	* Adds the supplied entries to the cache.
	*
	* All calls of `addEntry` are required to go through the RemoteDocumentChangeBuffer
	* returned by `newChangeBuffer()` to ensure proper accounting of metadata.
	*/ addEntry(e, t, n) {
		return __PRIVATE_remoteDocumentsStore(e).put(n);
	}
	/**
	* Removes a document from the cache.
	*
	* All calls of `removeEntry`  are required to go through the RemoteDocumentChangeBuffer
	* returned by `newChangeBuffer()` to ensure proper accounting of metadata.
	*/ removeEntry(e, t, n) {
		return __PRIVATE_remoteDocumentsStore(e).delete(
			/**
			* Returns a key that can be used for document lookups via the primary key of
			* the DbRemoteDocument object store.
			*/
			function __PRIVATE_dbReadTimeKey(e$1, t$1) {
				const n$1 = e$1.path.toArray();
				return [
					n$1.slice(0, n$1.length - 2),
					n$1[n$1.length - 2],
					__PRIVATE_toDbTimestampKey(t$1),
					n$1[n$1.length - 1]
				];
			}(t, n)
		);
	}
	/**
	* Updates the current cache size.
	*
	* Callers to `addEntry()` and `removeEntry()` *must* call this afterwards to update the
	* cache's metadata.
	*/ updateMetadata(e, t) {
		return this.getMetadata(e).next(((n) => (n.byteSize += t, this.Dr(e, n))));
	}
	getEntry(e, t) {
		let n = MutableDocument.newInvalidDocument(t);
		return __PRIVATE_remoteDocumentsStore(e).ee({
			index: ue,
			range: IDBKeyRange.only(__PRIVATE_dbKey(t))
		}, ((e$1, r) => {
			n = this.Cr(t, r);
		})).next((() => n));
	}
	/**
	* Looks up an entry in the cache.
	*
	* @param documentKey - The key of the entry to look up.
	* @returns The cached document entry and its size.
	*/ vr(e, t) {
		let n = {
			size: 0,
			document: MutableDocument.newInvalidDocument(t)
		};
		return __PRIVATE_remoteDocumentsStore(e).ee({
			index: ue,
			range: IDBKeyRange.only(__PRIVATE_dbKey(t))
		}, ((e$1, r) => {
			n = {
				document: this.Cr(t, r),
				size: __PRIVATE_dbDocumentSize(r)
			};
		})).next((() => n));
	}
	getEntries(e, t) {
		let n = __PRIVATE_mutableDocumentMap();
		return this.Fr(e, t, ((e$1, t$1) => {
			const r = this.Cr(e$1, t$1);
			n = n.insert(e$1, r);
		})).next((() => n));
	}
	/**
	* Looks up several entries in the cache.
	*
	* @param documentKeys - The set of keys entries to look up.
	* @returns A map of documents indexed by key and a map of sizes indexed by
	*     key (zero if the document does not exist).
	*/ Mr(e, t) {
		let n = __PRIVATE_mutableDocumentMap(), r = new SortedMap(DocumentKey.comparator);
		return this.Fr(e, t, ((e$1, t$1) => {
			const i = this.Cr(e$1, t$1);
			n = n.insert(e$1, i), r = r.insert(e$1, __PRIVATE_dbDocumentSize(t$1));
		})).next((() => ({
			documents: n,
			Or: r
		})));
	}
	Fr(e, t, n) {
		if (t.isEmpty()) return PersistencePromise.resolve();
		let r = new SortedSet(__PRIVATE_dbKeyComparator);
		t.forEach(((e$1) => r = r.add(e$1)));
		const i = IDBKeyRange.bound(__PRIVATE_dbKey(r.first()), __PRIVATE_dbKey(r.last())), s = r.getIterator();
		let o = s.getNext();
		return __PRIVATE_remoteDocumentsStore(e).ee({
			index: ue,
			range: i
		}, ((e$1, t$1, r$1) => {
			const i$1 = DocumentKey.fromSegments([
				...t$1.prefixPath,
				t$1.collectionGroup,
				t$1.documentId
			]);
			for (; o && __PRIVATE_dbKeyComparator(o, i$1) < 0;) n(o, null), o = s.getNext();
			o && o.isEqual(i$1) && (n(o, t$1), o = s.hasNext() ? s.getNext() : null), o ? r$1.j(__PRIVATE_dbKey(o)) : r$1.done();
		})).next((() => {
			for (; o;) n(o, null), o = s.hasNext() ? s.getNext() : null;
		}));
	}
	getDocumentsMatchingQuery(e, t, n, r, i) {
		const s = t.path, o = [
			s.popLast().toArray(),
			s.lastSegment(),
			__PRIVATE_toDbTimestampKey(n.readTime),
			n.documentKey.path.isEmpty() ? "" : n.documentKey.path.lastSegment()
		], _ = [
			s.popLast().toArray(),
			s.lastSegment(),
			[Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER],
			""
		];
		return __PRIVATE_remoteDocumentsStore(e).J(IDBKeyRange.bound(o, _, !0)).next(((e$1) => {
			i?.incrementDocumentReadCount(e$1.length);
			let n$1 = __PRIVATE_mutableDocumentMap();
			for (const i$1 of e$1) {
				const e$2 = this.Cr(DocumentKey.fromSegments(i$1.prefixPath.concat(i$1.collectionGroup, i$1.documentId)), i$1);
				e$2.isFoundDocument() && (__PRIVATE_queryMatches(t, e$2) || r.has(e$2.key)) && (n$1 = n$1.insert(e$2.key, e$2));
			}
			return n$1;
		}));
	}
	getAllFromCollectionGroup(e, t, n, r) {
		let i = __PRIVATE_mutableDocumentMap();
		const s = __PRIVATE_dbCollectionGroupKey(t, n), o = __PRIVATE_dbCollectionGroupKey(t, IndexOffset.max());
		return __PRIVATE_remoteDocumentsStore(e).ee({
			index: le,
			range: IDBKeyRange.bound(s, o, !0)
		}, ((e$1, t$1, n$1) => {
			const s$1 = this.Cr(DocumentKey.fromSegments(t$1.prefixPath.concat(t$1.collectionGroup, t$1.documentId)), t$1);
			i = i.insert(s$1.key, s$1), i.size === r && n$1.done();
		})).next((() => i));
	}
	newChangeBuffer(e) {
		return new __PRIVATE_IndexedDbRemoteDocumentChangeBuffer(this, !!e && e.trackRemovals);
	}
	getSize(e) {
		return this.getMetadata(e).next(((e$1) => e$1.byteSize));
	}
	getMetadata(e) {
		return __PRIVATE_documentGlobalStore(e).get(Te).next(((e$1) => (__PRIVATE_hardAssert(!!e$1, 20021), e$1)));
	}
	Dr(e, t) {
		return __PRIVATE_documentGlobalStore(e).put(Te, t);
	}
	/**
	* Decodes `dbRemoteDoc` and returns the document (or an invalid document if
	* the document corresponds to the format used for sentinel deletes).
	*/ Cr(e, t) {
		if (t) {
			const e$1 = __PRIVATE_fromDbRemoteDocument(this.serializer, t);
			if (!(e$1.isNoDocument() && e$1.version.isEqual(SnapshotVersion.min()))) return e$1;
		}
		return MutableDocument.newInvalidDocument(e);
	}
};
/** Creates a new IndexedDbRemoteDocumentCache. */ function __PRIVATE_newIndexedDbRemoteDocumentCache(e) {
	return new __PRIVATE_IndexedDbRemoteDocumentCacheImpl(e);
}
/**
* Handles the details of adding and updating documents in the IndexedDbRemoteDocumentCache.
*
* Unlike the MemoryRemoteDocumentChangeBuffer, the IndexedDb implementation computes the size
* delta for all submitted changes. This avoids having to re-read all documents from IndexedDb
* when we apply the changes.
*/ var __PRIVATE_IndexedDbRemoteDocumentChangeBuffer = class extends RemoteDocumentChangeBuffer {
	/**
	* @param documentCache - The IndexedDbRemoteDocumentCache to apply the changes to.
	* @param trackRemovals - Whether to create sentinel deletes that can be tracked by
	* `getNewDocumentChanges()`.
	*/
	constructor(e, t) {
		super(), this.Nr = e, this.trackRemovals = t, this.Br = new ObjectMap(((e$1) => e$1.toString()), ((e$1, t$1) => e$1.isEqual(t$1)));
	}
	applyChanges(e) {
		const t = [];
		let n = 0, r = new SortedSet(((e$1, t$1) => __PRIVATE_primitiveComparator(e$1.canonicalString(), t$1.canonicalString())));
		return this.changes.forEach(((i, s) => {
			const o = this.Br.get(i);
			if (t.push(this.Nr.removeEntry(e, i, o.readTime)), s.isValidDocument()) {
				const _ = __PRIVATE_toDbRemoteDocument(this.Nr.serializer, s);
				r = r.add(i.path.popLast());
				const a = __PRIVATE_dbDocumentSize(_);
				n += a - o.size, t.push(this.Nr.addEntry(e, i, _));
			} else if (n -= o.size, this.trackRemovals) {
				const n$1 = __PRIVATE_toDbRemoteDocument(this.Nr.serializer, s.convertToNoDocument(SnapshotVersion.min()));
				t.push(this.Nr.addEntry(e, i, n$1));
			}
		})), r.forEach(((n$1) => {
			t.push(this.Nr.indexManager.addToCollectionParentIndex(e, n$1));
		})), t.push(this.Nr.updateMetadata(e, n)), PersistencePromise.waitFor(t);
	}
	getFromCache(e, t) {
		return this.Nr.vr(e, t).next(((e$1) => (this.Br.set(t, {
			size: e$1.size,
			readTime: e$1.document.readTime
		}), e$1.document)));
	}
	getAllFromCache(e, t) {
		return this.Nr.Mr(e, t).next((({ documents: e$1, Or: t$1 }) => (t$1.forEach(((t$2, n) => {
			this.Br.set(t$2, {
				size: n,
				readTime: e$1.get(t$2).readTime
			});
		})), e$1)));
	}
};
function __PRIVATE_documentGlobalStore(e) {
	return __PRIVATE_getStore(e, Pe);
}
/**
* Helper to get a typed SimpleDbStore for the remoteDocuments object store.
*/ function __PRIVATE_remoteDocumentsStore(e) {
	return __PRIVATE_getStore(e, _e);
}
/**
* Returns a key that can be used for document lookups on the
* `DbRemoteDocumentDocumentKeyIndex` index.
*/ function __PRIVATE_dbKey(e) {
	const t = e.path.toArray();
	return [
		t.slice(0, t.length - 2),
		t[t.length - 2],
		t[t.length - 1]
	];
}
function __PRIVATE_dbCollectionGroupKey(e, t) {
	const n = t.documentKey.path.toArray();
	return [
		e,
		__PRIVATE_toDbTimestampKey(t.readTime),
		n.slice(0, n.length - 2),
		n.length > 0 ? n[n.length - 1] : ""
	];
}
/**
* Comparator that compares document keys according to the primary key sorting
* used by the `DbRemoteDocumentDocument` store (by prefix path, collection id
* and then document ID).
*
* Visible for testing.
*/ function __PRIVATE_dbKeyComparator(e, t) {
	const n = e.path.toArray(), r = t.path.toArray();
	let i = 0;
	for (let e$1 = 0; e$1 < n.length - 2 && e$1 < r.length - 2; ++e$1) if (i = __PRIVATE_primitiveComparator(n[e$1], r[e$1]), i) return i;
	return i = __PRIVATE_primitiveComparator(n.length, r.length), i || (i = __PRIVATE_primitiveComparator(n[n.length - 2], r[r.length - 2]), i || __PRIVATE_primitiveComparator(n[n.length - 1], r[r.length - 1]));
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Schema Version for the Web client:
* 1.  Initial version including Mutation Queue, Query Cache, and Remote
*     Document Cache
* 2.  Used to ensure a targetGlobal object exists and add targetCount to it. No
*     longer required because migration 3 unconditionally clears it.
* 3.  Dropped and re-created Query Cache to deal with cache corruption related
*     to limbo resolution. Addresses
*     https://github.com/firebase/firebase-ios-sdk/issues/1548
* 4.  Multi-Tab Support.
* 5.  Removal of held write acks.
* 6.  Create document global for tracking document cache size.
* 7.  Ensure every cached document has a sentinel row with a sequence number.
* 8.  Add collection-parent index for Collection Group queries.
* 9.  Change RemoteDocumentChanges store to be keyed by readTime rather than
*     an auto-incrementing ID. This is required for Index-Free queries.
* 10. Rewrite the canonical IDs to the explicit Protobuf-based format.
* 11. Add bundles and named_queries for bundle support.
* 12. Add document overlays.
* 13. Rewrite the keys of the remote document cache to allow for efficient
*     document lookup via `getAll()`.
* 14. Add overlays.
* 15. Add indexing support.
* 16. Parse timestamp strings before creating index entries.
* 17. TODO(tomandersen)
* 18. Encode key safe representations of IndexEntry in DbIndexEntryStore.
*/
/**
* @license
* Copyright 2022 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Represents a local view (overlay) of a document, and the fields that are
* locally mutated.
*/
var OverlayedDocument = class {
	constructor(e, t) {
		this.overlayedDocument = e, this.mutatedFields = t;
	}
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* A readonly view of the local state of all documents we're tracking (i.e. we
* have a cached version in remoteDocumentCache or local mutations for the
* document). The view is computed by applying the mutations in the
* MutationQueue to the RemoteDocumentCache.
*/ var LocalDocumentsView = class {
	constructor(e, t, n, r) {
		this.remoteDocumentCache = e, this.mutationQueue = t, this.documentOverlayCache = n, this.indexManager = r;
	}
	/**
	* Get the local view of the document identified by `key`.
	*
	* @returns Local view of the document or null if we don't have any cached
	* state for it.
	*/ getDocument(e, t) {
		let n = null;
		return this.documentOverlayCache.getOverlay(e, t).next(((r) => (n = r, this.remoteDocumentCache.getEntry(e, t)))).next(((e$1) => (null !== n && __PRIVATE_mutationApplyToLocalView(n.mutation, e$1, FieldMask.empty(), Timestamp.now()), e$1)));
	}
	/**
	* Gets the local view of the documents identified by `keys`.
	*
	* If we don't have cached state for a document in `keys`, a NoDocument will
	* be stored for that key in the resulting set.
	*/ getDocuments(e, t) {
		return this.remoteDocumentCache.getEntries(e, t).next(((t$1) => this.getLocalViewOfDocuments(e, t$1, __PRIVATE_documentKeySet()).next((() => t$1))));
	}
	/**
	* Similar to `getDocuments`, but creates the local view from the given
	* `baseDocs` without retrieving documents from the local store.
	*
	* @param transaction - The transaction this operation is scoped to.
	* @param docs - The documents to apply local mutations to get the local views.
	* @param existenceStateChanged - The set of document keys whose existence state
	*   is changed. This is useful to determine if some documents overlay needs
	*   to be recalculated.
	*/ getLocalViewOfDocuments(e, t, n = __PRIVATE_documentKeySet()) {
		const r = __PRIVATE_newOverlayMap();
		return this.populateOverlays(e, r, t).next((() => this.computeViews(e, t, r, n).next(((e$1) => {
			let t$1 = documentMap();
			return e$1.forEach(((e$2, n$1) => {
				t$1 = t$1.insert(e$2, n$1.overlayedDocument);
			})), t$1;
		}))));
	}
	/**
	* Gets the overlayed documents for the given document map, which will include
	* the local view of those documents and a `FieldMask` indicating which fields
	* are mutated locally, `null` if overlay is a Set or Delete mutation.
	*/ getOverlayedDocuments(e, t) {
		const n = __PRIVATE_newOverlayMap();
		return this.populateOverlays(e, n, t).next((() => this.computeViews(e, t, n, __PRIVATE_documentKeySet())));
	}
	/**
	* Fetches the overlays for {@code docs} and adds them to provided overlay map
	* if the map does not already contain an entry for the given document key.
	*/ populateOverlays(e, t, n) {
		const r = [];
		return n.forEach(((e$1) => {
			t.has(e$1) || r.push(e$1);
		})), this.documentOverlayCache.getOverlays(e, r).next(((e$1) => {
			e$1.forEach(((e$2, n$1) => {
				t.set(e$2, n$1);
			}));
		}));
	}
	/**
	* Computes the local view for the given documents.
	*
	* @param docs - The documents to compute views for. It also has the base
	*   version of the documents.
	* @param overlays - The overlays that need to be applied to the given base
	*   version of the documents.
	* @param existenceStateChanged - A set of documents whose existence states
	*   might have changed. This is used to determine if we need to re-calculate
	*   overlays from mutation queues.
	* @return A map represents the local documents view.
	*/ computeViews(e, t, n, r) {
		let i = __PRIVATE_mutableDocumentMap();
		const s = __PRIVATE_newDocumentKeyMap(), o = function __PRIVATE_newOverlayedDocumentMap() {
			return __PRIVATE_newDocumentKeyMap();
		}();
		return t.forEach(((e$1, t$1) => {
			const o$1 = n.get(t$1.key);
			r.has(t$1.key) && (void 0 === o$1 || o$1.mutation instanceof __PRIVATE_PatchMutation) ? i = i.insert(t$1.key, t$1) : void 0 !== o$1 ? (s.set(t$1.key, o$1.mutation.getFieldMask()), __PRIVATE_mutationApplyToLocalView(o$1.mutation, t$1, o$1.mutation.getFieldMask(), Timestamp.now())) : s.set(t$1.key, FieldMask.empty());
		})), this.recalculateAndSaveOverlays(e, i).next(((e$1) => (e$1.forEach(((e$2, t$1) => s.set(e$2, t$1))), t.forEach(((e$2, t$1) => o.set(e$2, new OverlayedDocument(t$1, s.get(e$2) ?? null)))), o)));
	}
	recalculateAndSaveOverlays(e, t) {
		const n = __PRIVATE_newDocumentKeyMap();
		let r = new SortedMap(((e$1, t$1) => e$1 - t$1)), i = __PRIVATE_documentKeySet();
		return this.mutationQueue.getAllMutationBatchesAffectingDocumentKeys(e, t).next(((e$1) => {
			for (const i$1 of e$1) i$1.keys().forEach(((e$2) => {
				const s = t.get(e$2);
				if (null === s) return;
				let o = n.get(e$2) || FieldMask.empty();
				o = i$1.applyToLocalView(s, o), n.set(e$2, o);
				const _ = (r.get(i$1.batchId) || __PRIVATE_documentKeySet()).add(e$2);
				r = r.insert(i$1.batchId, _);
			}));
		})).next((() => {
			const s = [], o = r.getReverseIterator();
			for (; o.hasNext();) {
				const r$1 = o.getNext(), _ = r$1.key, a = r$1.value, u = __PRIVATE_newMutationMap();
				a.forEach(((e$1) => {
					if (!i.has(e$1)) {
						const r$2 = __PRIVATE_calculateOverlayMutation(t.get(e$1), n.get(e$1));
						null !== r$2 && u.set(e$1, r$2), i = i.add(e$1);
					}
				})), s.push(this.documentOverlayCache.saveOverlays(e, _, u));
			}
			return PersistencePromise.waitFor(s);
		})).next((() => n));
	}
	/**
	* Recalculates overlays by reading the documents from remote document cache
	* first, and saves them after they are calculated.
	*/ recalculateAndSaveOverlaysForDocumentKeys(e, t) {
		return this.remoteDocumentCache.getEntries(e, t).next(((t$1) => this.recalculateAndSaveOverlays(e, t$1)));
	}
	/**
	* Performs a query against the local view of all documents.
	*
	* @param transaction - The persistence transaction.
	* @param query - The query to match documents against.
	* @param offset - Read time and key to start scanning by (exclusive).
	* @param context - A optional tracker to keep a record of important details
	*   during database local query execution.
	*/ getDocumentsMatchingQuery(e, t, n, r) {
		/**
		* Returns whether the query matches a single document by path (rather than a
		* collection).
		*/
		return function __PRIVATE_isDocumentQuery$1(e$1) {
			return DocumentKey.isDocumentKey(e$1.path) && null === e$1.collectionGroup && 0 === e$1.filters.length;
		}(t) ? this.getDocumentsMatchingDocumentQuery(e, t.path) : __PRIVATE_isCollectionGroupQuery(t) ? this.getDocumentsMatchingCollectionGroupQuery(e, t, n, r) : this.getDocumentsMatchingCollectionQuery(e, t, n, r);
	}
	/**
	* Given a collection group, returns the next documents that follow the provided offset, along
	* with an updated batch ID.
	*
	* <p>The documents returned by this method are ordered by remote version from the provided
	* offset. If there are no more remote documents after the provided offset, documents with
	* mutations in order of batch id from the offset are returned. Since all documents in a batch are
	* returned together, the total number of documents returned can exceed {@code count}.
	*
	* @param transaction
	* @param collectionGroup The collection group for the documents.
	* @param offset The offset to index into.
	* @param count The number of documents to return
	* @return A LocalWriteResult with the documents that follow the provided offset and the last processed batch id.
	*/ getNextDocuments(e, t, n, r) {
		return this.remoteDocumentCache.getAllFromCollectionGroup(e, t, n, r).next(((i) => {
			const s = r - i.size > 0 ? this.documentOverlayCache.getOverlaysForCollectionGroup(e, t, n.largestBatchId, r - i.size) : PersistencePromise.resolve(__PRIVATE_newOverlayMap());
			let o = U, _ = i;
			return s.next(((t$1) => PersistencePromise.forEach(t$1, ((t$2, n$1) => (o < n$1.largestBatchId && (o = n$1.largestBatchId), i.get(t$2) ? PersistencePromise.resolve() : this.remoteDocumentCache.getEntry(e, t$2).next(((e$1) => {
				_ = _.insert(t$2, e$1);
			}))))).next((() => this.populateOverlays(e, t$1, i))).next((() => this.computeViews(e, _, t$1, __PRIVATE_documentKeySet()))).next(((e$1) => ({
				batchId: o,
				changes: __PRIVATE_convertOverlayedDocumentMapToDocumentMap(e$1)
			})))));
		}));
	}
	getDocumentsMatchingDocumentQuery(e, t) {
		return this.getDocument(e, new DocumentKey(t)).next(((e$1) => {
			let t$1 = documentMap();
			return e$1.isFoundDocument() && (t$1 = t$1.insert(e$1.key, e$1)), t$1;
		}));
	}
	getDocumentsMatchingCollectionGroupQuery(e, t, n, r) {
		const i = t.collectionGroup;
		let s = documentMap();
		return this.indexManager.getCollectionParents(e, i).next(((o) => PersistencePromise.forEach(o, ((o$1) => {
			const _ = function __PRIVATE_asCollectionQueryAtPath(e$1, t$1) {
				return new __PRIVATE_QueryImpl(t$1, null, e$1.explicitOrderBy.slice(), e$1.filters.slice(), e$1.limit, e$1.limitType, e$1.startAt, e$1.endAt);
			}(t, o$1.child(i));
			return this.getDocumentsMatchingCollectionQuery(e, _, n, r).next(((e$1) => {
				e$1.forEach(((e$2, t$1) => {
					s = s.insert(e$2, t$1);
				}));
			}));
		})).next((() => s))));
	}
	getDocumentsMatchingCollectionQuery(e, t, n, r) {
		let i;
		return this.documentOverlayCache.getOverlaysForCollection(e, t.path, n.largestBatchId).next(((s) => (i = s, this.remoteDocumentCache.getDocumentsMatchingQuery(e, t, n, i, r)))).next(((e$1) => {
			i.forEach(((t$1, n$2) => {
				const r$1 = n$2.getKey();
				null === e$1.get(r$1) && (e$1 = e$1.insert(r$1, MutableDocument.newInvalidDocument(r$1)));
			}));
			let n$1 = documentMap();
			return e$1.forEach(((e$2, r$1) => {
				const s = i.get(e$2);
				void 0 !== s && __PRIVATE_mutationApplyToLocalView(s.mutation, r$1, FieldMask.empty(), Timestamp.now()), __PRIVATE_queryMatches(t, r$1) && (n$1 = n$1.insert(e$2, r$1));
			})), n$1;
		}));
	}
};
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ var __PRIVATE_MemoryBundleCache = class {
	constructor(e) {
		this.serializer = e, this.Lr = /* @__PURE__ */ new Map(), this.kr = /* @__PURE__ */ new Map();
	}
	getBundleMetadata(e, t) {
		return PersistencePromise.resolve(this.Lr.get(t));
	}
	saveBundleMetadata(e, t) {
		return this.Lr.set(
			t.id,
			/** Decodes a BundleMetadata proto into a BundleMetadata object. */
			function __PRIVATE_fromBundleMetadata(e$1) {
				return {
					id: e$1.id,
					version: e$1.version,
					createTime: __PRIVATE_fromVersion(e$1.createTime)
				};
			}(t)
		), PersistencePromise.resolve();
	}
	getNamedQuery(e, t) {
		return PersistencePromise.resolve(this.kr.get(t));
	}
	saveNamedQuery(e, t) {
		return this.kr.set(t.name, function __PRIVATE_fromProtoNamedQuery(e$1) {
			return {
				name: e$1.name,
				query: __PRIVATE_fromBundledQuery(e$1.bundledQuery),
				readTime: __PRIVATE_fromVersion(e$1.readTime)
			};
		}(t)), PersistencePromise.resolve();
	}
};
/**
* @license
* Copyright 2022 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* An in-memory implementation of DocumentOverlayCache.
*/ var __PRIVATE_MemoryDocumentOverlayCache = class {
	constructor() {
		this.overlays = new SortedMap(DocumentKey.comparator), this.qr = /* @__PURE__ */ new Map();
	}
	getOverlay(e, t) {
		return PersistencePromise.resolve(this.overlays.get(t));
	}
	getOverlays(e, t) {
		const n = __PRIVATE_newOverlayMap();
		return PersistencePromise.forEach(t, ((t$1) => this.getOverlay(e, t$1).next(((e$1) => {
			null !== e$1 && n.set(t$1, e$1);
		})))).next((() => n));
	}
	saveOverlays(e, t, n) {
		return n.forEach(((n$1, r) => {
			this.St(e, t, r);
		})), PersistencePromise.resolve();
	}
	removeOverlaysForBatchId(e, t, n) {
		const r = this.qr.get(n);
		return void 0 !== r && (r.forEach(((e$1) => this.overlays = this.overlays.remove(e$1))), this.qr.delete(n)), PersistencePromise.resolve();
	}
	getOverlaysForCollection(e, t, n) {
		const r = __PRIVATE_newOverlayMap(), i = t.length + 1, s = new DocumentKey(t.child("")), o = this.overlays.getIteratorFrom(s);
		for (; o.hasNext();) {
			const e$1 = o.getNext().value, s$1 = e$1.getKey();
			if (!t.isPrefixOf(s$1.path)) break;
			s$1.path.length === i && e$1.largestBatchId > n && r.set(e$1.getKey(), e$1);
		}
		return PersistencePromise.resolve(r);
	}
	getOverlaysForCollectionGroup(e, t, n, r) {
		let i = new SortedMap(((e$1, t$1) => e$1 - t$1));
		const s = this.overlays.getIterator();
		for (; s.hasNext();) {
			const e$1 = s.getNext().value;
			if (e$1.getKey().getCollectionGroup() === t && e$1.largestBatchId > n) {
				let t$1 = i.get(e$1.largestBatchId);
				null === t$1 && (t$1 = __PRIVATE_newOverlayMap(), i = i.insert(e$1.largestBatchId, t$1)), t$1.set(e$1.getKey(), e$1);
			}
		}
		const o = __PRIVATE_newOverlayMap(), _ = i.getIterator();
		for (; _.hasNext();) if (_.getNext().value.forEach(((e$1, t$1) => o.set(e$1, t$1))), o.size() >= r) break;
		return PersistencePromise.resolve(o);
	}
	St(e, t, n) {
		const r = this.overlays.get(n.key);
		if (null !== r) {
			const e$1 = this.qr.get(r.largestBatchId).delete(n.key);
			this.qr.set(r.largestBatchId, e$1);
		}
		this.overlays = this.overlays.insert(n.key, new Overlay(t, n));
		let i = this.qr.get(t);
		void 0 === i && (i = __PRIVATE_documentKeySet(), this.qr.set(t, i)), this.qr.set(t, i.add(n.key));
	}
};
/**
* @license
* Copyright 2024 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ var __PRIVATE_MemoryGlobalsCache = class {
	constructor() {
		this.sessionToken = ByteString.EMPTY_BYTE_STRING;
	}
	getSessionToken(e) {
		return PersistencePromise.resolve(this.sessionToken);
	}
	setSessionToken(e, t) {
		return this.sessionToken = t, PersistencePromise.resolve();
	}
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* A collection of references to a document from some kind of numbered entity
* (either a target ID or batch ID). As references are added to or removed from
* the set corresponding events are emitted to a registered garbage collector.
*
* Each reference is represented by a DocumentReference object. Each of them
* contains enough information to uniquely identify the reference. They are all
* stored primarily in a set sorted by key. A document is considered garbage if
* there's no references in that set (this can be efficiently checked thanks to
* sorting by key).
*
* ReferenceSet also keeps a secondary set that contains references sorted by
* IDs. This one is used to efficiently implement removal of all references by
* some target ID.
*/ var __PRIVATE_ReferenceSet = class {
	constructor() {
		this.Qr = new SortedSet(__PRIVATE_DocReference.$r), this.Ur = new SortedSet(__PRIVATE_DocReference.Kr);
	}
	/** Returns true if the reference set contains no references. */ isEmpty() {
		return this.Qr.isEmpty();
	}
	/** Adds a reference to the given document key for the given ID. */ addReference(e, t) {
		const n = new __PRIVATE_DocReference(e, t);
		this.Qr = this.Qr.add(n), this.Ur = this.Ur.add(n);
	}
	/** Add references to the given document keys for the given ID. */ Wr(e, t) {
		e.forEach(((e$1) => this.addReference(e$1, t)));
	}
	/**
	* Removes a reference to the given document key for the given
	* ID.
	*/ removeReference(e, t) {
		this.Gr(new __PRIVATE_DocReference(e, t));
	}
	zr(e, t) {
		e.forEach(((e$1) => this.removeReference(e$1, t)));
	}
	/**
	* Clears all references with a given ID. Calls removeRef() for each key
	* removed.
	*/ jr(e) {
		const t = new DocumentKey(new ResourcePath([])), n = new __PRIVATE_DocReference(t, e), r = new __PRIVATE_DocReference(t, e + 1), i = [];
		return this.Ur.forEachInRange([n, r], ((e$1) => {
			this.Gr(e$1), i.push(e$1.key);
		})), i;
	}
	Jr() {
		this.Qr.forEach(((e) => this.Gr(e)));
	}
	Gr(e) {
		this.Qr = this.Qr.delete(e), this.Ur = this.Ur.delete(e);
	}
	Hr(e) {
		const t = new DocumentKey(new ResourcePath([])), n = new __PRIVATE_DocReference(t, e), r = new __PRIVATE_DocReference(t, e + 1);
		let i = __PRIVATE_documentKeySet();
		return this.Ur.forEachInRange([n, r], ((e$1) => {
			i = i.add(e$1.key);
		})), i;
	}
	containsKey(e) {
		const t = new __PRIVATE_DocReference(e, 0), n = this.Qr.firstAfterOrEqual(t);
		return null !== n && e.isEqual(n.key);
	}
};
var __PRIVATE_DocReference = class {
	constructor(e, t) {
		this.key = e, this.Yr = t;
	}
	/** Compare by key then by ID */ static $r(e, t) {
		return DocumentKey.comparator(e.key, t.key) || __PRIVATE_primitiveComparator(e.Yr, t.Yr);
	}
	/** Compare by ID then by key */ static Kr(e, t) {
		return __PRIVATE_primitiveComparator(e.Yr, t.Yr) || DocumentKey.comparator(e.key, t.key);
	}
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ var __PRIVATE_MemoryMutationQueue = class {
	constructor(e, t) {
		this.indexManager = e, this.referenceDelegate = t, this.mutationQueue = [], this.tr = 1, this.Zr = new SortedSet(__PRIVATE_DocReference.$r);
	}
	checkEmpty(e) {
		return PersistencePromise.resolve(0 === this.mutationQueue.length);
	}
	addMutationBatch(e, t, n, r) {
		const i = this.tr;
		this.tr++, this.mutationQueue.length > 0 && this.mutationQueue[this.mutationQueue.length - 1];
		const s = new MutationBatch(i, t, n, r);
		this.mutationQueue.push(s);
		for (const t$1 of r) this.Zr = this.Zr.add(new __PRIVATE_DocReference(t$1.key, i)), this.indexManager.addToCollectionParentIndex(e, t$1.key.path.popLast());
		return PersistencePromise.resolve(s);
	}
	lookupMutationBatch(e, t) {
		return PersistencePromise.resolve(this.Xr(t));
	}
	getNextMutationBatchAfterBatchId(e, t) {
		const n = t + 1, r = this.ei(n), i = r < 0 ? 0 : r;
		return PersistencePromise.resolve(this.mutationQueue.length > i ? this.mutationQueue[i] : null);
	}
	getHighestUnacknowledgedBatchId() {
		return PersistencePromise.resolve(0 === this.mutationQueue.length ? j : this.tr - 1);
	}
	getAllMutationBatches(e) {
		return PersistencePromise.resolve(this.mutationQueue.slice());
	}
	getAllMutationBatchesAffectingDocumentKey(e, t) {
		const n = new __PRIVATE_DocReference(t, 0), r = new __PRIVATE_DocReference(t, Number.POSITIVE_INFINITY), i = [];
		return this.Zr.forEachInRange([n, r], ((e$1) => {
			const t$1 = this.Xr(e$1.Yr);
			i.push(t$1);
		})), PersistencePromise.resolve(i);
	}
	getAllMutationBatchesAffectingDocumentKeys(e, t) {
		let n = new SortedSet(__PRIVATE_primitiveComparator);
		return t.forEach(((e$1) => {
			const t$1 = new __PRIVATE_DocReference(e$1, 0), r = new __PRIVATE_DocReference(e$1, Number.POSITIVE_INFINITY);
			this.Zr.forEachInRange([t$1, r], ((e$2) => {
				n = n.add(e$2.Yr);
			}));
		})), PersistencePromise.resolve(this.ti(n));
	}
	getAllMutationBatchesAffectingQuery(e, t) {
		const n = t.path, r = n.length + 1;
		let i = n;
		DocumentKey.isDocumentKey(i) || (i = i.child(""));
		const s = new __PRIVATE_DocReference(new DocumentKey(i), 0);
		let o = new SortedSet(__PRIVATE_primitiveComparator);
		return this.Zr.forEachWhile(((e$1) => {
			const t$1 = e$1.key.path;
			return !!n.isPrefixOf(t$1) && (t$1.length === r && (o = o.add(e$1.Yr)), !0);
		}), s), PersistencePromise.resolve(this.ti(o));
	}
	ti(e) {
		const t = [];
		return e.forEach(((e$1) => {
			const n = this.Xr(e$1);
			null !== n && t.push(n);
		})), t;
	}
	removeMutationBatch(e, t) {
		__PRIVATE_hardAssert(0 === this.ni(t.batchId, "removed"), 55003), this.mutationQueue.shift();
		let n = this.Zr;
		return PersistencePromise.forEach(t.mutations, ((r) => {
			const i = new __PRIVATE_DocReference(r.key, t.batchId);
			return n = n.delete(i), this.referenceDelegate.markPotentiallyOrphaned(e, r.key);
		})).next((() => {
			this.Zr = n;
		}));
	}
	ir(e) {}
	containsKey(e, t) {
		const n = new __PRIVATE_DocReference(t, 0), r = this.Zr.firstAfterOrEqual(n);
		return PersistencePromise.resolve(t.isEqual(r && r.key));
	}
	performConsistencyCheck(e) {
		return this.mutationQueue.length, PersistencePromise.resolve();
	}
	/**
	* Finds the index of the given batchId in the mutation queue and asserts that
	* the resulting index is within the bounds of the queue.
	*
	* @param batchId - The batchId to search for
	* @param action - A description of what the caller is doing, phrased in passive
	* form (e.g. "acknowledged" in a routine that acknowledges batches).
	*/ ni(e, t) {
		return this.ei(e);
	}
	/**
	* Finds the index of the given batchId in the mutation queue. This operation
	* is O(1).
	*
	* @returns The computed index of the batch with the given batchId, based on
	* the state of the queue. Note this index can be negative if the requested
	* batchId has already been removed from the queue or past the end of the
	* queue if the batchId is larger than the last added batch.
	*/ ei(e) {
		if (0 === this.mutationQueue.length) return 0;
		return e - this.mutationQueue[0].batchId;
	}
	/**
	* A version of lookupMutationBatch that doesn't return a promise, this makes
	* other functions that uses this code easier to read and more efficient.
	*/ Xr(e) {
		const t = this.ei(e);
		if (t < 0 || t >= this.mutationQueue.length) return null;
		return this.mutationQueue[t];
	}
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* The smallest value representable by a 64-bit signed integer (long).
*/
/**
* The memory-only RemoteDocumentCache for IndexedDb. To construct, invoke
* `newMemoryRemoteDocumentCache()`.
*/
var __PRIVATE_MemoryRemoteDocumentCacheImpl = class {
	/**
	* @param sizer - Used to assess the size of a document. For eager GC, this is
	* expected to just return 0 to avoid unnecessarily doing the work of
	* calculating the size.
	*/
	constructor(e) {
		this.ri = e, this.docs = function __PRIVATE_documentEntryMap() {
			return new SortedMap(DocumentKey.comparator);
		}(), this.size = 0;
	}
	setIndexManager(e) {
		this.indexManager = e;
	}
	/**
	* Adds the supplied entry to the cache and updates the cache size as appropriate.
	*
	* All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer
	* returned by `newChangeBuffer()`.
	*/ addEntry(e, t) {
		const n = t.key, r = this.docs.get(n), i = r ? r.size : 0, s = this.ri(t);
		return this.docs = this.docs.insert(n, {
			document: t.mutableCopy(),
			size: s
		}), this.size += s - i, this.indexManager.addToCollectionParentIndex(e, n.path.popLast());
	}
	/**
	* Removes the specified entry from the cache and updates the cache size as appropriate.
	*
	* All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer
	* returned by `newChangeBuffer()`.
	*/ removeEntry(e) {
		const t = this.docs.get(e);
		t && (this.docs = this.docs.remove(e), this.size -= t.size);
	}
	getEntry(e, t) {
		const n = this.docs.get(t);
		return PersistencePromise.resolve(n ? n.document.mutableCopy() : MutableDocument.newInvalidDocument(t));
	}
	getEntries(e, t) {
		let n = __PRIVATE_mutableDocumentMap();
		return t.forEach(((e$1) => {
			const t$1 = this.docs.get(e$1);
			n = n.insert(e$1, t$1 ? t$1.document.mutableCopy() : MutableDocument.newInvalidDocument(e$1));
		})), PersistencePromise.resolve(n);
	}
	getDocumentsMatchingQuery(e, t, n, r) {
		let i = __PRIVATE_mutableDocumentMap();
		const s = t.path, o = new DocumentKey(s.child("__id-9223372036854775808__")), _ = this.docs.getIteratorFrom(o);
		for (; _.hasNext();) {
			const { key: e$1, value: { document: o$1 } } = _.getNext();
			if (!s.isPrefixOf(e$1.path)) break;
			e$1.path.length > s.length + 1 || __PRIVATE_indexOffsetComparator(__PRIVATE_newIndexOffsetFromDocument(o$1), n) <= 0 || (r.has(o$1.key) || __PRIVATE_queryMatches(t, o$1)) && (i = i.insert(o$1.key, o$1.mutableCopy()));
		}
		return PersistencePromise.resolve(i);
	}
	getAllFromCollectionGroup(e, t, n, r) {
		fail(9500);
	}
	ii(e, t) {
		return PersistencePromise.forEach(this.docs, ((e$1) => t(e$1)));
	}
	newChangeBuffer(e) {
		return new __PRIVATE_MemoryRemoteDocumentChangeBuffer(this);
	}
	getSize(e) {
		return PersistencePromise.resolve(this.size);
	}
};
/**
* Creates a new memory-only RemoteDocumentCache.
*
* @param sizer - Used to assess the size of a document. For eager GC, this is
* expected to just return 0 to avoid unnecessarily doing the work of
* calculating the size.
*/
/**
* Handles the details of adding and updating documents in the MemoryRemoteDocumentCache.
*/
var __PRIVATE_MemoryRemoteDocumentChangeBuffer = class extends RemoteDocumentChangeBuffer {
	constructor(e) {
		super(), this.Nr = e;
	}
	applyChanges(e) {
		const t = [];
		return this.changes.forEach(((n, r) => {
			r.isValidDocument() ? t.push(this.Nr.addEntry(e, r)) : this.Nr.removeEntry(n);
		})), PersistencePromise.waitFor(t);
	}
	getFromCache(e, t) {
		return this.Nr.getEntry(e, t);
	}
	getAllFromCache(e, t) {
		return this.Nr.getEntries(e, t);
	}
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ var __PRIVATE_MemoryTargetCache = class {
	constructor(e) {
		this.persistence = e, this.si = new ObjectMap(((e$1) => __PRIVATE_canonifyTarget(e$1)), __PRIVATE_targetEquals), this.lastRemoteSnapshotVersion = SnapshotVersion.min(), this.highestTargetId = 0, this.oi = 0, this._i = new __PRIVATE_ReferenceSet(), this.targetCount = 0, this.ai = __PRIVATE_TargetIdGenerator.ur();
	}
	forEachTarget(e, t) {
		return this.si.forEach(((e$1, n) => t(n))), PersistencePromise.resolve();
	}
	getLastRemoteSnapshotVersion(e) {
		return PersistencePromise.resolve(this.lastRemoteSnapshotVersion);
	}
	getHighestSequenceNumber(e) {
		return PersistencePromise.resolve(this.oi);
	}
	allocateTargetId(e) {
		return this.highestTargetId = this.ai.next(), PersistencePromise.resolve(this.highestTargetId);
	}
	setTargetsMetadata(e, t, n) {
		return n && (this.lastRemoteSnapshotVersion = n), t > this.oi && (this.oi = t), PersistencePromise.resolve();
	}
	Pr(e) {
		this.si.set(e.target, e);
		const t = e.targetId;
		t > this.highestTargetId && (this.ai = new __PRIVATE_TargetIdGenerator(t), this.highestTargetId = t), e.sequenceNumber > this.oi && (this.oi = e.sequenceNumber);
	}
	addTargetData(e, t) {
		return this.Pr(t), this.targetCount += 1, PersistencePromise.resolve();
	}
	updateTargetData(e, t) {
		return this.Pr(t), PersistencePromise.resolve();
	}
	removeTargetData(e, t) {
		return this.si.delete(t.target), this._i.jr(t.targetId), this.targetCount -= 1, PersistencePromise.resolve();
	}
	removeTargets(e, t, n) {
		let r = 0;
		const i = [];
		return this.si.forEach(((s, o) => {
			o.sequenceNumber <= t && null === n.get(o.targetId) && (this.si.delete(s), i.push(this.removeMatchingKeysForTargetId(e, o.targetId)), r++);
		})), PersistencePromise.waitFor(i).next((() => r));
	}
	getTargetCount(e) {
		return PersistencePromise.resolve(this.targetCount);
	}
	getTargetData(e, t) {
		const n = this.si.get(t) || null;
		return PersistencePromise.resolve(n);
	}
	addMatchingKeys(e, t, n) {
		return this._i.Wr(t, n), PersistencePromise.resolve();
	}
	removeMatchingKeys(e, t, n) {
		this._i.zr(t, n);
		const r = this.persistence.referenceDelegate, i = [];
		return r && t.forEach(((t$1) => {
			i.push(r.markPotentiallyOrphaned(e, t$1));
		})), PersistencePromise.waitFor(i);
	}
	removeMatchingKeysForTargetId(e, t) {
		return this._i.jr(t), PersistencePromise.resolve();
	}
	getMatchingKeysForTargetId(e, t) {
		const n = this._i.Hr(t);
		return PersistencePromise.resolve(n);
	}
	containsKey(e, t) {
		return PersistencePromise.resolve(this._i.containsKey(t));
	}
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* A memory-backed instance of Persistence. Data is stored only in RAM and
* not persisted across sessions.
*/
var __PRIVATE_MemoryPersistence = class {
	/**
	* The constructor accepts a factory for creating a reference delegate. This
	* allows both the delegate and this instance to have strong references to
	* each other without having nullable fields that would then need to be
	* checked or asserted on every access.
	*/
	constructor(e, t) {
		this.ui = {}, this.overlays = {}, this.ci = new __PRIVATE_ListenSequence(0), this.li = !1, this.li = !0, this.hi = new __PRIVATE_MemoryGlobalsCache(), this.referenceDelegate = e(this), this.Pi = new __PRIVATE_MemoryTargetCache(this);
		this.indexManager = new __PRIVATE_MemoryIndexManager(), this.remoteDocumentCache = function __PRIVATE_newMemoryRemoteDocumentCache(e$1) {
			return new __PRIVATE_MemoryRemoteDocumentCacheImpl(e$1);
		}(((e$1) => this.referenceDelegate.Ti(e$1))), this.serializer = new __PRIVATE_LocalSerializer(t), this.Ii = new __PRIVATE_MemoryBundleCache(this.serializer);
	}
	start() {
		return Promise.resolve();
	}
	shutdown() {
		return this.li = !1, Promise.resolve();
	}
	get started() {
		return this.li;
	}
	setDatabaseDeletedListener() {}
	setNetworkEnabled() {}
	getIndexManager(e) {
		return this.indexManager;
	}
	getDocumentOverlayCache(e) {
		let t = this.overlays[e.toKey()];
		return t || (t = new __PRIVATE_MemoryDocumentOverlayCache(), this.overlays[e.toKey()] = t), t;
	}
	getMutationQueue(e, t) {
		let n = this.ui[e.toKey()];
		return n || (n = new __PRIVATE_MemoryMutationQueue(t, this.referenceDelegate), this.ui[e.toKey()] = n), n;
	}
	getGlobalsCache() {
		return this.hi;
	}
	getTargetCache() {
		return this.Pi;
	}
	getRemoteDocumentCache() {
		return this.remoteDocumentCache;
	}
	getBundleCache() {
		return this.Ii;
	}
	runTransaction(e, t, n) {
		__PRIVATE_logDebug("MemoryPersistence", "Starting transaction:", e);
		const r = new __PRIVATE_MemoryTransaction(this.ci.next());
		return this.referenceDelegate.Ei(), n(r).next(((e$1) => this.referenceDelegate.di(r).next((() => e$1)))).toPromise().then(((e$1) => (r.raiseOnCommittedEvent(), e$1)));
	}
	Ai(e, t) {
		return PersistencePromise.or(Object.values(this.ui).map(((n) => () => n.containsKey(e, t))));
	}
};
/**
* Memory persistence is not actually transactional, but future implementations
* may have transaction-scoped state.
*/ var __PRIVATE_MemoryTransaction = class extends PersistenceTransaction {
	constructor(e) {
		super(), this.currentSequenceNumber = e;
	}
};
var __PRIVATE_MemoryEagerDelegate = class __PRIVATE_MemoryEagerDelegate {
	constructor(e) {
		this.persistence = e, this.Ri = new __PRIVATE_ReferenceSet(), this.Vi = null;
	}
	static mi(e) {
		return new __PRIVATE_MemoryEagerDelegate(e);
	}
	get fi() {
		if (this.Vi) return this.Vi;
		throw fail(60996);
	}
	addReference(e, t, n) {
		return this.Ri.addReference(n, t), this.fi.delete(n.toString()), PersistencePromise.resolve();
	}
	removeReference(e, t, n) {
		return this.Ri.removeReference(n, t), this.fi.add(n.toString()), PersistencePromise.resolve();
	}
	markPotentiallyOrphaned(e, t) {
		return this.fi.add(t.toString()), PersistencePromise.resolve();
	}
	removeTarget(e, t) {
		this.Ri.jr(t.targetId).forEach(((e$1) => this.fi.add(e$1.toString())));
		const n = this.persistence.getTargetCache();
		return n.getMatchingKeysForTargetId(e, t.targetId).next(((e$1) => {
			e$1.forEach(((e$2) => this.fi.add(e$2.toString())));
		})).next((() => n.removeTargetData(e, t)));
	}
	Ei() {
		this.Vi = /* @__PURE__ */ new Set();
	}
	di(e) {
		const t = this.persistence.getRemoteDocumentCache().newChangeBuffer();
		return PersistencePromise.forEach(this.fi, ((n) => {
			const r = DocumentKey.fromPath(n);
			return this.gi(e, r).next(((e$1) => {
				e$1 || t.removeEntry(r, SnapshotVersion.min());
			}));
		})).next((() => (this.Vi = null, t.apply(e))));
	}
	updateLimboDocument(e, t) {
		return this.gi(e, t).next(((e$1) => {
			e$1 ? this.fi.delete(t.toString()) : this.fi.add(t.toString());
		}));
	}
	Ti(e) {
		return 0;
	}
	gi(e, t) {
		return PersistencePromise.or([
			() => PersistencePromise.resolve(this.Ri.containsKey(t)),
			() => this.persistence.getTargetCache().containsKey(e, t),
			() => this.persistence.Ai(e, t)
		]);
	}
};
var __PRIVATE_MemoryLruDelegate = class __PRIVATE_MemoryLruDelegate {
	constructor(e, t) {
		this.persistence = e, this.pi = new ObjectMap(((e$1) => __PRIVATE_encodeResourcePath(e$1.path)), ((e$1, t$1) => e$1.isEqual(t$1))), this.garbageCollector = __PRIVATE_newLruGarbageCollector(this, t);
	}
	static mi(e, t) {
		return new __PRIVATE_MemoryLruDelegate(e, t);
	}
	Ei() {}
	di(e) {
		return PersistencePromise.resolve();
	}
	forEachTarget(e, t) {
		return this.persistence.getTargetCache().forEachTarget(e, t);
	}
	gr(e) {
		const t = this.wr(e);
		return this.persistence.getTargetCache().getTargetCount(e).next(((e$1) => t.next(((t$1) => e$1 + t$1))));
	}
	wr(e) {
		let t = 0;
		return this.pr(e, ((e$1) => {
			t++;
		})).next((() => t));
	}
	pr(e, t) {
		return PersistencePromise.forEach(this.pi, ((n, r) => this.br(e, n, r).next(((e$1) => e$1 ? PersistencePromise.resolve() : t(r)))));
	}
	removeTargets(e, t, n) {
		return this.persistence.getTargetCache().removeTargets(e, t, n);
	}
	removeOrphanedDocuments(e, t) {
		let n = 0;
		const r = this.persistence.getRemoteDocumentCache(), i = r.newChangeBuffer();
		return r.ii(e, ((r$1) => this.br(e, r$1, t).next(((e$1) => {
			e$1 || (n++, i.removeEntry(r$1, SnapshotVersion.min()));
		})))).next((() => i.apply(e))).next((() => n));
	}
	markPotentiallyOrphaned(e, t) {
		return this.pi.set(t, e.currentSequenceNumber), PersistencePromise.resolve();
	}
	removeTarget(e, t) {
		const n = t.withSequenceNumber(e.currentSequenceNumber);
		return this.persistence.getTargetCache().updateTargetData(e, n);
	}
	addReference(e, t, n) {
		return this.pi.set(n, e.currentSequenceNumber), PersistencePromise.resolve();
	}
	removeReference(e, t, n) {
		return this.pi.set(n, e.currentSequenceNumber), PersistencePromise.resolve();
	}
	updateLimboDocument(e, t) {
		return this.pi.set(t, e.currentSequenceNumber), PersistencePromise.resolve();
	}
	Ti(e) {
		let t = e.key.toString().length;
		return e.isFoundDocument() && (t += __PRIVATE_estimateByteSize(e.data.value)), t;
	}
	br(e, t, n) {
		return PersistencePromise.or([
			() => this.persistence.Ai(e, t),
			() => this.persistence.getTargetCache().containsKey(e, t),
			() => {
				const e$1 = this.pi.get(t);
				return PersistencePromise.resolve(void 0 !== e$1 && e$1 > n);
			}
		]);
	}
	getCacheSize(e) {
		return this.persistence.getRemoteDocumentCache().getSize(e);
	}
};
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/** Performs database creation and schema upgrades. */ var __PRIVATE_SchemaConverter = class {
	constructor(e) {
		this.serializer = e;
	}
	/**
	* Performs database creation and schema upgrades.
	*
	* Note that in production, this method is only ever used to upgrade the schema
	* to SCHEMA_VERSION. Different values of toVersion are only used for testing
	* and local feature development.
	*/ k(e, t, n, r) {
		const i = new __PRIVATE_SimpleDbTransaction("createOrUpgrade", t);
		n < 1 && r >= 1 && (function __PRIVATE_createPrimaryClientStore(e$1) {
			e$1.createObjectStore(Y);
		}(e), function __PRIVATE_createMutationQueue(e$1) {
			e$1.createObjectStore(X, { keyPath: ee });
			e$1.createObjectStore(te, {
				keyPath: ne,
				autoIncrement: !0
			}).createIndex(re, ie, { unique: !0 }), e$1.createObjectStore(oe);
		}(e), __PRIVATE_createQueryCache(e), function __PRIVATE_createLegacyRemoteDocumentCache(e$1) {
			e$1.createObjectStore(H);
		}(e));
		let s = PersistencePromise.resolve();
		return n < 3 && r >= 3 && (0 !== n && (function __PRIVATE_dropQueryCache(e$1) {
			e$1.deleteObjectStore(Ae), e$1.deleteObjectStore(Ie), e$1.deleteObjectStore(ge);
		}(e), __PRIVATE_createQueryCache(e)), s = s.next((() => function __PRIVATE_writeEmptyTargetGlobalEntry(e$1) {
			const t$1 = e$1.store(ge), n$1 = {
				highestTargetId: 0,
				highestListenSequenceNumber: 0,
				lastRemoteSnapshotVersion: SnapshotVersion.min().toTimestamp(),
				targetCount: 0
			};
			return t$1.put(fe, n$1);
		}(i)))), n < 4 && r >= 4 && (0 !== n && (s = s.next((() => function __PRIVATE_upgradeMutationBatchSchemaAndMigrateData(e$1, t$1) {
			return t$1.store(te).J().next(((n$1) => {
				e$1.deleteObjectStore(te);
				e$1.createObjectStore(te, {
					keyPath: ne,
					autoIncrement: !0
				}).createIndex(re, ie, { unique: !0 });
				const r$1 = t$1.store(te), i$1 = n$1.map(((e$2) => r$1.put(e$2)));
				return PersistencePromise.waitFor(i$1);
			}));
		}(e, i)))), s = s.next((() => {
			(function __PRIVATE_createClientMetadataStore(e$1) {
				e$1.createObjectStore(we, { keyPath: Se });
			})(e);
		}))), n < 5 && r >= 5 && (s = s.next((() => this.yi(i)))), n < 6 && r >= 6 && (s = s.next((() => (function __PRIVATE_createDocumentGlobalStore(e$1) {
			e$1.createObjectStore(Pe);
		}(e), this.wi(i))))), n < 7 && r >= 7 && (s = s.next((() => this.Si(i)))), n < 8 && r >= 8 && (s = s.next((() => this.bi(e, i)))), n < 9 && r >= 9 && (s = s.next((() => {
			(function __PRIVATE_dropRemoteDocumentChangesStore(e$1) {
				e$1.objectStoreNames.contains("remoteDocumentChanges") && e$1.deleteObjectStore("remoteDocumentChanges");
			})(e);
		}))), n < 10 && r >= 10 && (s = s.next((() => this.Di(i)))), n < 11 && r >= 11 && (s = s.next((() => {
			(function __PRIVATE_createBundlesStore(e$1) {
				e$1.createObjectStore(be, { keyPath: De });
			})(e), function __PRIVATE_createNamedQueriesStore(e$1) {
				e$1.createObjectStore(Ce, { keyPath: ve });
			}(e);
		}))), n < 12 && r >= 12 && (s = s.next((() => {
			(function __PRIVATE_createDocumentOverlayStore(e$1) {
				const t$1 = e$1.createObjectStore(Ke, { keyPath: We });
				t$1.createIndex(Ge, ze, { unique: !1 }), t$1.createIndex(je, Je, { unique: !1 });
			})(e);
		}))), n < 13 && r >= 13 && (s = s.next((() => function __PRIVATE_createRemoteDocumentCache(e$1) {
			const t$1 = e$1.createObjectStore(_e, { keyPath: ae });
			t$1.createIndex(ue, ce), t$1.createIndex(le, he);
		}(e))).next((() => this.Ci(e, i))).next((() => e.deleteObjectStore(H)))), n < 14 && r >= 14 && (s = s.next((() => this.Fi(e, i)))), n < 15 && r >= 15 && (s = s.next((() => function __PRIVATE_createFieldIndex(e$1) {
			e$1.createObjectStore(Fe, {
				keyPath: Me,
				autoIncrement: !0
			}).createIndex(xe, Oe, { unique: !1 });
			e$1.createObjectStore(Ne, { keyPath: Be }).createIndex(Le, ke, { unique: !1 });
			e$1.createObjectStore(qe, { keyPath: Qe }).createIndex($e, Ue, { unique: !1 });
		}(e)))), n < 16 && r >= 16 && (s = s.next((() => {
			t.objectStore(Ne).clear();
		})).next((() => {
			t.objectStore(qe).clear();
		}))), n < 17 && r >= 17 && (s = s.next((() => {
			(function __PRIVATE_createGlobalsStore(e$1) {
				e$1.createObjectStore(He, { keyPath: Ye });
			})(e);
		}))), n < 18 && r >= 18 && isSafariOrWebkit() && (s = s.next((() => {
			t.objectStore(Ne).clear();
		})).next((() => {
			t.objectStore(qe).clear();
		}))), s;
	}
	wi(e) {
		let t = 0;
		return e.store(H).ee(((e$1, n) => {
			t += __PRIVATE_dbDocumentSize(n);
		})).next((() => {
			const n = { byteSize: t };
			return e.store(Pe).put(Te, n);
		}));
	}
	yi(e) {
		const t = e.store(X), n = e.store(te);
		return t.J().next(((t$1) => PersistencePromise.forEach(t$1, ((t$2) => {
			const r = IDBKeyRange.bound([t$2.userId, j], [t$2.userId, t$2.lastAcknowledgedBatchId]);
			return n.J(re, r).next(((n$1) => PersistencePromise.forEach(n$1, ((n$2) => {
				__PRIVATE_hardAssert(n$2.userId === t$2.userId, 18650, "Cannot process batch from unexpected user", { batchId: n$2.batchId });
				const r$1 = __PRIVATE_fromDbMutationBatch(this.serializer, n$2);
				return removeMutationBatch(e, t$2.userId, r$1).next((() => {}));
			}))));
		}))));
	}
	/**
	* Ensures that every document in the remote document cache has a corresponding sentinel row
	* with a sequence number. Missing rows are given the most recently used sequence number.
	*/ Si(e) {
		const t = e.store(Ae), n = e.store(H);
		return e.store(ge).get(fe).next(((e$1) => {
			const r = [];
			return n.ee(((n$1, i) => {
				const s = new ResourcePath(n$1), o = function __PRIVATE_sentinelKey(e$2) {
					return [0, __PRIVATE_encodeResourcePath(e$2)];
				}(s);
				r.push(t.get(o).next(((n$2) => n$2 ? PersistencePromise.resolve() : ((n$3) => t.put({
					targetId: 0,
					path: __PRIVATE_encodeResourcePath(n$3),
					sequenceNumber: e$1.highestListenSequenceNumber
				}))(s))));
			})).next((() => PersistencePromise.waitFor(r)));
		}));
	}
	bi(e, t) {
		e.createObjectStore(pe, { keyPath: ye });
		const n = t.store(pe), r = new __PRIVATE_MemoryCollectionParentIndex(), addEntry = (e$1) => {
			if (r.add(e$1)) {
				const t$1 = e$1.lastSegment(), r$1 = e$1.popLast();
				return n.put({
					collectionId: t$1,
					parent: __PRIVATE_encodeResourcePath(r$1)
				});
			}
		};
		return t.store(H).ee({ X: !0 }, ((e$1, t$1) => {
			const n$1 = new ResourcePath(e$1);
			return addEntry(n$1.popLast());
		})).next((() => t.store(oe).ee({ X: !0 }, (([e$1, t$1, n$1], r$1) => {
			const i = __PRIVATE_decodeResourcePath(t$1);
			return addEntry(i.popLast());
		}))));
	}
	Di(e) {
		const t = e.store(Ie);
		return t.ee(((e$1, n) => {
			const r = __PRIVATE_fromDbTarget(n), i = __PRIVATE_toDbTarget(this.serializer, r);
			return t.put(i);
		}));
	}
	Ci(e, t) {
		const n = t.store(H), r = [];
		return n.ee(((e$1, n$1) => {
			const i = t.store(_e), s = function __PRIVATE_extractKey(e$2) {
				return e$2.document ? new DocumentKey(ResourcePath.fromString(e$2.document.name).popFirst(5)) : e$2.noDocument ? DocumentKey.fromSegments(e$2.noDocument.path) : e$2.unknownDocument ? DocumentKey.fromSegments(e$2.unknownDocument.path) : fail(36783);
			}(n$1).path.toArray(), o = {
				prefixPath: s.slice(0, s.length - 2),
				collectionGroup: s[s.length - 2],
				documentId: s[s.length - 1],
				readTime: n$1.readTime || [0, 0],
				unknownDocument: n$1.unknownDocument,
				noDocument: n$1.noDocument,
				document: n$1.document,
				hasCommittedMutations: !!n$1.hasCommittedMutations
			};
			r.push(i.put(o));
		})).next((() => PersistencePromise.waitFor(r)));
	}
	Fi(e, t) {
		const n = t.store(te), r = __PRIVATE_newIndexedDbRemoteDocumentCache(this.serializer), i = new __PRIVATE_MemoryPersistence(__PRIVATE_MemoryEagerDelegate.mi, this.serializer.yt);
		return n.J().next(((e$1) => {
			const n$1 = /* @__PURE__ */ new Map();
			return e$1.forEach(((e$2) => {
				let t$1 = n$1.get(e$2.userId) ?? __PRIVATE_documentKeySet();
				__PRIVATE_fromDbMutationBatch(this.serializer, e$2).keys().forEach(((e$3) => t$1 = t$1.add(e$3))), n$1.set(e$2.userId, t$1);
			})), PersistencePromise.forEach(n$1, ((e$2, n$2) => {
				const s = new User(n$2), o = __PRIVATE_IndexedDbDocumentOverlayCache.wt(this.serializer, s), _ = i.getIndexManager(s), a = __PRIVATE_IndexedDbMutationQueue.wt(s, this.serializer, _, i.referenceDelegate);
				return new LocalDocumentsView(r, a, o, _).recalculateAndSaveOverlaysForDocumentKeys(new __PRIVATE_IndexedDbTransaction(t, __PRIVATE_ListenSequence.ce), e$2).next();
			}));
		}));
	}
};
function __PRIVATE_createQueryCache(e) {
	e.createObjectStore(Ae, { keyPath: Re }).createIndex(Ve, me, { unique: !0 });
	e.createObjectStore(Ie, { keyPath: "targetId" }).createIndex(Ee, de, { unique: !0 }), e.createObjectStore(ge);
}
var Lt = "IndexedDbPersistence", kt = 18e5, qt = 5e3, Qt = "Failed to obtain exclusive access to the persistence layer. To allow shared access, multi-tab synchronization has to be enabled in all tabs. If you are using `experimentalForceOwningTab:true`, make sure that only one tab has persistence enabled at any given time.", $t = "main";
/**
* Oldest acceptable age in milliseconds for client metadata before the client
* is considered inactive and its associated data is garbage collected.
*/
/**
* An IndexedDB-backed instance of Persistence. Data is stored persistently
* across sessions.
*
* On Web only, the Firestore SDKs support shared access to its persistence
* layer. This allows multiple browser tabs to read and write to IndexedDb and
* to synchronize state even without network connectivity. Shared access is
* currently optional and not enabled unless all clients invoke
* `enablePersistence()` with `{synchronizeTabs:true}`.
*
* In multi-tab mode, if multiple clients are active at the same time, the SDK
* will designate one client as the "primary client". An effort is made to pick
* a visible, network-connected and active client, and this client is
* responsible for letting other clients know about its presence. The primary
* client writes a unique client-generated identifier (the client ID) to
* IndexedDb’s "owner" store every 4 seconds. If the primary client fails to
* update this entry, another client can acquire the lease and take over as
* primary.
*
* Some persistence operations in the SDK are designated as primary-client only
* operations. This includes the acknowledgment of mutations and all updates of
* remote documents. The effects of these operations are written to persistence
* and then broadcast to other tabs via LocalStorage (see
* `WebStorageSharedClientState`), which then refresh their state from
* persistence.
*
* Similarly, the primary client listens to notifications sent by secondary
* clients to discover persistence changes written by secondary clients, such as
* the addition of new mutations and query targets.
*
* If multi-tab is not enabled and another tab already obtained the primary
* lease, IndexedDbPersistence enters a failed state and all subsequent
* operations will automatically fail.
*
* Additionally, there is an optimization so that when a tab is closed, the
* primary lease is released immediately (this is especially important to make
* sure that a refreshed tab is able to immediately re-acquire the primary
* lease). Unfortunately, IndexedDB cannot be reliably used in window.unload
* since it is an asynchronous API. So in addition to attempting to give up the
* lease, the leaseholder writes its client ID to a "zombiedClient" entry in
* LocalStorage which acts as an indicator that another tab should go ahead and
* take the primary lease immediately regardless of the current lease timestamp.
*
* TODO(b/114226234): Remove `synchronizeTabs` section when multi-tab is no
* longer optional.
*/
var __PRIVATE_IndexedDbPersistence = class __PRIVATE_IndexedDbPersistence {
	constructor(e, t, n, r, i, s, o, _, a, u, c = 18) {
		if (this.allowTabSynchronization = e, this.persistenceKey = t, this.clientId = n, this.Mi = i, this.window = s, this.document = o, this.xi = a, this.Oi = u, this.Ni = c, this.ci = null, this.li = !1, this.isPrimary = !1, this.networkEnabled = !0, this.Bi = null, this.inForeground = !1, this.Li = null, this.ki = null, this.qi = Number.NEGATIVE_INFINITY, this.Qi = (e$1) => Promise.resolve(), !__PRIVATE_IndexedDbPersistence.v()) throw new FirestoreError(N.UNIMPLEMENTED, "This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.");
		this.referenceDelegate = new __PRIVATE_IndexedDbLruDelegateImpl(this, r), this.$i = t + $t, this.serializer = new __PRIVATE_LocalSerializer(_), this.Ui = new __PRIVATE_SimpleDb(this.$i, this.Ni, new __PRIVATE_SchemaConverter(this.serializer)), this.hi = new __PRIVATE_IndexedDbGlobalsCache(), this.Pi = new __PRIVATE_IndexedDbTargetCache(this.referenceDelegate, this.serializer), this.remoteDocumentCache = __PRIVATE_newIndexedDbRemoteDocumentCache(this.serializer), this.Ii = new __PRIVATE_IndexedDbBundleCache(), this.window && this.window.localStorage ? this.Ki = this.window.localStorage : (this.Ki = null, !1 === u && __PRIVATE_logError(Lt, "LocalStorage is unavailable. As a result, persistence may not work reliably. In particular enablePersistence() could fail immediately after refreshing the page."));
	}
	/**
	* Attempt to start IndexedDb persistence.
	*
	* @returns Whether persistence was enabled.
	*/ start() {
		return this.Wi().then((() => {
			if (!this.isPrimary && !this.allowTabSynchronization) throw new FirestoreError(N.FAILED_PRECONDITION, Qt);
			return this.Gi(), this.zi(), this.ji(), this.runTransaction("getHighestListenSequenceNumber", "readonly", ((e) => this.Pi.getHighestSequenceNumber(e)));
		})).then(((e) => {
			this.ci = new __PRIVATE_ListenSequence(e, this.xi);
		})).then((() => {
			this.li = !0;
		})).catch(((e) => (this.Ui && this.Ui.close(), Promise.reject(e))));
	}
	/**
	* Registers a listener that gets called when the primary state of the
	* instance changes. Upon registering, this listener is invoked immediately
	* with the current primary state.
	*
	* PORTING NOTE: This is only used for Web multi-tab.
	*/ Ji(e) {
		return this.Qi = async (t) => {
			if (this.started) return e(t);
		}, e(this.isPrimary);
	}
	/**
	* Registers a listener that gets called when the database receives a
	* version change event indicating that it has deleted.
	*
	* PORTING NOTE: This is only used for Web multi-tab.
	*/ setDatabaseDeletedListener(e) {
		this.Ui.$((async (t) => {
			null === t.newVersion && await e();
		}));
	}
	/**
	* Adjusts the current network state in the client's metadata, potentially
	* affecting the primary lease.
	*
	* PORTING NOTE: This is only used for Web multi-tab.
	*/ setNetworkEnabled(e) {
		this.networkEnabled !== e && (this.networkEnabled = e, this.Mi.enqueueAndForget((async () => {
			this.started && await this.Wi();
		})));
	}
	/**
	* Updates the client metadata in IndexedDb and attempts to either obtain or
	* extend the primary lease for the local client. Asynchronously notifies the
	* primary state listener if the client either newly obtained or released its
	* primary lease.
	*/ Wi() {
		return this.runTransaction("updateClientMetadataAndTryBecomePrimary", "readwrite", ((e) => __PRIVATE_clientMetadataStore(e).put({
			clientId: this.clientId,
			updateTimeMs: Date.now(),
			networkEnabled: this.networkEnabled,
			inForeground: this.inForeground
		}).next((() => {
			if (this.isPrimary) return this.Hi(e).next(((e$1) => {
				e$1 || (this.isPrimary = !1, this.Mi.enqueueRetryable((() => this.Qi(!1))));
			}));
		})).next((() => this.Yi(e))).next(((t) => this.isPrimary && !t ? this.Zi(e).next((() => !1)) : !!t && this.Xi(e).next((() => !0)))))).catch(((e) => {
			if (__PRIVATE_isIndexedDbTransactionError(e)) return __PRIVATE_logDebug(Lt, "Failed to extend owner lease: ", e), this.isPrimary;
			if (!this.allowTabSynchronization) throw e;
			return __PRIVATE_logDebug(Lt, "Releasing owner lease after error during lease refresh", e), !1;
		})).then(((e) => {
			this.isPrimary !== e && this.Mi.enqueueRetryable((() => this.Qi(e))), this.isPrimary = e;
		}));
	}
	Hi(e) {
		return __PRIVATE_primaryClientStore(e).get(Z).next(((e$1) => PersistencePromise.resolve(this.es(e$1))));
	}
	ts(e) {
		return __PRIVATE_clientMetadataStore(e).delete(this.clientId);
	}
	/**
	* If the garbage collection threshold has passed, prunes the
	* RemoteDocumentChanges and the ClientMetadata store based on the last update
	* time of all clients.
	*/ async ns() {
		if (this.isPrimary && !this.rs(this.qi, kt)) {
			this.qi = Date.now();
			const e = await this.runTransaction("maybeGarbageCollectMultiClientState", "readwrite-primary", ((e$1) => {
				const t = __PRIVATE_getStore(e$1, we);
				return t.J().next(((e$2) => {
					const n = this.ss(e$2, kt), r = e$2.filter(((e$3) => -1 === n.indexOf(e$3)));
					return PersistencePromise.forEach(r, ((e$3) => t.delete(e$3.clientId))).next((() => r));
				}));
			})).catch((() => []));
			if (this.Ki) for (const t of e) this.Ki.removeItem(this._s(t.clientId));
		}
	}
	/**
	* Schedules a recurring timer to update the client metadata and to either
	* extend or acquire the primary lease if the client is eligible.
	*/ ji() {
		this.ki = this.Mi.enqueueAfterDelay("client_metadata_refresh", 4e3, (() => this.Wi().then((() => this.ns())).then((() => this.ji()))));
	}
	/** Checks whether `client` is the local client. */ es(e) {
		return !!e && e.ownerId === this.clientId;
	}
	/**
	* Evaluate the state of all active clients and determine whether the local
	* client is or can act as the holder of the primary lease. Returns whether
	* the client is eligible for the lease, but does not actually acquire it.
	* May return 'false' even if there is no active leaseholder and another
	* (foreground) client should become leaseholder instead.
	*/ Yi(e) {
		if (this.Oi) return PersistencePromise.resolve(!0);
		return __PRIVATE_primaryClientStore(e).get(Z).next(((t) => {
			if (null !== t && this.rs(t.leaseTimestampMs, qt) && !this.us(t.ownerId)) {
				if (this.es(t) && this.networkEnabled) return !0;
				if (!this.es(t)) {
					if (!t.allowTabSynchronization) throw new FirestoreError(N.FAILED_PRECONDITION, Qt);
					return !1;
				}
			}
			return !(!this.networkEnabled || !this.inForeground) || __PRIVATE_clientMetadataStore(e).J().next(((e$1) => void 0 === this.ss(e$1, qt).find(((e$2) => {
				if (this.clientId !== e$2.clientId) {
					const t$1 = !this.networkEnabled && e$2.networkEnabled, n = !this.inForeground && e$2.inForeground, r = this.networkEnabled === e$2.networkEnabled;
					if (t$1 || n && r) return !0;
				}
				return !1;
			}))));
		})).next(((e$1) => (this.isPrimary !== e$1 && __PRIVATE_logDebug(Lt, `Client ${e$1 ? "is" : "is not"} eligible for a primary lease.`), e$1)));
	}
	async shutdown() {
		this.li = !1, this.cs(), this.ki && (this.ki.cancel(), this.ki = null), this.ls(), this.hs(), await this.Ui.runTransaction("shutdown", "readwrite", [Y, we], ((e) => {
			const t = new __PRIVATE_IndexedDbTransaction(e, __PRIVATE_ListenSequence.ce);
			return this.Zi(t).next((() => this.ts(t)));
		})), this.Ui.close(), this.Ps();
	}
	/**
	* Returns clients that are not zombied and have an updateTime within the
	* provided threshold.
	*/ ss(e, t) {
		return e.filter(((e$1) => this.rs(e$1.updateTimeMs, t) && !this.us(e$1.clientId)));
	}
	/**
	* Returns the IDs of the clients that are currently active. If multi-tab
	* is not supported, returns an array that only contains the local client's
	* ID.
	*
	* PORTING NOTE: This is only used for Web multi-tab.
	*/ Ts() {
		return this.runTransaction("getActiveClients", "readonly", ((e) => __PRIVATE_clientMetadataStore(e).J().next(((e$1) => this.ss(e$1, kt).map(((e$2) => e$2.clientId))))));
	}
	get started() {
		return this.li;
	}
	getGlobalsCache() {
		return this.hi;
	}
	getMutationQueue(e, t) {
		return __PRIVATE_IndexedDbMutationQueue.wt(e, this.serializer, t, this.referenceDelegate);
	}
	getTargetCache() {
		return this.Pi;
	}
	getRemoteDocumentCache() {
		return this.remoteDocumentCache;
	}
	getIndexManager(e) {
		return new __PRIVATE_IndexedDbIndexManager(e, this.serializer.yt.databaseId);
	}
	getDocumentOverlayCache(e) {
		return __PRIVATE_IndexedDbDocumentOverlayCache.wt(this.serializer, e);
	}
	getBundleCache() {
		return this.Ii;
	}
	runTransaction(e, t, n) {
		__PRIVATE_logDebug(Lt, "Starting transaction:", e);
		const r = "readonly" === t ? "readonly" : "readwrite", i = function __PRIVATE_getObjectStores(e$1) {
			return 18 === e$1 ? st : 17 === e$1 ? it : 16 === e$1 ? rt : 15 === e$1 ? nt : 14 === e$1 ? tt : 13 === e$1 ? et : 12 === e$1 ? Xe : 11 === e$1 ? Ze : void fail(60245);
		}(this.Ni);
		let s;
		return this.Ui.runTransaction(e, r, i, ((r$1) => (s = new __PRIVATE_IndexedDbTransaction(r$1, this.ci ? this.ci.next() : __PRIVATE_ListenSequence.ce), "readwrite-primary" === t ? this.Hi(s).next(((e$1) => !!e$1 || this.Yi(s))).next(((t$1) => {
			if (!t$1) throw __PRIVATE_logError(`Failed to obtain primary lease for action '${e}'.`), this.isPrimary = !1, this.Mi.enqueueRetryable((() => this.Qi(!1))), new FirestoreError(N.FAILED_PRECONDITION, K);
			return n(s);
		})).next(((e$1) => this.Xi(s).next((() => e$1)))) : this.Is(s).next((() => n(s)))))).then(((e$1) => (s.raiseOnCommittedEvent(), e$1)));
	}
	/**
	* Verifies that the current tab is the primary leaseholder or alternatively
	* that the leaseholder has opted into multi-tab synchronization.
	*/
	Is(e) {
		return __PRIVATE_primaryClientStore(e).get(Z).next(((e$1) => {
			if (null !== e$1 && this.rs(e$1.leaseTimestampMs, qt) && !this.us(e$1.ownerId) && !this.es(e$1) && !(this.Oi || this.allowTabSynchronization && e$1.allowTabSynchronization)) throw new FirestoreError(N.FAILED_PRECONDITION, Qt);
		}));
	}
	/**
	* Obtains or extends the new primary lease for the local client. This
	* method does not verify that the client is eligible for this lease.
	*/ Xi(e) {
		const t = {
			ownerId: this.clientId,
			allowTabSynchronization: this.allowTabSynchronization,
			leaseTimestampMs: Date.now()
		};
		return __PRIVATE_primaryClientStore(e).put(Z, t);
	}
	static v() {
		return __PRIVATE_SimpleDb.v();
	}
	/** Checks the primary lease and removes it if we are the current primary. */ Zi(e) {
		const t = __PRIVATE_primaryClientStore(e);
		return t.get(Z).next(((e$1) => this.es(e$1) ? (__PRIVATE_logDebug(Lt, "Releasing primary lease."), t.delete(Z)) : PersistencePromise.resolve()));
	}
	/** Verifies that `updateTimeMs` is within `maxAgeMs`. */ rs(e, t) {
		const n = Date.now();
		return !(e < n - t) && (!(e > n) || (__PRIVATE_logError(`Detected an update time that is in the future: ${e} > ${n}`), !1));
	}
	Gi() {
		null !== this.document && "function" == typeof this.document.addEventListener && (this.Li = () => {
			this.Mi.enqueueAndForget((() => (this.inForeground = "visible" === this.document.visibilityState, this.Wi())));
		}, this.document.addEventListener("visibilitychange", this.Li), this.inForeground = "visible" === this.document.visibilityState);
	}
	ls() {
		this.Li && (this.document.removeEventListener("visibilitychange", this.Li), this.Li = null);
	}
	/**
	* Attaches a window.unload handler that will synchronously write our
	* clientId to a "zombie client id" location in LocalStorage. This can be used
	* by tabs trying to acquire the primary lease to determine that the lease
	* is no longer valid even if the timestamp is recent. This is particularly
	* important for the refresh case (so the tab correctly re-acquires the
	* primary lease). LocalStorage is used for this rather than IndexedDb because
	* it is a synchronous API and so can be used reliably from  an unload
	* handler.
	*/ zi() {
		"function" == typeof this.window?.addEventListener && (this.Bi = () => {
			this.cs();
			const e = /(?:Version|Mobile)\/1[456]/;
			isSafari() && (navigator.appVersion.match(e) || navigator.userAgent.match(e)) && this.Mi.enterRestrictedMode(!0), this.Mi.enqueueAndForget((() => this.shutdown()));
		}, this.window.addEventListener("pagehide", this.Bi));
	}
	hs() {
		this.Bi && (this.window.removeEventListener("pagehide", this.Bi), this.Bi = null);
	}
	/**
	* Returns whether a client is "zombied" based on its LocalStorage entry.
	* Clients become zombied when their tab closes without running all of the
	* cleanup logic in `shutdown()`.
	*/ us(e) {
		try {
			const t = null !== this.Ki?.getItem(this._s(e));
			return __PRIVATE_logDebug(Lt, `Client '${e}' ${t ? "is" : "is not"} zombied in LocalStorage`), t;
		} catch (e$1) {
			return __PRIVATE_logError(Lt, "Failed to get zombied client id.", e$1), !1;
		}
	}
	/**
	* Record client as zombied (a client that had its tab closed). Zombied
	* clients are ignored during primary tab selection.
	*/ cs() {
		if (this.Ki) try {
			this.Ki.setItem(this._s(this.clientId), String(Date.now()));
		} catch (e) {
			__PRIVATE_logError("Failed to set zombie client id.", e);
		}
	}
	/** Removes the zombied client entry if it exists. */ Ps() {
		if (this.Ki) try {
			this.Ki.removeItem(this._s(this.clientId));
		} catch (e) {}
	}
	_s(e) {
		return `firestore_zombie_${this.persistenceKey}_${e}`;
	}
};
/**
* Helper to get a typed SimpleDbStore for the primary client object store.
*/ function __PRIVATE_primaryClientStore(e) {
	return __PRIVATE_getStore(e, Y);
}
/**
* Helper to get a typed SimpleDbStore for the client metadata object store.
*/ function __PRIVATE_clientMetadataStore(e) {
	return __PRIVATE_getStore(e, we);
}
/**
* Generates a string used as a prefix when storing data in IndexedDB and
* LocalStorage.
*/ function __PRIVATE_indexedDbStoragePrefix(e, t) {
	let n = e.projectId;
	return e.isDefaultDatabase || (n += "." + e.database), "firestore/" + t + "/" + n + "/";
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* A set of changes to what documents are currently in view and out of view for
* a given query. These changes are sent to the LocalStore by the View (via
* the SyncEngine) and are used to pin / unpin documents as appropriate.
*/
var __PRIVATE_LocalViewChanges = class __PRIVATE_LocalViewChanges {
	constructor(e, t, n, r) {
		this.targetId = e, this.fromCache = t, this.Es = n, this.ds = r;
	}
	static As(e, t) {
		let n = __PRIVATE_documentKeySet(), r = __PRIVATE_documentKeySet();
		for (const e$1 of t.docChanges) switch (e$1.type) {
			case 0:
				n = n.add(e$1.doc.key);
				break;
			case 1: r = r.add(e$1.doc.key);
		}
		return new __PRIVATE_LocalViewChanges(e, t.fromCache, n, r);
	}
};
/**
* @license
* Copyright 2023 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* A tracker to keep a record of important details during database local query
* execution.
*/ var QueryContext = class {
	constructor() {
		/**
		* Counts the number of documents passed through during local query execution.
		*/
		this._documentReadCount = 0;
	}
	get documentReadCount() {
		return this._documentReadCount;
	}
	incrementDocumentReadCount(e) {
		this._documentReadCount += e;
	}
};
/**
* @license
* Copyright 2019 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* The Firestore query engine.
*
* Firestore queries can be executed in three modes. The Query Engine determines
* what mode to use based on what data is persisted. The mode only determines
* the runtime complexity of the query - the result set is equivalent across all
* implementations.
*
* The Query engine will use indexed-based execution if a user has configured
* any index that can be used to execute query (via `setIndexConfiguration()`).
* Otherwise, the engine will try to optimize the query by re-using a previously
* persisted query result. If that is not possible, the query will be executed
* via a full collection scan.
*
* Index-based execution is the default when available. The query engine
* supports partial indexed execution and merges the result from the index
* lookup with documents that have not yet been indexed. The index evaluation
* matches the backend's format and as such, the SDK can use indexing for all
* queries that the backend supports.
*
* If no index exists, the query engine tries to take advantage of the target
* document mapping in the TargetCache. These mappings exists for all queries
* that have been synced with the backend at least once and allow the query
* engine to only read documents that previously matched a query plus any
* documents that were edited after the query was last listened to.
*
* There are some cases when this optimization is not guaranteed to produce
* the same results as full collection scans. In these cases, query
* processing falls back to full scans. These cases are:
*
* - Limit queries where a document that matched the query previously no longer
*   matches the query.
*
* - Limit queries where a document edit may cause the document to sort below
*   another document that is in the local cache.
*
* - Queries that have never been CURRENT or free of limbo documents.
*/
var __PRIVATE_QueryEngine = class {
	constructor() {
		this.Rs = !1, this.Vs = !1, this.fs = 100, this.gs = function __PRIVATE_getDefaultRelativeIndexReadCostPerDocument() {
			return isSafari() ? 8 : __PRIVATE_getAndroidVersion(getUA()) > 0 ? 6 : 4;
		}();
	}
	/** Sets the document view to query against. */ initialize(e, t) {
		this.ps = e, this.indexManager = t, this.Rs = !0;
	}
	/** Returns all local documents matching the specified query. */ getDocumentsMatchingQuery(e, t, n, r) {
		const i = { result: null };
		return this.ys(e, t).next(((e$1) => {
			i.result = e$1;
		})).next((() => {
			if (!i.result) return this.ws(e, t, r, n).next(((e$1) => {
				i.result = e$1;
			}));
		})).next((() => {
			if (i.result) return;
			const n$1 = new QueryContext();
			return this.Ss(e, t, n$1).next(((r$1) => {
				if (i.result = r$1, this.Vs) return this.bs(e, t, n$1, r$1.size);
			}));
		})).next((() => i.result));
	}
	bs(e, t, n, r) {
		return n.documentReadCount < this.fs ? (__PRIVATE_getLogLevel() <= LogLevel.DEBUG && __PRIVATE_logDebug("QueryEngine", "SDK will not create cache indexes for query:", __PRIVATE_stringifyQuery(t), "since it only creates cache indexes for collection contains", "more than or equal to", this.fs, "documents"), PersistencePromise.resolve()) : (__PRIVATE_getLogLevel() <= LogLevel.DEBUG && __PRIVATE_logDebug("QueryEngine", "Query:", __PRIVATE_stringifyQuery(t), "scans", n.documentReadCount, "local documents and returns", r, "documents as results."), n.documentReadCount > this.gs * r ? (__PRIVATE_getLogLevel() <= LogLevel.DEBUG && __PRIVATE_logDebug("QueryEngine", "The SDK decides to create cache indexes for query:", __PRIVATE_stringifyQuery(t), "as using cache indexes may help improve performance."), this.indexManager.createTargetIndexes(e, __PRIVATE_queryToTarget(t))) : PersistencePromise.resolve());
	}
	/**
	* Performs an indexed query that evaluates the query based on a collection's
	* persisted index values. Returns `null` if an index is not available.
	*/ ys(e, t) {
		if (__PRIVATE_queryMatchesAllDocuments(t)) return PersistencePromise.resolve(null);
		let n = __PRIVATE_queryToTarget(t);
		return this.indexManager.getIndexType(e, n).next(((r) => 0 === r ? null : (null !== t.limit && 1 === r && (t = __PRIVATE_queryWithLimit(t, null, "F"), n = __PRIVATE_queryToTarget(t)), this.indexManager.getDocumentsMatchingTarget(e, n).next(((r$1) => {
			const i = __PRIVATE_documentKeySet(...r$1);
			return this.ps.getDocuments(e, i).next(((r$2) => this.indexManager.getMinOffset(e, n).next(((n$1) => {
				const s = this.Ds(t, r$2);
				return this.Cs(t, s, i, n$1.readTime) ? this.ys(e, __PRIVATE_queryWithLimit(t, null, "F")) : this.vs(e, s, t, n$1);
			}))));
		})))));
	}
	/**
	* Performs a query based on the target's persisted query mapping. Returns
	* `null` if the mapping is not available or cannot be used.
	*/ ws(e, t, n, r) {
		return __PRIVATE_queryMatchesAllDocuments(t) || r.isEqual(SnapshotVersion.min()) ? PersistencePromise.resolve(null) : this.ps.getDocuments(e, n).next(((i) => {
			const s = this.Ds(t, i);
			return this.Cs(t, s, n, r) ? PersistencePromise.resolve(null) : (__PRIVATE_getLogLevel() <= LogLevel.DEBUG && __PRIVATE_logDebug("QueryEngine", "Re-using previous result from %s to execute query: %s", r.toString(), __PRIVATE_stringifyQuery(t)), this.vs(e, s, t, __PRIVATE_newIndexOffsetSuccessorFromReadTime(r, U)).next(((e$1) => e$1)));
		}));
	}
	/** Applies the query filter and sorting to the provided documents.  */ Ds(e, t) {
		let n = new SortedSet(__PRIVATE_newQueryComparator(e));
		return t.forEach(((t$1, r) => {
			__PRIVATE_queryMatches(e, r) && (n = n.add(r));
		})), n;
	}
	/**
	* Determines if a limit query needs to be refilled from cache, making it
	* ineligible for index-free execution.
	*
	* @param query - The query.
	* @param sortedPreviousResults - The documents that matched the query when it
	* was last synchronized, sorted by the query's comparator.
	* @param remoteKeys - The document keys that matched the query at the last
	* snapshot.
	* @param limboFreeSnapshotVersion - The version of the snapshot when the
	* query was last synchronized.
	*/ Cs(e, t, n, r) {
		if (null === e.limit) return !1;
		if (n.size !== t.size) return !0;
		const i = "F" === e.limitType ? t.last() : t.first();
		return !!i && (i.hasPendingWrites || i.version.compareTo(r) > 0);
	}
	Ss(e, t, n) {
		return __PRIVATE_getLogLevel() <= LogLevel.DEBUG && __PRIVATE_logDebug("QueryEngine", "Using full collection scan to execute query:", __PRIVATE_stringifyQuery(t)), this.ps.getDocumentsMatchingQuery(e, t, IndexOffset.min(), n);
	}
	/**
	* Combines the results from an indexed execution with the remaining documents
	* that have not yet been indexed.
	*/ vs(e, t, n, r) {
		return this.ps.getDocumentsMatchingQuery(e, n, r).next(((e$1) => (t.forEach(((t$1) => {
			e$1 = e$1.insert(t$1.key, t$1);
		})), e$1)));
	}
};
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ var Ut = "LocalStore", Kt = 3e8;
/**
* The maximum time to leave a resume token buffered without writing it out.
* This value is arbitrary: it's long enough to avoid several writes
* (possibly indefinitely if updates come more frequently than this) but
* short enough that restarting after crashing will still have a pretty
* recent resume token.
*/
/**
* Implements `LocalStore` interface.
*
* Note: some field defined in this class might have public access level, but
* the class is not exported so they are only accessible from this module.
* This is useful to implement optional features (like bundles) in free
* functions, such that they are tree-shakeable.
*/
var __PRIVATE_LocalStoreImpl = class {
	constructor(e, t, n, r) {
		this.persistence = e, this.Fs = t, this.serializer = r, this.Ms = new SortedMap(__PRIVATE_primitiveComparator), this.xs = new ObjectMap(((e$1) => __PRIVATE_canonifyTarget(e$1)), __PRIVATE_targetEquals), this.Os = /* @__PURE__ */ new Map(), this.Ns = e.getRemoteDocumentCache(), this.Pi = e.getTargetCache(), this.Ii = e.getBundleCache(), this.Bs(n);
	}
	Bs(e) {
		this.documentOverlayCache = this.persistence.getDocumentOverlayCache(e), this.indexManager = this.persistence.getIndexManager(e), this.mutationQueue = this.persistence.getMutationQueue(e, this.indexManager), this.localDocuments = new LocalDocumentsView(this.Ns, this.mutationQueue, this.documentOverlayCache, this.indexManager), this.Ns.setIndexManager(this.indexManager), this.Fs.initialize(this.localDocuments, this.indexManager);
	}
	collectGarbage(e) {
		return this.persistence.runTransaction("Collect garbage", "readwrite-primary", ((t) => e.collect(t, this.Ms)));
	}
};
function __PRIVATE_newLocalStore(e, t, n, r) {
	return new __PRIVATE_LocalStoreImpl(e, t, n, r);
}
/**
* Tells the LocalStore that the currently authenticated user has changed.
*
* In response the local store switches the mutation queue to the new user and
* returns any resulting document changes.
*/
async function __PRIVATE_localStoreHandleUserChange(e, t) {
	const n = __PRIVATE_debugCast(e);
	return await n.persistence.runTransaction("Handle user change", "readonly", ((e$1) => {
		let r;
		return n.mutationQueue.getAllMutationBatches(e$1).next(((i) => (r = i, n.Bs(t), n.mutationQueue.getAllMutationBatches(e$1)))).next(((t$1) => {
			const i = [], s = [];
			let o = __PRIVATE_documentKeySet();
			for (const e$2 of r) {
				i.push(e$2.batchId);
				for (const t$2 of e$2.mutations) o = o.add(t$2.key);
			}
			for (const e$2 of t$1) {
				s.push(e$2.batchId);
				for (const t$2 of e$2.mutations) o = o.add(t$2.key);
			}
			return n.localDocuments.getDocuments(e$1, o).next(((e$2) => ({
				Ls: e$2,
				removedBatchIds: i,
				addedBatchIds: s
			})));
		}));
	}));
}
/**
* Acknowledges the given batch.
*
* On the happy path when a batch is acknowledged, the local store will
*
*  + remove the batch from the mutation queue;
*  + apply the changes to the remote document cache;
*  + recalculate the latency compensated view implied by those changes (there
*    may be mutations in the queue that affect the documents but haven't been
*    acknowledged yet); and
*  + give the changed documents back the sync engine
*
* @returns The resulting (modified) documents.
*/
function __PRIVATE_localStoreAcknowledgeBatch(e, t) {
	const n = __PRIVATE_debugCast(e);
	return n.persistence.runTransaction("Acknowledge batch", "readwrite-primary", ((e$1) => {
		const r = t.batch.keys(), i = n.Ns.newChangeBuffer({ trackRemovals: !0 });
		return function __PRIVATE_applyWriteToRemoteDocuments(e$2, t$1, n$1, r$1) {
			const i$1 = n$1.batch, s = i$1.keys();
			let o = PersistencePromise.resolve();
			return s.forEach(((e$3) => {
				o = o.next((() => r$1.getEntry(t$1, e$3))).next(((t$2) => {
					const s$1 = n$1.docVersions.get(e$3);
					__PRIVATE_hardAssert(null !== s$1, 48541), t$2.version.compareTo(s$1) < 0 && (i$1.applyToRemoteDocument(t$2, n$1), t$2.isValidDocument() && (t$2.setReadTime(n$1.commitVersion), r$1.addEntry(t$2)));
				}));
			})), o.next((() => e$2.mutationQueue.removeMutationBatch(t$1, i$1)));
		}(n, e$1, t, i).next((() => i.apply(e$1))).next((() => n.mutationQueue.performConsistencyCheck(e$1))).next((() => n.documentOverlayCache.removeOverlaysForBatchId(e$1, r, t.batch.batchId))).next((() => n.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(e$1, function __PRIVATE_getKeysWithTransformResults(e$2) {
			let t$1 = __PRIVATE_documentKeySet();
			for (let n$1 = 0; n$1 < e$2.mutationResults.length; ++n$1) e$2.mutationResults[n$1].transformResults.length > 0 && (t$1 = t$1.add(e$2.batch.mutations[n$1].key));
			return t$1;
		}(t)))).next((() => n.localDocuments.getDocuments(e$1, r)));
	}));
}
/**
* Returns the last consistent snapshot processed (used by the RemoteStore to
* determine whether to buffer incoming snapshots from the backend).
*/
function __PRIVATE_localStoreGetLastRemoteSnapshotVersion(e) {
	const t = __PRIVATE_debugCast(e);
	return t.persistence.runTransaction("Get last remote snapshot version", "readonly", ((e$1) => t.Pi.getLastRemoteSnapshotVersion(e$1)));
}
/**
* Updates the "ground-state" (remote) documents. We assume that the remote
* event reflects any write batches that have been acknowledged or rejected
* (i.e. we do not re-apply local mutations to updates from this event).
*
* LocalDocuments are re-calculated if there are remaining mutations in the
* queue.
*/ function __PRIVATE_localStoreApplyRemoteEventToLocalCache(e, t) {
	const n = __PRIVATE_debugCast(e), r = t.snapshotVersion;
	let i = n.Ms;
	return n.persistence.runTransaction("Apply remote event", "readwrite-primary", ((e$1) => {
		const s = n.Ns.newChangeBuffer({ trackRemovals: !0 });
		i = n.Ms;
		const o = [];
		t.targetChanges.forEach(((s$1, _$1) => {
			const a$1 = i.get(_$1);
			if (!a$1) return;
			o.push(n.Pi.removeMatchingKeys(e$1, s$1.removedDocuments, _$1).next((() => n.Pi.addMatchingKeys(e$1, s$1.addedDocuments, _$1))));
			let u = a$1.withSequenceNumber(e$1.currentSequenceNumber);
			null !== t.targetMismatches.get(_$1) ? u = u.withResumeToken(ByteString.EMPTY_BYTE_STRING, SnapshotVersion.min()).withLastLimboFreeSnapshotVersion(SnapshotVersion.min()) : s$1.resumeToken.approximateByteSize() > 0 && (u = u.withResumeToken(s$1.resumeToken, r)), i = i.insert(_$1, u), function __PRIVATE_shouldPersistTargetData(e$2, t$1, n$1) {
				if (0 === e$2.resumeToken.approximateByteSize()) return !0;
				if (t$1.snapshotVersion.toMicroseconds() - e$2.snapshotVersion.toMicroseconds() >= Kt) return !0;
				return n$1.addedDocuments.size + n$1.modifiedDocuments.size + n$1.removedDocuments.size > 0;
			}(a$1, u, s$1) && o.push(n.Pi.updateTargetData(e$1, u));
		}));
		let _ = __PRIVATE_mutableDocumentMap(), a = __PRIVATE_documentKeySet();
		if (t.documentUpdates.forEach(((r$1) => {
			t.resolvedLimboDocuments.has(r$1) && o.push(n.persistence.referenceDelegate.updateLimboDocument(e$1, r$1));
		})), o.push(__PRIVATE_populateDocumentChangeBuffer(e$1, s, t.documentUpdates).next(((e$2) => {
			_ = e$2.ks, a = e$2.qs;
		}))), !r.isEqual(SnapshotVersion.min())) {
			const t$1 = n.Pi.getLastRemoteSnapshotVersion(e$1).next(((t$2) => n.Pi.setTargetsMetadata(e$1, e$1.currentSequenceNumber, r)));
			o.push(t$1);
		}
		return PersistencePromise.waitFor(o).next((() => s.apply(e$1))).next((() => n.localDocuments.getLocalViewOfDocuments(e$1, _, a))).next((() => _));
	})).then(((e$1) => (n.Ms = i, e$1)));
}
/**
* Populates document change buffer with documents from backend or a bundle.
* Returns the document changes resulting from applying those documents, and
* also a set of documents whose existence state are changed as a result.
*
* @param txn - Transaction to use to read existing documents from storage.
* @param documentBuffer - Document buffer to collect the resulted changes to be
*        applied to storage.
* @param documents - Documents to be applied.
*/ function __PRIVATE_populateDocumentChangeBuffer(e, t, n) {
	let r = __PRIVATE_documentKeySet(), i = __PRIVATE_documentKeySet();
	return n.forEach(((e$1) => r = r.add(e$1))), t.getEntries(e, r).next(((e$1) => {
		let r$1 = __PRIVATE_mutableDocumentMap();
		return n.forEach(((n$1, s) => {
			const o = e$1.get(n$1);
			s.isFoundDocument() !== o.isFoundDocument() && (i = i.add(n$1)), s.isNoDocument() && s.version.isEqual(SnapshotVersion.min()) ? (t.removeEntry(n$1, s.readTime), r$1 = r$1.insert(n$1, s)) : !o.isValidDocument() || s.version.compareTo(o.version) > 0 || 0 === s.version.compareTo(o.version) && o.hasPendingWrites ? (t.addEntry(s), r$1 = r$1.insert(n$1, s)) : __PRIVATE_logDebug(Ut, "Ignoring outdated watch update for ", n$1, ". Current version:", o.version, " Watch version:", s.version);
		})), {
			ks: r$1,
			qs: i
		};
	}));
}
/**
* Gets the mutation batch after the passed in batchId in the mutation queue
* or null if empty.
* @param afterBatchId - If provided, the batch to search after.
* @returns The next mutation or null if there wasn't one.
*/
function __PRIVATE_localStoreGetNextMutationBatch(e, t) {
	const n = __PRIVATE_debugCast(e);
	return n.persistence.runTransaction("Get next mutation batch", "readonly", ((e$1) => (void 0 === t && (t = j), n.mutationQueue.getNextMutationBatchAfterBatchId(e$1, t))));
}
/**
* Reads the current value of a Document with a given key or null if not
* found - used for testing.
*/
/**
* Assigns the given target an internal ID so that its results can be pinned so
* they don't get GC'd. A target must be allocated in the local store before
* the store can be used to manage its view.
*
* Allocating an already allocated `Target` will return the existing `TargetData`
* for that `Target`.
*/
function __PRIVATE_localStoreAllocateTarget(e, t) {
	const n = __PRIVATE_debugCast(e);
	return n.persistence.runTransaction("Allocate target", "readwrite", ((e$1) => {
		let r;
		return n.Pi.getTargetData(e$1, t).next(((i) => i ? (r = i, PersistencePromise.resolve(r)) : n.Pi.allocateTargetId(e$1).next(((i$1) => (r = new TargetData(t, i$1, "TargetPurposeListen", e$1.currentSequenceNumber), n.Pi.addTargetData(e$1, r).next((() => r)))))));
	})).then(((e$1) => {
		const r = n.Ms.get(e$1.targetId);
		return (null === r || e$1.snapshotVersion.compareTo(r.snapshotVersion) > 0) && (n.Ms = n.Ms.insert(e$1.targetId, e$1), n.xs.set(t, e$1.targetId)), e$1;
	}));
}
/**
* Returns the TargetData as seen by the LocalStore, including updates that may
* have not yet been persisted to the TargetCache.
*/
/**
* Unpins all the documents associated with the given target. If
* `keepPersistedTargetData` is set to false and Eager GC enabled, the method
* directly removes the associated target data from the target cache.
*
* Releasing a non-existing `Target` is a no-op.
*/
async function __PRIVATE_localStoreReleaseTarget(e, t, n) {
	const r = __PRIVATE_debugCast(e), i = r.Ms.get(t), s = n ? "readwrite" : "readwrite-primary";
	try {
		n || await r.persistence.runTransaction("Release target", s, ((e$1) => r.persistence.referenceDelegate.removeTarget(e$1, i)));
	} catch (e$1) {
		if (!__PRIVATE_isIndexedDbTransactionError(e$1)) throw e$1;
		__PRIVATE_logDebug(Ut, `Failed to update sequence numbers for target ${t}: ${e$1}`);
	}
	r.Ms = r.Ms.remove(t), r.xs.delete(i.target);
}
/**
* Runs the specified query against the local store and returns the results,
* potentially taking advantage of query data from previous executions (such
* as the set of remote keys).
*
* @param usePreviousResults - Whether results from previous executions can
* be used to optimize this query execution.
*/ function __PRIVATE_localStoreExecuteQuery(e, t, n) {
	const r = __PRIVATE_debugCast(e);
	let i = SnapshotVersion.min(), s = __PRIVATE_documentKeySet();
	return r.persistence.runTransaction("Execute query", "readwrite", ((e$1) => function __PRIVATE_localStoreGetTargetData(e$2, t$1, n$1) {
		const r$1 = __PRIVATE_debugCast(e$2), i$1 = r$1.xs.get(n$1);
		return void 0 !== i$1 ? PersistencePromise.resolve(r$1.Ms.get(i$1)) : r$1.Pi.getTargetData(t$1, n$1);
	}(r, e$1, __PRIVATE_queryToTarget(t)).next(((t$1) => {
		if (t$1) return i = t$1.lastLimboFreeSnapshotVersion, r.Pi.getMatchingKeysForTargetId(e$1, t$1.targetId).next(((e$2) => {
			s = e$2;
		}));
	})).next((() => r.Fs.getDocumentsMatchingQuery(e$1, t, n ? i : SnapshotVersion.min(), n ? s : __PRIVATE_documentKeySet()))).next(((e$2) => (__PRIVATE_setMaxReadTime(r, __PRIVATE_queryCollectionGroup(t), e$2), {
		documents: e$2,
		Qs: s
	})))));
}
function __PRIVATE_localStoreGetCachedTarget(e, t) {
	const n = __PRIVATE_debugCast(e), r = __PRIVATE_debugCast(n.Pi), i = n.Ms.get(t);
	return i ? Promise.resolve(i.target) : n.persistence.runTransaction("Get target data", "readonly", ((e$1) => r.At(e$1, t).next(((e$2) => e$2 ? e$2.target : null))));
}
/**
* Returns the set of documents that have been updated since the last call.
* If this is the first call, returns the set of changes since client
* initialization. Further invocations will return document that have changed
* since the prior call.
*/
function __PRIVATE_localStoreGetNewDocumentChanges(e, t) {
	const n = __PRIVATE_debugCast(e), r = n.Os.get(t) || SnapshotVersion.min();
	return n.persistence.runTransaction("Get new document changes", "readonly", ((e$1) => n.Ns.getAllFromCollectionGroup(e$1, t, __PRIVATE_newIndexOffsetSuccessorFromReadTime(r, U), Number.MAX_SAFE_INTEGER))).then(((e$1) => (__PRIVATE_setMaxReadTime(n, t, e$1), e$1)));
}
/** Sets the collection group's maximum read time from the given documents. */
function __PRIVATE_setMaxReadTime(e, t, n) {
	let r = e.Os.get(t) || SnapshotVersion.min();
	n.forEach(((e$1, t$1) => {
		t$1.readTime.compareTo(r) > 0 && (r = t$1.readTime);
	})), e.Os.set(t, r);
}
/**
* Creates a new target using the given bundle name, which will be used to
* hold the keys of all documents from the bundle in query-document mappings.
* This ensures that the loaded documents do not get garbage collected
* right away.
*/
/**
* Applies the documents from a bundle to the "ground-state" (remote)
* documents.
*
* LocalDocuments are re-calculated if there are remaining mutations in the
* queue.
*/
async function __PRIVATE_localStoreApplyBundledDocuments(e, t, n, r) {
	const i = __PRIVATE_debugCast(e);
	let s = __PRIVATE_documentKeySet(), o = __PRIVATE_mutableDocumentMap();
	for (const e$1 of n) {
		const n$1 = t.$s(e$1.metadata.name);
		e$1.document && (s = s.add(n$1));
		const r$1 = t.Us(e$1);
		r$1.setReadTime(t.Ks(e$1.metadata.readTime)), o = o.insert(n$1, r$1);
	}
	const _ = i.Ns.newChangeBuffer({ trackRemovals: !0 }), a = await __PRIVATE_localStoreAllocateTarget(i, function __PRIVATE_umbrellaTarget(e$1) {
		return __PRIVATE_queryToTarget(__PRIVATE_newQueryForPath(ResourcePath.fromString(`__bundle__/docs/${e$1}`)));
	}(r));
	return i.persistence.runTransaction("Apply bundle documents", "readwrite", ((e$1) => __PRIVATE_populateDocumentChangeBuffer(e$1, _, o).next(((t$1) => (_.apply(e$1), t$1))).next(((t$1) => i.Pi.removeMatchingKeysForTargetId(e$1, a.targetId).next((() => i.Pi.addMatchingKeys(e$1, s, a.targetId))).next((() => i.localDocuments.getLocalViewOfDocuments(e$1, t$1.ks, t$1.qs))).next((() => t$1.ks))))));
}
/**
* Returns a promise of a boolean to indicate if the given bundle has already
* been loaded and the create time is newer than the current loading bundle.
*/
/**
* Saves the given `NamedQuery` to local persistence.
*/
async function __PRIVATE_localStoreSaveNamedQuery(e, t, n = __PRIVATE_documentKeySet()) {
	const r = await __PRIVATE_localStoreAllocateTarget(e, __PRIVATE_queryToTarget(__PRIVATE_fromBundledQuery(t.bundledQuery))), i = __PRIVATE_debugCast(e);
	return i.persistence.runTransaction("Save named query", "readwrite", ((e$1) => {
		const s = __PRIVATE_fromVersion(t.readTime);
		if (r.snapshotVersion.compareTo(s) >= 0) return i.Ii.saveNamedQuery(e$1, t);
		const o = r.withResumeToken(ByteString.EMPTY_BYTE_STRING, s);
		return i.Ms = i.Ms.insert(o.targetId, o), i.Pi.updateTargetData(e$1, o).next((() => i.Pi.removeMatchingKeysForTargetId(e$1, r.targetId))).next((() => i.Pi.addMatchingKeys(e$1, n, r.targetId))).next((() => i.Ii.saveNamedQuery(e$1, t)));
	}));
}
/**
* @license
* Copyright 2019 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var Wt = "firestore_clients";
/** Assembles the key for a client state in WebStorage */ function createWebStorageClientStateKey(e, t) {
	return `${Wt}_${e}_${t}`;
}
var Gt = "firestore_mutations";
/** Assembles the key for a mutation batch in WebStorage */ function createWebStorageMutationBatchKey(e, t, n) {
	let r = `${Gt}_${e}_${n}`;
	return t.isAuthenticated() && (r += `_${t.uid}`), r;
}
var zt = "firestore_targets";
/** Assembles the key for a query state in WebStorage */ function createWebStorageQueryTargetMetadataKey(e, t) {
	return `${zt}_${e}_${t}`;
}
/**
* @license
* Copyright 2018 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var jt = "SharedClientState";
/**
* Holds the state of a mutation batch, including its user ID, batch ID and
* whether the batch is 'pending', 'acknowledged' or 'rejected'.
*/
var __PRIVATE_MutationMetadata = class __PRIVATE_MutationMetadata {
	constructor(e, t, n, r) {
		this.user = e, this.batchId = t, this.state = n, this.error = r;
	}
	/**
	* Parses a MutationMetadata from its JSON representation in WebStorage.
	* Logs a warning and returns null if the format of the data is not valid.
	*/ static Ws(e, t, n) {
		const r = JSON.parse(n);
		let i, s = "object" == typeof r && -1 !== [
			"pending",
			"acknowledged",
			"rejected"
		].indexOf(r.state) && (void 0 === r.error || "object" == typeof r.error);
		return s && r.error && (s = "string" == typeof r.error.message && "string" == typeof r.error.code, s && (i = new FirestoreError(r.error.code, r.error.message))), s ? new __PRIVATE_MutationMetadata(e, t, r.state, i) : (__PRIVATE_logError(jt, `Failed to parse mutation state for ID '${t}': ${n}`), null);
	}
	Gs() {
		const e = {
			state: this.state,
			updateTimeMs: Date.now()
		};
		return this.error && (e.error = {
			code: this.error.code,
			message: this.error.message
		}), JSON.stringify(e);
	}
};
/**
* Holds the state of a query target, including its target ID and whether the
* target is 'not-current', 'current' or 'rejected'.
*/
var __PRIVATE_QueryTargetMetadata = class __PRIVATE_QueryTargetMetadata {
	constructor(e, t, n) {
		this.targetId = e, this.state = t, this.error = n;
	}
	/**
	* Parses a QueryTargetMetadata from its JSON representation in WebStorage.
	* Logs a warning and returns null if the format of the data is not valid.
	*/ static Ws(e, t) {
		const n = JSON.parse(t);
		let r, i = "object" == typeof n && -1 !== [
			"not-current",
			"current",
			"rejected"
		].indexOf(n.state) && (void 0 === n.error || "object" == typeof n.error);
		return i && n.error && (i = "string" == typeof n.error.message && "string" == typeof n.error.code, i && (r = new FirestoreError(n.error.code, n.error.message))), i ? new __PRIVATE_QueryTargetMetadata(e, n.state, r) : (__PRIVATE_logError(jt, `Failed to parse target state for ID '${e}': ${t}`), null);
	}
	Gs() {
		const e = {
			state: this.state,
			updateTimeMs: Date.now()
		};
		return this.error && (e.error = {
			code: this.error.code,
			message: this.error.message
		}), JSON.stringify(e);
	}
};
/**
* This class represents the immutable ClientState for a client read from
* WebStorage, containing the list of active query targets.
*/ var __PRIVATE_RemoteClientState = class __PRIVATE_RemoteClientState {
	constructor(e, t) {
		this.clientId = e, this.activeTargetIds = t;
	}
	/**
	* Parses a RemoteClientState from the JSON representation in WebStorage.
	* Logs a warning and returns null if the format of the data is not valid.
	*/ static Ws(e, t) {
		const n = JSON.parse(t);
		let r = "object" == typeof n && n.activeTargetIds instanceof Array, i = __PRIVATE_targetIdSet();
		for (let e$1 = 0; r && e$1 < n.activeTargetIds.length; ++e$1) r = isSafeInteger(n.activeTargetIds[e$1]), i = i.add(n.activeTargetIds[e$1]);
		return r ? new __PRIVATE_RemoteClientState(e, i) : (__PRIVATE_logError(jt, `Failed to parse client data for instance '${e}': ${t}`), null);
	}
};
/**
* This class represents the online state for all clients participating in
* multi-tab. The online state is only written to by the primary client, and
* used in secondary clients to update their query views.
*/ var __PRIVATE_SharedOnlineState = class __PRIVATE_SharedOnlineState {
	constructor(e, t) {
		this.clientId = e, this.onlineState = t;
	}
	/**
	* Parses a SharedOnlineState from its JSON representation in WebStorage.
	* Logs a warning and returns null if the format of the data is not valid.
	*/ static Ws(e) {
		const t = JSON.parse(e);
		return "object" == typeof t && -1 !== [
			"Unknown",
			"Online",
			"Offline"
		].indexOf(t.onlineState) && "string" == typeof t.clientId ? new __PRIVATE_SharedOnlineState(t.clientId, t.onlineState) : (__PRIVATE_logError(jt, `Failed to parse online state: ${e}`), null);
	}
};
/**
* Metadata state of the local client. Unlike `RemoteClientState`, this class is
* mutable and keeps track of all pending mutations, which allows us to
* update the range of pending mutation batch IDs as new mutations are added or
* removed.
*
* The data in `LocalClientState` is not read from WebStorage and instead
* updated via its instance methods. The updated state can be serialized via
* `toWebStorageJSON()`.
*/
var __PRIVATE_LocalClientState = class {
	constructor() {
		this.activeTargetIds = __PRIVATE_targetIdSet();
	}
	zs(e) {
		this.activeTargetIds = this.activeTargetIds.add(e);
	}
	js(e) {
		this.activeTargetIds = this.activeTargetIds.delete(e);
	}
	/**
	* Converts this entry into a JSON-encoded format we can use for WebStorage.
	* Does not encode `clientId` as it is part of the key in WebStorage.
	*/ Gs() {
		const e = {
			activeTargetIds: this.activeTargetIds.toArray(),
			updateTimeMs: Date.now()
		};
		return JSON.stringify(e);
	}
};
/**
* `WebStorageSharedClientState` uses WebStorage (window.localStorage) as the
* backing store for the SharedClientState. It keeps track of all active
* clients and supports modifications of the local client's data.
*/ var __PRIVATE_WebStorageSharedClientState = class {
	constructor(e, t, n, r, i) {
		this.window = e, this.Mi = t, this.persistenceKey = n, this.Js = r, this.syncEngine = null, this.onlineStateHandler = null, this.sequenceNumberHandler = null, this.Hs = this.Ys.bind(this), this.Zs = new SortedMap(__PRIVATE_primitiveComparator), this.started = !1, this.Xs = [];
		const s = n.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
		this.storage = this.window.localStorage, this.currentUser = i, this.eo = createWebStorageClientStateKey(this.persistenceKey, this.Js), this.no = function createWebStorageSequenceNumberKey(e$1) {
			return `firestore_sequence_number_${e$1}`;
		}(this.persistenceKey), this.Zs = this.Zs.insert(this.Js, new __PRIVATE_LocalClientState()), this.ro = /* @__PURE__ */ new RegExp(`^${Wt}_${s}_([^_]*)$`), this.io = /* @__PURE__ */ new RegExp(`^${Gt}_${s}_(\\d+)(?:_(.*))?$`), this.so = /* @__PURE__ */ new RegExp(`^${zt}_${s}_(\\d+)$`), this.oo = function createWebStorageOnlineStateKey(e$1) {
			return `firestore_online_state_${e$1}`;
		}(this.persistenceKey), this._o = function createBundleLoadedKey(e$1) {
			return `firestore_bundle_loaded_v2_${e$1}`;
		}(this.persistenceKey), this.window.addEventListener("storage", this.Hs);
	}
	/** Returns 'true' if WebStorage is available in the current environment. */ static v(e) {
		return !(!e || !e.localStorage);
	}
	async start() {
		const e = await this.syncEngine.Ts();
		for (const t$1 of e) {
			if (t$1 === this.Js) continue;
			const e$1 = this.getItem(createWebStorageClientStateKey(this.persistenceKey, t$1));
			if (e$1) {
				const n = __PRIVATE_RemoteClientState.Ws(t$1, e$1);
				n && (this.Zs = this.Zs.insert(n.clientId, n));
			}
		}
		this.ao();
		const t = this.storage.getItem(this.oo);
		if (t) {
			const e$1 = this.uo(t);
			e$1 && this.co(e$1);
		}
		for (const e$1 of this.Xs) this.Ys(e$1);
		this.Xs = [], this.window.addEventListener("pagehide", (() => this.shutdown())), this.started = !0;
	}
	writeSequenceNumber(e) {
		this.setItem(this.no, JSON.stringify(e));
	}
	getAllActiveQueryTargets() {
		return this.lo(this.Zs);
	}
	isActiveQueryTarget(e) {
		let t = !1;
		return this.Zs.forEach(((n, r) => {
			r.activeTargetIds.has(e) && (t = !0);
		})), t;
	}
	addPendingMutation(e) {
		this.ho(e, "pending");
	}
	updateMutationState(e, t, n) {
		this.ho(e, t, n), this.Po(e);
	}
	addLocalQueryTarget(e, t = !0) {
		let n = "not-current";
		if (this.isActiveQueryTarget(e)) {
			const t$1 = this.storage.getItem(createWebStorageQueryTargetMetadataKey(this.persistenceKey, e));
			if (t$1) {
				const r = __PRIVATE_QueryTargetMetadata.Ws(e, t$1);
				r && (n = r.state);
			}
		}
		return t && this.To.zs(e), this.ao(), n;
	}
	removeLocalQueryTarget(e) {
		this.To.js(e), this.ao();
	}
	isLocalQueryTarget(e) {
		return this.To.activeTargetIds.has(e);
	}
	clearQueryState(e) {
		this.removeItem(createWebStorageQueryTargetMetadataKey(this.persistenceKey, e));
	}
	updateQueryState(e, t, n) {
		this.Io(e, t, n);
	}
	handleUserChange(e, t, n) {
		t.forEach(((e$1) => {
			this.Po(e$1);
		})), this.currentUser = e, n.forEach(((e$1) => {
			this.addPendingMutation(e$1);
		}));
	}
	setOnlineState(e) {
		this.Eo(e);
	}
	notifyBundleLoaded(e) {
		this.Ao(e);
	}
	shutdown() {
		this.started && (this.window.removeEventListener("storage", this.Hs), this.removeItem(this.eo), this.started = !1);
	}
	getItem(e) {
		const t = this.storage.getItem(e);
		return __PRIVATE_logDebug(jt, "READ", e, t), t;
	}
	setItem(e, t) {
		__PRIVATE_logDebug(jt, "SET", e, t), this.storage.setItem(e, t);
	}
	removeItem(e) {
		__PRIVATE_logDebug(jt, "REMOVE", e), this.storage.removeItem(e);
	}
	Ys(e) {
		const t = e;
		if (t.storageArea === this.storage) {
			if (__PRIVATE_logDebug(jt, "EVENT", t.key, t.newValue), t.key === this.eo) return void __PRIVATE_logError("Received WebStorage notification for local change. Another client might have garbage-collected our state");
			this.Mi.enqueueRetryable((async () => {
				if (this.started) {
					if (null !== t.key) {
						if (this.ro.test(t.key)) {
							if (null == t.newValue) {
								const e$1 = this.Ro(t.key);
								return this.Vo(e$1, null);
							}
							{
								const e$1 = this.mo(t.key, t.newValue);
								if (e$1) return this.Vo(e$1.clientId, e$1);
							}
						} else if (this.io.test(t.key)) {
							if (null !== t.newValue) {
								const e$1 = this.fo(t.key, t.newValue);
								if (e$1) return this.po(e$1);
							}
						} else if (this.so.test(t.key)) {
							if (null !== t.newValue) {
								const e$1 = this.yo(t.key, t.newValue);
								if (e$1) return this.wo(e$1);
							}
						} else if (t.key === this.oo) {
							if (null !== t.newValue) {
								const e$1 = this.uo(t.newValue);
								if (e$1) return this.co(e$1);
							}
						} else if (t.key === this.no) {
							const e$1 = function __PRIVATE_fromWebStorageSequenceNumber(e$2) {
								let t$1 = __PRIVATE_ListenSequence.ce;
								if (null != e$2) try {
									const n = JSON.parse(e$2);
									__PRIVATE_hardAssert("number" == typeof n, 30636, { So: e$2 }), t$1 = n;
								} catch (e$3) {
									__PRIVATE_logError(jt, "Failed to read sequence number from WebStorage", e$3);
								}
								return t$1;
							}(t.newValue);
							e$1 !== __PRIVATE_ListenSequence.ce && this.sequenceNumberHandler(e$1);
						} else if (t.key === this._o) {
							const e$1 = this.bo(t.newValue);
							await Promise.all(e$1.map(((e$2) => this.syncEngine.Do(e$2))));
						}
					}
				} else this.Xs.push(t);
			}));
		}
	}
	get To() {
		return this.Zs.get(this.Js);
	}
	ao() {
		this.setItem(this.eo, this.To.Gs());
	}
	ho(e, t, n) {
		const r = new __PRIVATE_MutationMetadata(this.currentUser, e, t, n), i = createWebStorageMutationBatchKey(this.persistenceKey, this.currentUser, e);
		this.setItem(i, r.Gs());
	}
	Po(e) {
		const t = createWebStorageMutationBatchKey(this.persistenceKey, this.currentUser, e);
		this.removeItem(t);
	}
	Eo(e) {
		const t = {
			clientId: this.Js,
			onlineState: e
		};
		this.storage.setItem(this.oo, JSON.stringify(t));
	}
	Io(e, t, n) {
		const r = createWebStorageQueryTargetMetadataKey(this.persistenceKey, e), i = new __PRIVATE_QueryTargetMetadata(e, t, n);
		this.setItem(r, i.Gs());
	}
	Ao(e) {
		const t = JSON.stringify(Array.from(e));
		this.setItem(this._o, t);
	}
	/**
	* Parses a client state key in WebStorage. Returns null if the key does not
	* match the expected key format.
	*/ Ro(e) {
		const t = this.ro.exec(e);
		return t ? t[1] : null;
	}
	/**
	* Parses a client state in WebStorage. Returns 'null' if the value could not
	* be parsed.
	*/ mo(e, t) {
		const n = this.Ro(e);
		return __PRIVATE_RemoteClientState.Ws(n, t);
	}
	/**
	* Parses a mutation batch state in WebStorage. Returns 'null' if the value
	* could not be parsed.
	*/ fo(e, t) {
		const n = this.io.exec(e), r = Number(n[1]), i = void 0 !== n[2] ? n[2] : null;
		return __PRIVATE_MutationMetadata.Ws(new User(i), r, t);
	}
	/**
	* Parses a query target state from WebStorage. Returns 'null' if the value
	* could not be parsed.
	*/ yo(e, t) {
		const n = this.so.exec(e), r = Number(n[1]);
		return __PRIVATE_QueryTargetMetadata.Ws(r, t);
	}
	/**
	* Parses an online state from WebStorage. Returns 'null' if the value
	* could not be parsed.
	*/ uo(e) {
		return __PRIVATE_SharedOnlineState.Ws(e);
	}
	bo(e) {
		return JSON.parse(e);
	}
	async po(e) {
		if (e.user.uid === this.currentUser.uid) return this.syncEngine.Co(e.batchId, e.state, e.error);
		__PRIVATE_logDebug(jt, `Ignoring mutation for non-active user ${e.user.uid}`);
	}
	wo(e) {
		return this.syncEngine.vo(e.targetId, e.state, e.error);
	}
	Vo(e, t) {
		const n = t ? this.Zs.insert(e, t) : this.Zs.remove(e), r = this.lo(this.Zs), i = this.lo(n), s = [], o = [];
		return i.forEach(((e$1) => {
			r.has(e$1) || s.push(e$1);
		})), r.forEach(((e$1) => {
			i.has(e$1) || o.push(e$1);
		})), this.syncEngine.Fo(s, o).then((() => {
			this.Zs = n;
		}));
	}
	co(e) {
		this.Zs.get(e.clientId) && this.onlineStateHandler(e.onlineState);
	}
	lo(e) {
		let t = __PRIVATE_targetIdSet();
		return e.forEach(((e$1, n) => {
			t = t.unionWith(n.activeTargetIds);
		})), t;
	}
};
var __PRIVATE_MemorySharedClientState = class {
	constructor() {
		this.Mo = new __PRIVATE_LocalClientState(), this.xo = {}, this.onlineStateHandler = null, this.sequenceNumberHandler = null;
	}
	addPendingMutation(e) {}
	updateMutationState(e, t, n) {}
	addLocalQueryTarget(e, t = !0) {
		return t && this.Mo.zs(e), this.xo[e] || "not-current";
	}
	updateQueryState(e, t, n) {
		this.xo[e] = t;
	}
	removeLocalQueryTarget(e) {
		this.Mo.js(e);
	}
	isLocalQueryTarget(e) {
		return this.Mo.activeTargetIds.has(e);
	}
	clearQueryState(e) {
		delete this.xo[e];
	}
	getAllActiveQueryTargets() {
		return this.Mo.activeTargetIds;
	}
	isActiveQueryTarget(e) {
		return this.Mo.activeTargetIds.has(e);
	}
	start() {
		return this.Mo = new __PRIVATE_LocalClientState(), Promise.resolve();
	}
	handleUserChange(e, t, n) {}
	setOnlineState(e) {}
	shutdown() {}
	writeSequenceNumber(e) {}
	notifyBundleLoaded(e) {}
};
/**
* @license
* Copyright 2019 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ var __PRIVATE_NoopConnectivityMonitor = class {
	Oo(e) {}
	shutdown() {}
};
/**
* @license
* Copyright 2019 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var Jt = "ConnectivityMonitor";
/**
* Browser implementation of ConnectivityMonitor.
*/ var __PRIVATE_BrowserConnectivityMonitor = class {
	constructor() {
		this.No = () => this.Bo(), this.Lo = () => this.ko(), this.qo = [], this.Qo();
	}
	Oo(e) {
		this.qo.push(e);
	}
	shutdown() {
		window.removeEventListener("online", this.No), window.removeEventListener("offline", this.Lo);
	}
	Qo() {
		window.addEventListener("online", this.No), window.addEventListener("offline", this.Lo);
	}
	Bo() {
		__PRIVATE_logDebug(Jt, "Network connectivity changed: AVAILABLE");
		for (const e of this.qo) e(0);
	}
	ko() {
		__PRIVATE_logDebug(Jt, "Network connectivity changed: UNAVAILABLE");
		for (const e of this.qo) e(1);
	}
	/** Checks that all used attributes of window are available. */
	static v() {
		return "undefined" != typeof window && void 0 !== window.addEventListener && void 0 !== window.removeEventListener;
	}
};
/**
* @license
* Copyright 2023 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* The value returned from the most recent invocation of
* `generateUniqueDebugId()`, or null if it has never been invoked.
*/ var Ht = null;
/**
* Generates and returns an initial value for `lastUniqueDebugId`.
*
* The returned value is randomly selected from a range of integers that are
* represented as 8 hexadecimal digits. This means that (within reason) any
* numbers generated by incrementing the returned number by 1 will also be
* represented by 8 hexadecimal digits. This leads to all "IDs" having the same
* length when converted to a hexadecimal string, making reading logs containing
* these IDs easier to follow. And since the return value is randomly selected
* it will help to differentiate between logs from different executions.
*/
/**
* Generates and returns a unique ID as a hexadecimal string.
*
* The returned ID is intended to be used in debug logging messages to help
* correlate log messages that may be spatially separated in the logs, but
* logically related. For example, a network connection could include the same
* "debug ID" string in all of its log messages to help trace a specific
* connection over time.
*
* @return the 10-character generated ID (e.g. "0xa1b2c3d4").
*/
function __PRIVATE_generateUniqueDebugId() {
	return null === Ht ? Ht = function __PRIVATE_generateInitialUniqueDebugId() {
		return 268435456 + Math.round(2147483648 * Math.random());
	}() : Ht++, "0x" + Ht.toString(16);
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ var Yt = "RestConnection", Zt = {
	BatchGetDocuments: "batchGet",
	Commit: "commit",
	RunQuery: "runQuery",
	RunAggregationQuery: "runAggregationQuery"
};
/**
* Maps RPC names to the corresponding REST endpoint name.
*
* We use array notation to avoid mangling.
*/
/**
* Base class for all Rest-based connections to the backend (WebChannel and
* HTTP).
*/
var __PRIVATE_RestConnection = class {
	get $o() {
		return !1;
	}
	constructor(e) {
		this.databaseInfo = e, this.databaseId = e.databaseId;
		const t = e.ssl ? "https" : "http", n = encodeURIComponent(this.databaseId.projectId), r = encodeURIComponent(this.databaseId.database);
		this.Uo = t + "://" + e.host, this.Ko = `projects/${n}/databases/${r}`, this.Wo = this.databaseId.database === lt ? `project_id=${n}` : `project_id=${n}&database_id=${r}`;
	}
	Go(e, t, n, r, i) {
		const s = __PRIVATE_generateUniqueDebugId(), o = this.zo(e, t.toUriEncodedString());
		__PRIVATE_logDebug(Yt, `Sending RPC '${e}' ${s}:`, o, n);
		const _ = {
			"google-cloud-resource-prefix": this.Ko,
			"x-goog-request-params": this.Wo
		};
		this.jo(_, r, i);
		const { host: a } = new URL(o), u = isCloudWorkstation(a);
		return this.Jo(e, o, _, n, u).then(((t$1) => (__PRIVATE_logDebug(Yt, `Received RPC '${e}' ${s}: `, t$1), t$1)), ((t$1) => {
			throw __PRIVATE_logWarn(Yt, `RPC '${e}' ${s} failed with error: `, t$1, "url: ", o, "request:", n), t$1;
		}));
	}
	Ho(e, t, n, r, i, s) {
		return this.Go(e, t, n, r, i);
	}
	/**
	* Modifies the headers for a request, adding any authorization token if
	* present and any additional headers for the request.
	*/ jo(e, t, n) {
		e["X-Goog-Api-Client"] = function __PRIVATE_getGoogApiClientValue() {
			return "gl-js/ fire/" + x;
		}(), e["Content-Type"] = "text/plain", this.databaseInfo.appId && (e["X-Firebase-GMPID"] = this.databaseInfo.appId), t && t.headers.forEach(((t$1, n$1) => e[n$1] = t$1)), n && n.headers.forEach(((t$1, n$1) => e[n$1] = t$1));
	}
	zo(e, t) {
		const n = Zt[e];
		return `${this.Uo}/v1/${t}:${n}`;
	}
	/**
	* Closes and cleans up any resources associated with the connection. This
	* implementation is a no-op because there are no resources associated
	* with the RestConnection that need to be cleaned up.
	*/ terminate() {}
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Provides a simple helper class that implements the Stream interface to
* bridge to other implementations that are streams but do not implement the
* interface. The stream callbacks are invoked with the callOn... methods.
*/ var __PRIVATE_StreamBridge = class {
	constructor(e) {
		this.Yo = e.Yo, this.Zo = e.Zo;
	}
	Xo(e) {
		this.e_ = e;
	}
	t_(e) {
		this.n_ = e;
	}
	r_(e) {
		this.i_ = e;
	}
	onMessage(e) {
		this.s_ = e;
	}
	close() {
		this.Zo();
	}
	send(e) {
		this.Yo(e);
	}
	o_() {
		this.e_();
	}
	__() {
		this.n_();
	}
	a_(e) {
		this.i_(e);
	}
	u_(e) {
		this.s_(e);
	}
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ var Xt = "WebChannelConnection";
var __PRIVATE_WebChannelConnection = class extends __PRIVATE_RestConnection {
	constructor(e) {
		super(e), this.c_ = [], this.forceLongPolling = e.forceLongPolling, this.autoDetectLongPolling = e.autoDetectLongPolling, this.useFetchStreams = e.useFetchStreams, this.longPollingOptions = e.longPollingOptions;
	}
	Jo(e, t, n, r, i) {
		const s = __PRIVATE_generateUniqueDebugId();
		return new Promise(((i$1, o) => {
			const _ = new XhrIo();
			_.setWithCredentials(!0), _.listenOnce(EventType.COMPLETE, (() => {
				try {
					switch (_.getLastErrorCode()) {
						case ErrorCode.NO_ERROR:
							const t$1 = _.getResponseJson();
							__PRIVATE_logDebug(Xt, `XHR for RPC '${e}' ${s} received:`, JSON.stringify(t$1)), i$1(t$1);
							break;
						case ErrorCode.TIMEOUT:
							__PRIVATE_logDebug(Xt, `RPC '${e}' ${s} timed out`), o(new FirestoreError(N.DEADLINE_EXCEEDED, "Request time out"));
							break;
						case ErrorCode.HTTP_ERROR:
							const n$1 = _.getStatus();
							if (__PRIVATE_logDebug(Xt, `RPC '${e}' ${s} failed with status:`, n$1, "response text:", _.getResponseText()), n$1 > 0) {
								let e$1 = _.getResponseJson();
								Array.isArray(e$1) && (e$1 = e$1[0]);
								const t$2 = e$1?.error;
								if (t$2 && t$2.status && t$2.message) {
									const e$2 = function __PRIVATE_mapCodeFromHttpResponseErrorStatus(e$3) {
										const t$3 = e$3.toLowerCase().replace(/_/g, "-");
										return Object.values(N).indexOf(t$3) >= 0 ? t$3 : N.UNKNOWN;
									}(t$2.status);
									o(new FirestoreError(e$2, t$2.message));
								} else o(new FirestoreError(N.UNKNOWN, "Server responded with status " + _.getStatus()));
							} else o(new FirestoreError(N.UNAVAILABLE, "Connection failed."));
							break;
						default: fail(9055, {
							l_: e,
							streamId: s,
							h_: _.getLastErrorCode(),
							P_: _.getLastError()
						});
					}
				} finally {
					__PRIVATE_logDebug(Xt, `RPC '${e}' ${s} completed.`);
				}
			}));
			const a = JSON.stringify(r);
			__PRIVATE_logDebug(Xt, `RPC '${e}' ${s} sending request:`, r), _.send(t, "POST", a, n, 15);
		}));
	}
	T_(e, t, n) {
		const r = __PRIVATE_generateUniqueDebugId(), i = [
			this.Uo,
			"/",
			"google.firestore.v1.Firestore",
			"/",
			e,
			"/channel"
		], s = createWebChannelTransport(), o = getStatEventTarget(), _ = {
			httpSessionIdParam: "gsessionid",
			initMessageHeaders: {},
			messageUrlParams: { database: `projects/${this.databaseId.projectId}/databases/${this.databaseId.database}` },
			sendRawJson: !0,
			supportsCrossDomainXhr: !0,
			internalChannelParams: { forwardChannelRequestTimeoutMs: 6e5 },
			forceLongPolling: this.forceLongPolling,
			detectBufferingProxy: this.autoDetectLongPolling
		}, a = this.longPollingOptions.timeoutSeconds;
		void 0 !== a && (_.longPollingTimeout = Math.round(1e3 * a)), this.useFetchStreams && (_.useFetchStreams = !0), this.jo(_.initMessageHeaders, t, n), _.encodeInitMessageHeaders = !0;
		const u = i.join("");
		__PRIVATE_logDebug(Xt, `Creating RPC '${e}' stream ${r}: ${u}`, _);
		const c = s.createWebChannel(u, _);
		this.I_(c);
		let l = !1, h = !1;
		const P = new __PRIVATE_StreamBridge({
			Yo: (t$1) => {
				h ? __PRIVATE_logDebug(Xt, `Not sending because RPC '${e}' stream ${r} is closed:`, t$1) : (l || (__PRIVATE_logDebug(Xt, `Opening RPC '${e}' stream ${r} transport.`), c.open(), l = !0), __PRIVATE_logDebug(Xt, `RPC '${e}' stream ${r} sending:`, t$1), c.send(t$1));
			},
			Zo: () => c.close()
		}), __PRIVATE_unguardedEventListen = (e$1, t$1, n$1) => {
			e$1.listen(t$1, ((e$2) => {
				try {
					n$1(e$2);
				} catch (e$3) {
					setTimeout((() => {
						throw e$3;
					}), 0);
				}
			}));
		};
		return __PRIVATE_unguardedEventListen(c, WebChannel.EventType.OPEN, (() => {
			h || (__PRIVATE_logDebug(Xt, `RPC '${e}' stream ${r} transport opened.`), P.o_());
		})), __PRIVATE_unguardedEventListen(c, WebChannel.EventType.CLOSE, (() => {
			h || (h = !0, __PRIVATE_logDebug(Xt, `RPC '${e}' stream ${r} transport closed`), P.a_(), this.E_(c));
		})), __PRIVATE_unguardedEventListen(c, WebChannel.EventType.ERROR, ((t$1) => {
			h || (h = !0, __PRIVATE_logWarn(Xt, `RPC '${e}' stream ${r} transport errored. Name:`, t$1.name, "Message:", t$1.message), P.a_(new FirestoreError(N.UNAVAILABLE, "The operation could not be completed")));
		})), __PRIVATE_unguardedEventListen(c, WebChannel.EventType.MESSAGE, ((t$1) => {
			if (!h) {
				const n$1 = t$1.data[0];
				__PRIVATE_hardAssert(!!n$1, 16349);
				const i$1 = n$1, s$1 = i$1?.error || i$1[0]?.error;
				if (s$1) {
					__PRIVATE_logDebug(Xt, `RPC '${e}' stream ${r} received error:`, s$1);
					const t$2 = s$1.status;
					let n$2 = function __PRIVATE_mapCodeFromRpcStatus(e$1) {
						const t$3 = pt[e$1];
						if (void 0 !== t$3) return __PRIVATE_mapCodeFromRpcCode(t$3);
					}(t$2), i$2 = s$1.message;
					void 0 === n$2 && (n$2 = N.INTERNAL, i$2 = "Unknown error status: " + t$2 + " with message " + s$1.message), h = !0, P.a_(new FirestoreError(n$2, i$2)), c.close();
				} else __PRIVATE_logDebug(Xt, `RPC '${e}' stream ${r} received:`, n$1), P.u_(n$1);
			}
		})), __PRIVATE_unguardedEventListen(o, Event.STAT_EVENT, ((t$1) => {
			t$1.stat === Stat.PROXY ? __PRIVATE_logDebug(Xt, `RPC '${e}' stream ${r} detected buffering proxy`) : t$1.stat === Stat.NOPROXY && __PRIVATE_logDebug(Xt, `RPC '${e}' stream ${r} detected no buffering proxy`);
		})), setTimeout((() => {
			P.__();
		}), 0), P;
	}
	/**
	* Closes and cleans up any resources associated with the connection.
	*/ terminate() {
		this.c_.forEach(((e) => e.close())), this.c_ = [];
	}
	/**
	* Add a WebChannel instance to the collection of open instances.
	* @param webChannel
	*/ I_(e) {
		this.c_.push(e);
	}
	/**
	* Remove a WebChannel instance from the collection of open instances.
	* @param webChannel
	*/ E_(e) {
		this.c_ = this.c_.filter(((t) => t === e));
	}
};
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/** Initializes the WebChannelConnection for the browser. */
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/** The Platform's 'window' implementation or null if not available. */
function __PRIVATE_getWindow() {
	return "undefined" != typeof window ? window : null;
}
/** The Platform's 'document' implementation or null if not available. */ function getDocument() {
	return "undefined" != typeof document ? document : null;
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ function __PRIVATE_newSerializer(e) {
	return new JsonProtoSerializer(e, !0);
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* A helper for running delayed tasks following an exponential backoff curve
* between attempts.
*
* Each delay is made up of a "base" delay which follows the exponential
* backoff curve, and a +/- 50% "jitter" that is calculated and added to the
* base delay. This prevents clients from accidentally synchronizing their
* delays causing spikes of load to the backend.
*/
var __PRIVATE_ExponentialBackoff = class {
	constructor(e, t, n = 1e3, r = 1.5, i = 6e4) {
		this.Mi = e, this.timerId = t, this.d_ = n, this.A_ = r, this.R_ = i, this.V_ = 0, this.m_ = null, this.f_ = Date.now(), this.reset();
	}
	/**
	* Resets the backoff delay.
	*
	* The very next backoffAndWait() will have no delay. If it is called again
	* (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
	* subsequent ones will increase according to the backoffFactor.
	*/ reset() {
		this.V_ = 0;
	}
	/**
	* Resets the backoff delay to the maximum delay (e.g. for use after a
	* RESOURCE_EXHAUSTED error).
	*/ g_() {
		this.V_ = this.R_;
	}
	/**
	* Returns a promise that resolves after currentDelayMs, and increases the
	* delay for any subsequent attempts. If there was a pending backoff operation
	* already, it will be canceled.
	*/ p_(e) {
		this.cancel();
		const t = Math.floor(this.V_ + this.y_()), n = Math.max(0, Date.now() - this.f_), r = Math.max(0, t - n);
		r > 0 && __PRIVATE_logDebug("ExponentialBackoff", `Backing off for ${r} ms (base delay: ${this.V_} ms, delay with jitter: ${t} ms, last attempt: ${n} ms ago)`), this.m_ = this.Mi.enqueueAfterDelay(this.timerId, r, (() => (this.f_ = Date.now(), e()))), this.V_ *= this.A_, this.V_ < this.d_ && (this.V_ = this.d_), this.V_ > this.R_ && (this.V_ = this.R_);
	}
	w_() {
		null !== this.m_ && (this.m_.skipDelay(), this.m_ = null);
	}
	cancel() {
		null !== this.m_ && (this.m_.cancel(), this.m_ = null);
	}
	/** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */ y_() {
		return (Math.random() - .5) * this.V_;
	}
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ var en = "PersistentStream";
/** The time a stream stays open after it is marked idle. */
/**
* A PersistentStream is an abstract base class that represents a streaming RPC
* to the Firestore backend. It's built on top of the connections own support
* for streaming RPCs, and adds several critical features for our clients:
*
*   - Exponential backoff on failure
*   - Authentication via CredentialsProvider
*   - Dispatching all callbacks into the shared worker queue
*   - Closing idle streams after 60 seconds of inactivity
*
* Subclasses of PersistentStream implement serialization of models to and
* from the JSON representation of the protocol buffers for a specific
* streaming RPC.
*
* ## Starting and Stopping
*
* Streaming RPCs are stateful and need to be start()ed before messages can
* be sent and received. The PersistentStream will call the onOpen() function
* of the listener once the stream is ready to accept requests.
*
* Should a start() fail, PersistentStream will call the registered onClose()
* listener with a FirestoreError indicating what went wrong.
*
* A PersistentStream can be started and stopped repeatedly.
*
* Generic types:
*  SendType: The type of the outgoing message of the underlying
*    connection stream
*  ReceiveType: The type of the incoming message of the underlying
*    connection stream
*  ListenerType: The type of the listener that will be used for callbacks
*/
var __PRIVATE_PersistentStream = class {
	constructor(e, t, n, r, i, s, o, _) {
		this.Mi = e, this.S_ = n, this.b_ = r, this.connection = i, this.authCredentialsProvider = s, this.appCheckCredentialsProvider = o, this.listener = _, this.state = 0, this.D_ = 0, this.C_ = null, this.v_ = null, this.stream = null, this.F_ = 0, this.M_ = new __PRIVATE_ExponentialBackoff(e, t);
	}
	/**
	* Returns true if start() has been called and no error has occurred. True
	* indicates the stream is open or in the process of opening (which
	* encompasses respecting backoff, getting auth tokens, and starting the
	* actual RPC). Use isOpen() to determine if the stream is open and ready for
	* outbound requests.
	*/ x_() {
		return 1 === this.state || 5 === this.state || this.O_();
	}
	/**
	* Returns true if the underlying RPC is open (the onOpen() listener has been
	* called) and the stream is ready for outbound requests.
	*/ O_() {
		return 2 === this.state || 3 === this.state;
	}
	/**
	* Starts the RPC. Only allowed if isStarted() returns false. The stream is
	* not immediately ready for use: onOpen() will be invoked when the RPC is
	* ready for outbound requests, at which point isOpen() will return true.
	*
	* When start returns, isStarted() will return true.
	*/ start() {
		this.F_ = 0, 4 !== this.state ? this.auth() : this.N_();
	}
	/**
	* Stops the RPC. This call is idempotent and allowed regardless of the
	* current isStarted() state.
	*
	* When stop returns, isStarted() and isOpen() will both return false.
	*/ async stop() {
		this.x_() && await this.close(0);
	}
	/**
	* After an error the stream will usually back off on the next attempt to
	* start it. If the error warrants an immediate restart of the stream, the
	* sender can use this to indicate that the receiver should not back off.
	*
	* Each error will call the onClose() listener. That function can decide to
	* inhibit backoff if required.
	*/ B_() {
		this.state = 0, this.M_.reset();
	}
	/**
	* Marks this stream as idle. If no further actions are performed on the
	* stream for one minute, the stream will automatically close itself and
	* notify the stream's onClose() handler with Status.OK. The stream will then
	* be in a !isStarted() state, requiring the caller to start the stream again
	* before further use.
	*
	* Only streams that are in state 'Open' can be marked idle, as all other
	* states imply pending network operations.
	*/ L_() {
		this.O_() && null === this.C_ && (this.C_ = this.Mi.enqueueAfterDelay(this.S_, 6e4, (() => this.k_())));
	}
	/** Sends a message to the underlying stream. */ q_(e) {
		this.Q_(), this.stream.send(e);
	}
	/** Called by the idle timer when the stream should close due to inactivity. */ async k_() {
		if (this.O_()) return this.close(0);
	}
	/** Marks the stream as active again. */ Q_() {
		this.C_ && (this.C_.cancel(), this.C_ = null);
	}
	/** Cancels the health check delayed operation. */ U_() {
		this.v_ && (this.v_.cancel(), this.v_ = null);
	}
	/**
	* Closes the stream and cleans up as necessary:
	*
	* * closes the underlying GRPC stream;
	* * calls the onClose handler with the given 'error';
	* * sets internal stream state to 'finalState';
	* * adjusts the backoff timer based on the error
	*
	* A new stream can be opened by calling start().
	*
	* @param finalState - the intended state of the stream after closing.
	* @param error - the error the connection was closed with.
	*/ async close(e, t) {
		this.Q_(), this.U_(), this.M_.cancel(), this.D_++, 4 !== e ? this.M_.reset() : t && t.code === N.RESOURCE_EXHAUSTED ? (__PRIVATE_logError(t.toString()), __PRIVATE_logError("Using maximum backoff delay to prevent overloading the backend."), this.M_.g_()) : t && t.code === N.UNAUTHENTICATED && 3 !== this.state && (this.authCredentialsProvider.invalidateToken(), this.appCheckCredentialsProvider.invalidateToken()), null !== this.stream && (this.K_(), this.stream.close(), this.stream = null), this.state = e, await this.listener.r_(t);
	}
	/**
	* Can be overridden to perform additional cleanup before the stream is closed.
	* Calling super.tearDown() is not required.
	*/ K_() {}
	auth() {
		this.state = 1;
		const e = this.W_(this.D_), t = this.D_;
		Promise.all([this.authCredentialsProvider.getToken(), this.appCheckCredentialsProvider.getToken()]).then((([e$1, n]) => {
			this.D_ === t && this.G_(e$1, n);
		}), ((t$1) => {
			e((() => {
				const e$1 = new FirestoreError(N.UNKNOWN, "Fetching auth token failed: " + t$1.message);
				return this.z_(e$1);
			}));
		}));
	}
	G_(e, t) {
		const n = this.W_(this.D_);
		this.stream = this.j_(e, t), this.stream.Xo((() => {
			n((() => this.listener.Xo()));
		})), this.stream.t_((() => {
			n((() => (this.state = 2, this.v_ = this.Mi.enqueueAfterDelay(this.b_, 1e4, (() => (this.O_() && (this.state = 3), Promise.resolve()))), this.listener.t_())));
		})), this.stream.r_(((e$1) => {
			n((() => this.z_(e$1)));
		})), this.stream.onMessage(((e$1) => {
			n((() => 1 == ++this.F_ ? this.J_(e$1) : this.onNext(e$1)));
		}));
	}
	N_() {
		this.state = 5, this.M_.p_((async () => {
			this.state = 0, this.start();
		}));
	}
	z_(e) {
		return __PRIVATE_logDebug(en, `close with error: ${e}`), this.stream = null, this.close(4, e);
	}
	/**
	* Returns a "dispatcher" function that dispatches operations onto the
	* AsyncQueue but only runs them if closeCount remains unchanged. This allows
	* us to turn auth / stream callbacks into no-ops if the stream is closed /
	* re-opened, etc.
	*/ W_(e) {
		return (t) => {
			this.Mi.enqueueAndForget((() => this.D_ === e ? t() : (__PRIVATE_logDebug(en, "stream callback skipped by getCloseGuardedDispatcher."), Promise.resolve())));
		};
	}
};
/**
* A PersistentStream that implements the Listen RPC.
*
* Once the Listen stream has called the onOpen() listener, any number of
* listen() and unlisten() calls can be made to control what changes will be
* sent from the server for ListenResponses.
*/ var __PRIVATE_PersistentListenStream = class extends __PRIVATE_PersistentStream {
	constructor(e, t, n, r, i, s) {
		super(e, "listen_stream_connection_backoff", "listen_stream_idle", "health_check_timeout", t, n, r, s), this.serializer = i;
	}
	j_(e, t) {
		return this.connection.T_("Listen", e, t);
	}
	J_(e) {
		return this.onNext(e);
	}
	onNext(e) {
		this.M_.reset();
		const t = __PRIVATE_fromWatchChange(this.serializer, e), n = function __PRIVATE_versionFromListenResponse(e$1) {
			if (!("targetChange" in e$1)) return SnapshotVersion.min();
			const t$1 = e$1.targetChange;
			return t$1.targetIds && t$1.targetIds.length ? SnapshotVersion.min() : t$1.readTime ? __PRIVATE_fromVersion(t$1.readTime) : SnapshotVersion.min();
		}(e);
		return this.listener.H_(t, n);
	}
	/**
	* Registers interest in the results of the given target. If the target
	* includes a resumeToken it will be included in the request. Results that
	* affect the target will be streamed back as WatchChange messages that
	* reference the targetId.
	*/ Y_(e) {
		const t = {};
		t.database = __PRIVATE_getEncodedDatabaseId(this.serializer), t.addTarget = function __PRIVATE_toTarget(e$1, t$1) {
			let n$1;
			const r = t$1.target;
			if (n$1 = __PRIVATE_targetIsDocumentTarget(r) ? { documents: __PRIVATE_toDocumentsTarget(e$1, r) } : { query: __PRIVATE_toQueryTarget(e$1, r).ft }, n$1.targetId = t$1.targetId, t$1.resumeToken.approximateByteSize() > 0) {
				n$1.resumeToken = __PRIVATE_toBytes(e$1, t$1.resumeToken);
				const r$1 = __PRIVATE_toInt32Proto(e$1, t$1.expectedCount);
				null !== r$1 && (n$1.expectedCount = r$1);
			} else if (t$1.snapshotVersion.compareTo(SnapshotVersion.min()) > 0) {
				n$1.readTime = toTimestamp(e$1, t$1.snapshotVersion.toTimestamp());
				const r$1 = __PRIVATE_toInt32Proto(e$1, t$1.expectedCount);
				null !== r$1 && (n$1.expectedCount = r$1);
			}
			return n$1;
		}(this.serializer, e);
		const n = __PRIVATE_toListenRequestLabels(this.serializer, e);
		n && (t.labels = n), this.q_(t);
	}
	/**
	* Unregisters interest in the results of the target associated with the
	* given targetId.
	*/ Z_(e) {
		const t = {};
		t.database = __PRIVATE_getEncodedDatabaseId(this.serializer), t.removeTarget = e, this.q_(t);
	}
};
/**
* A Stream that implements the Write RPC.
*
* The Write RPC requires the caller to maintain special streamToken
* state in between calls, to help the server understand which responses the
* client has processed by the time the next request is made. Every response
* will contain a streamToken; this value must be passed to the next
* request.
*
* After calling start() on this stream, the next request must be a handshake,
* containing whatever streamToken is on hand. Once a response to this
* request is received, all pending mutations may be submitted. When
* submitting multiple batches of mutations at the same time, it's
* okay to use the same streamToken for the calls to writeMutations.
*
* TODO(b/33271235): Use proto types
*/ var __PRIVATE_PersistentWriteStream = class extends __PRIVATE_PersistentStream {
	constructor(e, t, n, r, i, s) {
		super(e, "write_stream_connection_backoff", "write_stream_idle", "health_check_timeout", t, n, r, s), this.serializer = i;
	}
	/**
	* Tracks whether or not a handshake has been successfully exchanged and
	* the stream is ready to accept mutations.
	*/ get X_() {
		return this.F_ > 0;
	}
	start() {
		this.lastStreamToken = void 0, super.start();
	}
	K_() {
		this.X_ && this.ea([]);
	}
	j_(e, t) {
		return this.connection.T_("Write", e, t);
	}
	J_(e) {
		return __PRIVATE_hardAssert(!!e.streamToken, 31322), this.lastStreamToken = e.streamToken, __PRIVATE_hardAssert(!e.writeResults || 0 === e.writeResults.length, 55816), this.listener.ta();
	}
	onNext(e) {
		__PRIVATE_hardAssert(!!e.streamToken, 12678), this.lastStreamToken = e.streamToken, this.M_.reset();
		const t = __PRIVATE_fromWriteResults(e.writeResults, e.commitTime), n = __PRIVATE_fromVersion(e.commitTime);
		return this.listener.na(n, t);
	}
	/**
	* Sends an initial streamToken to the server, performing the handshake
	* required to make the StreamingWrite RPC work. Subsequent
	* calls should wait until onHandshakeComplete was called.
	*/ ra() {
		const e = {};
		e.database = __PRIVATE_getEncodedDatabaseId(this.serializer), this.q_(e);
	}
	/** Sends a group of mutations to the Firestore backend to apply. */ ea(e) {
		const t = {
			streamToken: this.lastStreamToken,
			writes: e.map(((e$1) => toMutation(this.serializer, e$1)))
		};
		this.q_(t);
	}
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Datastore and its related methods are a wrapper around the external Google
* Cloud Datastore grpc API, which provides an interface that is more convenient
* for the rest of the client SDK architecture to consume.
*/ var Datastore = class {};
/**
* An implementation of Datastore that exposes additional state for internal
* consumption.
*/ var __PRIVATE_DatastoreImpl = class extends Datastore {
	constructor(e, t, n, r) {
		super(), this.authCredentials = e, this.appCheckCredentials = t, this.connection = n, this.serializer = r, this.ia = !1;
	}
	sa() {
		if (this.ia) throw new FirestoreError(N.FAILED_PRECONDITION, "The client has already been terminated.");
	}
	/** Invokes the provided RPC with auth and AppCheck tokens. */ Go(e, t, n, r) {
		return this.sa(), Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then((([i, s]) => this.connection.Go(e, __PRIVATE_toResourcePath(t, n), r, i, s))).catch(((e$1) => {
			throw "FirebaseError" === e$1.name ? (e$1.code === N.UNAUTHENTICATED && (this.authCredentials.invalidateToken(), this.appCheckCredentials.invalidateToken()), e$1) : new FirestoreError(N.UNKNOWN, e$1.toString());
		}));
	}
	/** Invokes the provided RPC with streamed results with auth and AppCheck tokens. */ Ho(e, t, n, r, i) {
		return this.sa(), Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then((([s, o]) => this.connection.Ho(e, __PRIVATE_toResourcePath(t, n), r, s, o, i))).catch(((e$1) => {
			throw "FirebaseError" === e$1.name ? (e$1.code === N.UNAUTHENTICATED && (this.authCredentials.invalidateToken(), this.appCheckCredentials.invalidateToken()), e$1) : new FirestoreError(N.UNKNOWN, e$1.toString());
		}));
	}
	terminate() {
		this.ia = !0, this.connection.terminate();
	}
};
/**
* A component used by the RemoteStore to track the OnlineState (that is,
* whether or not the client as a whole should be considered to be online or
* offline), implementing the appropriate heuristics.
*
* In particular, when the client is trying to connect to the backend, we
* allow up to MAX_WATCH_STREAM_FAILURES within ONLINE_STATE_TIMEOUT_MS for
* a connection to succeed. If we have too many failures or the timeout elapses,
* then we set the OnlineState to Offline, and the client will behave as if
* it is offline (get()s will return cached data, etc.).
*/
var __PRIVATE_OnlineStateTracker = class {
	constructor(e, t) {
		this.asyncQueue = e, this.onlineStateHandler = t, this.state = "Unknown", this.oa = 0, this._a = null, this.aa = !0;
	}
	/**
	* Called by RemoteStore when a watch stream is started (including on each
	* backoff attempt).
	*
	* If this is the first attempt, it sets the OnlineState to Unknown and starts
	* the onlineStateTimer.
	*/ ua() {
		0 === this.oa && (this.ca("Unknown"), this._a = this.asyncQueue.enqueueAfterDelay("online_state_timeout", 1e4, (() => (this._a = null, this.la("Backend didn't respond within 10 seconds."), this.ca("Offline"), Promise.resolve()))));
	}
	/**
	* Updates our OnlineState as appropriate after the watch stream reports a
	* failure. The first failure moves us to the 'Unknown' state. We then may
	* allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we
	* actually transition to the 'Offline' state.
	*/ ha(e) {
		"Online" === this.state ? this.ca("Unknown") : (this.oa++, this.oa >= 1 && (this.Pa(), this.la(`Connection failed 1 times. Most recent error: ${e.toString()}`), this.ca("Offline")));
	}
	/**
	* Explicitly sets the OnlineState to the specified state.
	*
	* Note that this resets our timers / failure counters, etc. used by our
	* Offline heuristics, so must not be used in place of
	* handleWatchStreamStart() and handleWatchStreamFailure().
	*/ set(e) {
		this.Pa(), this.oa = 0, "Online" === e && (this.aa = !1), this.ca(e);
	}
	ca(e) {
		e !== this.state && (this.state = e, this.onlineStateHandler(e));
	}
	la(e) {
		const t = `Could not reach Cloud Firestore backend. ${e}\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.`;
		this.aa ? (__PRIVATE_logError(t), this.aa = !1) : __PRIVATE_logDebug("OnlineStateTracker", t);
	}
	Pa() {
		null !== this._a && (this._a.cancel(), this._a = null);
	}
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ var tn = "RemoteStore";
var __PRIVATE_RemoteStoreImpl = class {
	constructor(e, t, n, r, i) {
		this.localStore = e, this.datastore = t, this.asyncQueue = n, this.remoteSyncer = {}, this.Ta = [], this.Ia = /* @__PURE__ */ new Map(), this.Ea = /* @__PURE__ */ new Set(), this.da = [], this.Aa = i, this.Aa.Oo(((e$1) => {
			n.enqueueAndForget((async () => {
				__PRIVATE_canUseNetwork(this) && (__PRIVATE_logDebug(tn, "Restarting streams for network reachability change."), await async function __PRIVATE_restartNetwork(e$2) {
					const t$1 = __PRIVATE_debugCast(e$2);
					t$1.Ea.add(4), await __PRIVATE_disableNetworkInternal(t$1), t$1.Ra.set("Unknown"), t$1.Ea.delete(4), await __PRIVATE_enableNetworkInternal(t$1);
				}(this));
			}));
		})), this.Ra = new __PRIVATE_OnlineStateTracker(n, r);
	}
};
async function __PRIVATE_enableNetworkInternal(e) {
	if (__PRIVATE_canUseNetwork(e)) for (const t of e.da) await t(!0);
}
/**
* Temporarily disables the network. The network can be re-enabled using
* enableNetwork().
*/ async function __PRIVATE_disableNetworkInternal(e) {
	for (const t of e.da) await t(!1);
}
/**
* Starts new listen for the given target. Uses resume token if provided. It
* is a no-op if the target of given `TargetData` is already being listened to.
*/
function __PRIVATE_remoteStoreListen(e, t) {
	const n = __PRIVATE_debugCast(e);
	n.Ia.has(t.targetId) || (n.Ia.set(t.targetId, t), __PRIVATE_shouldStartWatchStream(n) ? __PRIVATE_startWatchStream(n) : __PRIVATE_ensureWatchStream(n).O_() && __PRIVATE_sendWatchRequest(n, t));
}
/**
* Removes the listen from server. It is a no-op if the given target id is
* not being listened to.
*/ function __PRIVATE_remoteStoreUnlisten(e, t) {
	const n = __PRIVATE_debugCast(e), r = __PRIVATE_ensureWatchStream(n);
	n.Ia.delete(t), r.O_() && __PRIVATE_sendUnwatchRequest(n, t), 0 === n.Ia.size && (r.O_() ? r.L_() : __PRIVATE_canUseNetwork(n) && n.Ra.set("Unknown"));
}
/**
* We need to increment the expected number of pending responses we're due
* from watch so we wait for the ack to process any messages from this target.
*/ function __PRIVATE_sendWatchRequest(e, t) {
	if (e.Va.Ue(t.targetId), t.resumeToken.approximateByteSize() > 0 || t.snapshotVersion.compareTo(SnapshotVersion.min()) > 0) {
		const n = e.remoteSyncer.getRemoteKeysForTarget(t.targetId).size;
		t = t.withExpectedCount(n);
	}
	__PRIVATE_ensureWatchStream(e).Y_(t);
}
/**
* We need to increment the expected number of pending responses we're due
* from watch so we wait for the removal on the server before we process any
* messages from this target.
*/ function __PRIVATE_sendUnwatchRequest(e, t) {
	e.Va.Ue(t), __PRIVATE_ensureWatchStream(e).Z_(t);
}
function __PRIVATE_startWatchStream(e) {
	e.Va = new __PRIVATE_WatchChangeAggregator({
		getRemoteKeysForTarget: (t) => e.remoteSyncer.getRemoteKeysForTarget(t),
		At: (t) => e.Ia.get(t) || null,
		ht: () => e.datastore.serializer.databaseId
	}), __PRIVATE_ensureWatchStream(e).start(), e.Ra.ua();
}
/**
* Returns whether the watch stream should be started because it's necessary
* and has not yet been started.
*/ function __PRIVATE_shouldStartWatchStream(e) {
	return __PRIVATE_canUseNetwork(e) && !__PRIVATE_ensureWatchStream(e).x_() && e.Ia.size > 0;
}
function __PRIVATE_canUseNetwork(e) {
	return 0 === __PRIVATE_debugCast(e).Ea.size;
}
function __PRIVATE_cleanUpWatchStreamState(e) {
	e.Va = void 0;
}
async function __PRIVATE_onWatchStreamConnected(e) {
	e.Ra.set("Online");
}
async function __PRIVATE_onWatchStreamOpen(e) {
	e.Ia.forEach(((t, n) => {
		__PRIVATE_sendWatchRequest(e, t);
	}));
}
async function __PRIVATE_onWatchStreamClose(e, t) {
	__PRIVATE_cleanUpWatchStreamState(e), __PRIVATE_shouldStartWatchStream(e) ? (e.Ra.ha(t), __PRIVATE_startWatchStream(e)) : e.Ra.set("Unknown");
}
async function __PRIVATE_onWatchStreamChange(e, t, n) {
	if (e.Ra.set("Online"), t instanceof __PRIVATE_WatchTargetChange && 2 === t.state && t.cause) try {
		/** Handles an error on a target */
		await async function __PRIVATE_handleTargetError(e$1, t$1) {
			const n$1 = t$1.cause;
			for (const r of t$1.targetIds) e$1.Ia.has(r) && (await e$1.remoteSyncer.rejectListen(r, n$1), e$1.Ia.delete(r), e$1.Va.removeTarget(r));
		}(e, t);
	} catch (n$1) {
		__PRIVATE_logDebug(tn, "Failed to remove targets %s: %s ", t.targetIds.join(","), n$1), await __PRIVATE_disableNetworkUntilRecovery(e, n$1);
	}
	else if (t instanceof __PRIVATE_DocumentWatchChange ? e.Va.Ze(t) : t instanceof __PRIVATE_ExistenceFilterChange ? e.Va.st(t) : e.Va.tt(t), !n.isEqual(SnapshotVersion.min())) try {
		const t$1 = await __PRIVATE_localStoreGetLastRemoteSnapshotVersion(e.localStore);
		n.compareTo(t$1) >= 0 && await function __PRIVATE_raiseWatchSnapshot(e$1, t$2) {
			const n$1 = e$1.Va.Tt(t$2);
			return n$1.targetChanges.forEach(((n$2, r) => {
				if (n$2.resumeToken.approximateByteSize() > 0) {
					const i = e$1.Ia.get(r);
					i && e$1.Ia.set(r, i.withResumeToken(n$2.resumeToken, t$2));
				}
			})), n$1.targetMismatches.forEach(((t$3, n$2) => {
				const r = e$1.Ia.get(t$3);
				if (!r) return;
				e$1.Ia.set(t$3, r.withResumeToken(ByteString.EMPTY_BYTE_STRING, r.snapshotVersion)), __PRIVATE_sendUnwatchRequest(e$1, t$3);
				const i = new TargetData(r.target, t$3, n$2, r.sequenceNumber);
				__PRIVATE_sendWatchRequest(e$1, i);
			})), e$1.remoteSyncer.applyRemoteEvent(n$1);
		}(e, n);
	} catch (t$1) {
		__PRIVATE_logDebug(tn, "Failed to raise snapshot:", t$1), await __PRIVATE_disableNetworkUntilRecovery(e, t$1);
	}
}
/**
* Recovery logic for IndexedDB errors that takes the network offline until
* `op` succeeds. Retries are scheduled with backoff using
* `enqueueRetryable()`. If `op()` is not provided, IndexedDB access is
* validated via a generic operation.
*
* The returned Promise is resolved once the network is disabled and before
* any retry attempt.
*/ async function __PRIVATE_disableNetworkUntilRecovery(e, t, n) {
	if (!__PRIVATE_isIndexedDbTransactionError(t)) throw t;
	e.Ea.add(1), await __PRIVATE_disableNetworkInternal(e), e.Ra.set("Offline"), n || (n = () => __PRIVATE_localStoreGetLastRemoteSnapshotVersion(e.localStore)), e.asyncQueue.enqueueRetryable((async () => {
		__PRIVATE_logDebug(tn, "Retrying IndexedDB access"), await n(), e.Ea.delete(1), await __PRIVATE_enableNetworkInternal(e);
	}));
}
/**
* Executes `op`. If `op` fails, takes the network offline until `op`
* succeeds. Returns after the first attempt.
*/ function __PRIVATE_executeWithRecovery(e, t) {
	return t().catch(((n) => __PRIVATE_disableNetworkUntilRecovery(e, n, t)));
}
async function __PRIVATE_fillWritePipeline(e) {
	const t = __PRIVATE_debugCast(e), n = __PRIVATE_ensureWriteStream(t);
	let r = t.Ta.length > 0 ? t.Ta[t.Ta.length - 1].batchId : j;
	for (; __PRIVATE_canAddToWritePipeline(t);) try {
		const e$1 = await __PRIVATE_localStoreGetNextMutationBatch(t.localStore, r);
		if (null === e$1) {
			0 === t.Ta.length && n.L_();
			break;
		}
		r = e$1.batchId, __PRIVATE_addToWritePipeline(t, e$1);
	} catch (e$1) {
		await __PRIVATE_disableNetworkUntilRecovery(t, e$1);
	}
	__PRIVATE_shouldStartWriteStream(t) && __PRIVATE_startWriteStream(t);
}
/**
* Returns true if we can add to the write pipeline (i.e. the network is
* enabled and the write pipeline is not full).
*/ function __PRIVATE_canAddToWritePipeline(e) {
	return __PRIVATE_canUseNetwork(e) && e.Ta.length < 10;
}
/**
* Queues additional writes to be sent to the write stream, sending them
* immediately if the write stream is established.
*/ function __PRIVATE_addToWritePipeline(e, t) {
	e.Ta.push(t);
	const n = __PRIVATE_ensureWriteStream(e);
	n.O_() && n.X_ && n.ea(t.mutations);
}
function __PRIVATE_shouldStartWriteStream(e) {
	return __PRIVATE_canUseNetwork(e) && !__PRIVATE_ensureWriteStream(e).x_() && e.Ta.length > 0;
}
function __PRIVATE_startWriteStream(e) {
	__PRIVATE_ensureWriteStream(e).start();
}
async function __PRIVATE_onWriteStreamOpen(e) {
	__PRIVATE_ensureWriteStream(e).ra();
}
async function __PRIVATE_onWriteHandshakeComplete(e) {
	const t = __PRIVATE_ensureWriteStream(e);
	for (const n of e.Ta) t.ea(n.mutations);
}
async function __PRIVATE_onMutationResult(e, t, n) {
	const r = e.Ta.shift(), i = MutationBatchResult.from(r, t, n);
	await __PRIVATE_executeWithRecovery(e, (() => e.remoteSyncer.applySuccessfulWrite(i))), await __PRIVATE_fillWritePipeline(e);
}
async function __PRIVATE_onWriteStreamClose(e, t) {
	t && __PRIVATE_ensureWriteStream(e).X_ && await async function __PRIVATE_handleWriteError(e$1, t$1) {
		if (function __PRIVATE_isPermanentWriteError(e$2) {
			return __PRIVATE_isPermanentError(e$2) && e$2 !== N.ABORTED;
		}(t$1.code)) {
			const n = e$1.Ta.shift();
			__PRIVATE_ensureWriteStream(e$1).B_(), await __PRIVATE_executeWithRecovery(e$1, (() => e$1.remoteSyncer.rejectFailedWrite(n.batchId, t$1))), await __PRIVATE_fillWritePipeline(e$1);
		}
	}(e, t), __PRIVATE_shouldStartWriteStream(e) && __PRIVATE_startWriteStream(e);
}
async function __PRIVATE_remoteStoreHandleCredentialChange(e, t) {
	const n = __PRIVATE_debugCast(e);
	n.asyncQueue.verifyOperationInProgress(), __PRIVATE_logDebug(tn, "RemoteStore received new credentials");
	const r = __PRIVATE_canUseNetwork(n);
	n.Ea.add(3), await __PRIVATE_disableNetworkInternal(n), r && n.Ra.set("Unknown"), await n.remoteSyncer.handleCredentialChange(t), n.Ea.delete(3), await __PRIVATE_enableNetworkInternal(n);
}
/**
* Toggles the network state when the client gains or loses its primary lease.
*/ async function __PRIVATE_remoteStoreApplyPrimaryState(e, t) {
	const n = __PRIVATE_debugCast(e);
	t ? (n.Ea.delete(2), await __PRIVATE_enableNetworkInternal(n)) : t || (n.Ea.add(2), await __PRIVATE_disableNetworkInternal(n), n.Ra.set("Unknown"));
}
/**
* If not yet initialized, registers the WatchStream and its network state
* callback with `remoteStoreImpl`. Returns the existing stream if one is
* already available.
*
* PORTING NOTE: On iOS and Android, the WatchStream gets registered on startup.
* This is not done on Web to allow it to be tree-shaken.
*/ function __PRIVATE_ensureWatchStream(e) {
	return e.ma || (e.ma = function __PRIVATE_newPersistentWatchStream(e$1, t, n) {
		const r = __PRIVATE_debugCast(e$1);
		return r.sa(), new __PRIVATE_PersistentListenStream(t, r.connection, r.authCredentials, r.appCheckCredentials, r.serializer, n);
	}(e.datastore, e.asyncQueue, {
		Xo: __PRIVATE_onWatchStreamConnected.bind(null, e),
		t_: __PRIVATE_onWatchStreamOpen.bind(null, e),
		r_: __PRIVATE_onWatchStreamClose.bind(null, e),
		H_: __PRIVATE_onWatchStreamChange.bind(null, e)
	}), e.da.push((async (t) => {
		t ? (e.ma.B_(), __PRIVATE_shouldStartWatchStream(e) ? __PRIVATE_startWatchStream(e) : e.Ra.set("Unknown")) : (await e.ma.stop(), __PRIVATE_cleanUpWatchStreamState(e));
	}))), e.ma;
}
/**
* If not yet initialized, registers the WriteStream and its network state
* callback with `remoteStoreImpl`. Returns the existing stream if one is
* already available.
*
* PORTING NOTE: On iOS and Android, the WriteStream gets registered on startup.
* This is not done on Web to allow it to be tree-shaken.
*/ function __PRIVATE_ensureWriteStream(e) {
	return e.fa || (e.fa = function __PRIVATE_newPersistentWriteStream(e$1, t, n) {
		const r = __PRIVATE_debugCast(e$1);
		return r.sa(), new __PRIVATE_PersistentWriteStream(t, r.connection, r.authCredentials, r.appCheckCredentials, r.serializer, n);
	}(e.datastore, e.asyncQueue, {
		Xo: () => Promise.resolve(),
		t_: __PRIVATE_onWriteStreamOpen.bind(null, e),
		r_: __PRIVATE_onWriteStreamClose.bind(null, e),
		ta: __PRIVATE_onWriteHandshakeComplete.bind(null, e),
		na: __PRIVATE_onMutationResult.bind(null, e)
	}), e.da.push((async (t) => {
		t ? (e.fa.B_(), await __PRIVATE_fillWritePipeline(e)) : (await e.fa.stop(), e.Ta.length > 0 && (__PRIVATE_logDebug(tn, `Stopping write stream with ${e.Ta.length} pending writes`), e.Ta = []));
	}))), e.fa;
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Represents an operation scheduled to be run in the future on an AsyncQueue.
*
* It is created via DelayedOperation.createAndSchedule().
*
* Supports cancellation (via cancel()) and early execution (via skipDelay()).
*
* Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type
* in newer versions of TypeScript defines `finally`, which is not available in
* IE.
*/
var DelayedOperation = class DelayedOperation {
	constructor(e, t, n, r, i) {
		this.asyncQueue = e, this.timerId = t, this.targetTimeMs = n, this.op = r, this.removalCallback = i, this.deferred = new __PRIVATE_Deferred(), this.then = this.deferred.promise.then.bind(this.deferred.promise), this.deferred.promise.catch(((e$1) => {}));
	}
	get promise() {
		return this.deferred.promise;
	}
	/**
	* Creates and returns a DelayedOperation that has been scheduled to be
	* executed on the provided asyncQueue after the provided delayMs.
	*
	* @param asyncQueue - The queue to schedule the operation on.
	* @param id - A Timer ID identifying the type of operation this is.
	* @param delayMs - The delay (ms) before the operation should be scheduled.
	* @param op - The operation to run.
	* @param removalCallback - A callback to be called synchronously once the
	*   operation is executed or canceled, notifying the AsyncQueue to remove it
	*   from its delayedOperations list.
	*   PORTING NOTE: This exists to prevent making removeDelayedOperation() and
	*   the DelayedOperation class public.
	*/ static createAndSchedule(e, t, n, r, i) {
		const s = Date.now() + n, o = new DelayedOperation(e, t, s, r, i);
		return o.start(n), o;
	}
	/**
	* Starts the timer. This is called immediately after construction by
	* createAndSchedule().
	*/ start(e) {
		this.timerHandle = setTimeout((() => this.handleDelayElapsed()), e);
	}
	/**
	* Queues the operation to run immediately (if it hasn't already been run or
	* canceled).
	*/ skipDelay() {
		return this.handleDelayElapsed();
	}
	/**
	* Cancels the operation if it hasn't already been executed or canceled. The
	* promise will be rejected.
	*
	* As long as the operation has not yet been run, calling cancel() provides a
	* guarantee that the operation will not be run.
	*/ cancel(e) {
		null !== this.timerHandle && (this.clearTimeout(), this.deferred.reject(new FirestoreError(N.CANCELLED, "Operation cancelled" + (e ? ": " + e : ""))));
	}
	handleDelayElapsed() {
		this.asyncQueue.enqueueAndForget((() => null !== this.timerHandle ? (this.clearTimeout(), this.op().then(((e) => this.deferred.resolve(e)))) : Promise.resolve()));
	}
	clearTimeout() {
		null !== this.timerHandle && (this.removalCallback(this), clearTimeout(this.timerHandle), this.timerHandle = null);
	}
};
/**
* Returns a FirestoreError that can be surfaced to the user if the provided
* error is an IndexedDbTransactionError. Re-throws the error otherwise.
*/ function __PRIVATE_wrapInUserErrorIfRecoverable(e, t) {
	if (__PRIVATE_logError("AsyncQueue", `${t}: ${e}`), __PRIVATE_isIndexedDbTransactionError(e)) return new FirestoreError(N.UNAVAILABLE, `${t}: ${e}`);
	throw e;
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* DocumentSet is an immutable (copy-on-write) collection that holds documents
* in order specified by the provided comparator. We always add a document key
* comparator on top of what is provided to guarantee document equality based on
* the key.
*/ var DocumentSet = class DocumentSet {
	/**
	* Returns an empty copy of the existing DocumentSet, using the same
	* comparator.
	*/
	static emptySet(e) {
		return new DocumentSet(e.comparator);
	}
	/** The default ordering is by key if the comparator is omitted */ constructor(e) {
		this.comparator = e ? (t, n) => e(t, n) || DocumentKey.comparator(t.key, n.key) : (e$1, t) => DocumentKey.comparator(e$1.key, t.key), this.keyedMap = documentMap(), this.sortedSet = new SortedMap(this.comparator);
	}
	has(e) {
		return null != this.keyedMap.get(e);
	}
	get(e) {
		return this.keyedMap.get(e);
	}
	first() {
		return this.sortedSet.minKey();
	}
	last() {
		return this.sortedSet.maxKey();
	}
	isEmpty() {
		return this.sortedSet.isEmpty();
	}
	/**
	* Returns the index of the provided key in the document set, or -1 if the
	* document key is not present in the set;
	*/ indexOf(e) {
		const t = this.keyedMap.get(e);
		return t ? this.sortedSet.indexOf(t) : -1;
	}
	get size() {
		return this.sortedSet.size;
	}
	/** Iterates documents in order defined by "comparator" */ forEach(e) {
		this.sortedSet.inorderTraversal(((t, n) => (e(t), !1)));
	}
	/** Inserts or updates a document with the same key */ add(e) {
		const t = this.delete(e.key);
		return t.copy(t.keyedMap.insert(e.key, e), t.sortedSet.insert(e, null));
	}
	/** Deletes a document with a given key */ delete(e) {
		const t = this.get(e);
		return t ? this.copy(this.keyedMap.remove(e), this.sortedSet.remove(t)) : this;
	}
	isEqual(e) {
		if (!(e instanceof DocumentSet)) return !1;
		if (this.size !== e.size) return !1;
		const t = this.sortedSet.getIterator(), n = e.sortedSet.getIterator();
		for (; t.hasNext();) {
			const e$1 = t.getNext().key, r = n.getNext().key;
			if (!e$1.isEqual(r)) return !1;
		}
		return !0;
	}
	toString() {
		const e = [];
		return this.forEach(((t) => {
			e.push(t.toString());
		})), 0 === e.length ? "DocumentSet ()" : "DocumentSet (\n  " + e.join("  \n") + "\n)";
	}
	copy(e, t) {
		const n = new DocumentSet();
		return n.comparator = this.comparator, n.keyedMap = e, n.sortedSet = t, n;
	}
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* DocumentChangeSet keeps track of a set of changes to docs in a query, merging
* duplicate events for the same doc.
*/ var __PRIVATE_DocumentChangeSet = class {
	constructor() {
		this.ga = new SortedMap(DocumentKey.comparator);
	}
	track(e) {
		const t = e.doc.key, n = this.ga.get(t);
		n ? 0 !== e.type && 3 === n.type ? this.ga = this.ga.insert(t, e) : 3 === e.type && 1 !== n.type ? this.ga = this.ga.insert(t, {
			type: n.type,
			doc: e.doc
		}) : 2 === e.type && 2 === n.type ? this.ga = this.ga.insert(t, {
			type: 2,
			doc: e.doc
		}) : 2 === e.type && 0 === n.type ? this.ga = this.ga.insert(t, {
			type: 0,
			doc: e.doc
		}) : 1 === e.type && 0 === n.type ? this.ga = this.ga.remove(t) : 1 === e.type && 2 === n.type ? this.ga = this.ga.insert(t, {
			type: 1,
			doc: n.doc
		}) : 0 === e.type && 1 === n.type ? this.ga = this.ga.insert(t, {
			type: 2,
			doc: e.doc
		}) : fail(63341, {
			Rt: e,
			pa: n
		}) : this.ga = this.ga.insert(t, e);
	}
	ya() {
		const e = [];
		return this.ga.inorderTraversal(((t, n) => {
			e.push(n);
		})), e;
	}
};
var ViewSnapshot = class ViewSnapshot {
	constructor(e, t, n, r, i, s, o, _, a) {
		this.query = e, this.docs = t, this.oldDocs = n, this.docChanges = r, this.mutatedKeys = i, this.fromCache = s, this.syncStateChanged = o, this.excludesMetadataChanges = _, this.hasCachedResults = a;
	}
	/** Returns a view snapshot as if all documents in the snapshot were added. */ static fromInitialDocuments(e, t, n, r, i) {
		const s = [];
		return t.forEach(((e$1) => {
			s.push({
				type: 0,
				doc: e$1
			});
		})), new ViewSnapshot(e, t, DocumentSet.emptySet(t), s, n, r, !0, !1, i);
	}
	get hasPendingWrites() {
		return !this.mutatedKeys.isEmpty();
	}
	isEqual(e) {
		if (!(this.fromCache === e.fromCache && this.hasCachedResults === e.hasCachedResults && this.syncStateChanged === e.syncStateChanged && this.mutatedKeys.isEqual(e.mutatedKeys) && __PRIVATE_queryEquals(this.query, e.query) && this.docs.isEqual(e.docs) && this.oldDocs.isEqual(e.oldDocs))) return !1;
		const t = this.docChanges, n = e.docChanges;
		if (t.length !== n.length) return !1;
		for (let e$1 = 0; e$1 < t.length; e$1++) if (t[e$1].type !== n[e$1].type || !t[e$1].doc.isEqual(n[e$1].doc)) return !1;
		return !0;
	}
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Holds the listeners and the last received ViewSnapshot for a query being
* tracked by EventManager.
*/ var __PRIVATE_QueryListenersInfo = class {
	constructor() {
		this.wa = void 0, this.Sa = [];
	}
	ba() {
		return this.Sa.some(((e) => e.Da()));
	}
};
var __PRIVATE_EventManagerImpl = class {
	constructor() {
		this.queries = __PRIVATE_newQueriesObjectMap(), this.onlineState = "Unknown", this.Ca = /* @__PURE__ */ new Set();
	}
	terminate() {
		(function __PRIVATE_errorAllTargets(e, t) {
			const n = __PRIVATE_debugCast(e), r = n.queries;
			n.queries = __PRIVATE_newQueriesObjectMap(), r.forEach(((e$1, n$1) => {
				for (const e$2 of n$1.Sa) e$2.onError(t);
			}));
		})(this, new FirestoreError(N.ABORTED, "Firestore shutting down"));
	}
};
function __PRIVATE_newQueriesObjectMap() {
	return new ObjectMap(((e) => __PRIVATE_canonifyQuery(e)), __PRIVATE_queryEquals);
}
async function __PRIVATE_eventManagerListen(e, t) {
	const n = __PRIVATE_debugCast(e);
	let r = 3;
	const i = t.query;
	let s = n.queries.get(i);
	s ? !s.ba() && t.Da() && (r = 2) : (s = new __PRIVATE_QueryListenersInfo(), r = t.Da() ? 0 : 1);
	try {
		switch (r) {
			case 0:
				s.wa = await n.onListen(
					i,
					/** enableRemoteListen= */
					!0
				);
				break;
			case 1:
				s.wa = await n.onListen(
					i,
					/** enableRemoteListen= */
					!1
				);
				break;
			case 2: await n.onFirstRemoteStoreListen(i);
		}
	} catch (e$1) {
		const n$1 = __PRIVATE_wrapInUserErrorIfRecoverable(e$1, `Initialization of query '${__PRIVATE_stringifyQuery(t.query)}' failed`);
		t.onError(n$1);
		return;
	}
	if (n.queries.set(i, s), s.Sa.push(t), t.va(n.onlineState), s.wa) t.Fa(s.wa) && __PRIVATE_raiseSnapshotsInSyncEvent(n);
}
async function __PRIVATE_eventManagerUnlisten(e, t) {
	const n = __PRIVATE_debugCast(e), r = t.query;
	let i = 3;
	const s = n.queries.get(r);
	if (s) {
		const e$1 = s.Sa.indexOf(t);
		e$1 >= 0 && (s.Sa.splice(e$1, 1), 0 === s.Sa.length ? i = t.Da() ? 0 : 1 : !s.ba() && t.Da() && (i = 2));
	}
	switch (i) {
		case 0: return n.queries.delete(r), n.onUnlisten(
			r,
			/** disableRemoteListen= */
			!0
		);
		case 1: return n.queries.delete(r), n.onUnlisten(
			r,
			/** disableRemoteListen= */
			!1
		);
		case 2: return n.onLastRemoteStoreUnlisten(r);
		default: return;
	}
}
function __PRIVATE_eventManagerOnWatchChange(e, t) {
	const n = __PRIVATE_debugCast(e);
	let r = !1;
	for (const e$1 of t) {
		const t$1 = e$1.query, i = n.queries.get(t$1);
		if (i) {
			for (const t$2 of i.Sa) t$2.Fa(e$1) && (r = !0);
			i.wa = e$1;
		}
	}
	r && __PRIVATE_raiseSnapshotsInSyncEvent(n);
}
function __PRIVATE_eventManagerOnWatchError(e, t, n) {
	const r = __PRIVATE_debugCast(e), i = r.queries.get(t);
	if (i) for (const e$1 of i.Sa) e$1.onError(n);
	r.queries.delete(t);
}
function __PRIVATE_raiseSnapshotsInSyncEvent(e) {
	e.Ca.forEach(((e$1) => {
		e$1.next();
	}));
}
var nn, rn;
/** Listen to both cache and server changes */
(rn = nn || (nn = {})).Ma = "default", rn.Cache = "cache";
/**
* QueryListener takes a series of internal view snapshots and determines
* when to raise the event.
*
* It uses an Observer to dispatch events.
*/
var __PRIVATE_QueryListener = class {
	constructor(e, t, n) {
		this.query = e, this.xa = t, this.Oa = !1, this.Na = null, this.onlineState = "Unknown", this.options = n || {};
	}
	/**
	* Applies the new ViewSnapshot to this listener, raising a user-facing event
	* if applicable (depending on what changed, whether the user has opted into
	* metadata-only changes, etc.). Returns true if a user-facing event was
	* indeed raised.
	*/ Fa(e) {
		if (!this.options.includeMetadataChanges) {
			const t$1 = [];
			for (const n of e.docChanges) 3 !== n.type && t$1.push(n);
			e = new ViewSnapshot(e.query, e.docs, e.oldDocs, t$1, e.mutatedKeys, e.fromCache, e.syncStateChanged, !0, e.hasCachedResults);
		}
		let t = !1;
		return this.Oa ? this.Ba(e) && (this.xa.next(e), t = !0) : this.La(e, this.onlineState) && (this.ka(e), t = !0), this.Na = e, t;
	}
	onError(e) {
		this.xa.error(e);
	}
	/** Returns whether a snapshot was raised. */ va(e) {
		this.onlineState = e;
		let t = !1;
		return this.Na && !this.Oa && this.La(this.Na, e) && (this.ka(this.Na), t = !0), t;
	}
	La(e, t) {
		if (!e.fromCache) return !0;
		if (!this.Da()) return !0;
		const n = "Offline" !== t;
		return (!this.options.qa || !n) && (!e.docs.isEmpty() || e.hasCachedResults || "Offline" === t);
	}
	Ba(e) {
		if (e.docChanges.length > 0) return !0;
		const t = this.Na && this.Na.hasPendingWrites !== e.hasPendingWrites;
		return !(!e.syncStateChanged && !t) && !0 === this.options.includeMetadataChanges;
	}
	ka(e) {
		e = ViewSnapshot.fromInitialDocuments(e.query, e.docs, e.mutatedKeys, e.fromCache, e.hasCachedResults), this.Oa = !0, this.xa.next(e);
	}
	Da() {
		return this.options.source !== nn.Cache;
	}
};
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* A complete element in the bundle stream, together with the byte length it
* occupies in the stream.
*/ var __PRIVATE_SizedBundleElement = class {
	constructor(e, t) {
		this.Qa = e, this.byteLength = t;
	}
	$a() {
		return "metadata" in this.Qa;
	}
};
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Helper to convert objects from bundles to model objects in the SDK.
*/ var __PRIVATE_BundleConverterImpl = class {
	constructor(e) {
		this.serializer = e;
	}
	$s(e) {
		return fromName(this.serializer, e);
	}
	/**
	* Converts a BundleDocument to a MutableDocument.
	*/ Us(e) {
		return e.metadata.exists ? __PRIVATE_fromDocument(this.serializer, e.document, !1) : MutableDocument.newNoDocument(this.$s(e.metadata.name), this.Ks(e.metadata.readTime));
	}
	Ks(e) {
		return __PRIVATE_fromVersion(e);
	}
};
/**
* A class to process the elements from a bundle, and optionally load them into local
* storage and provide progress update while loading.
*/ var __PRIVATE_BundleLoader = class {
	constructor(e, t) {
		this.Ua = e, this.serializer = t, this.Ka = [], this.Wa = [], this.collectionGroups = /* @__PURE__ */ new Set(), this.progress = __PRIVATE_bundleInitialProgress(e);
	}
	/**
	* Returns the named queries that have been parsed from the SizeBundleElements added by
	* calling {@link adSizedElement}.
	*/ get queries() {
		return this.Ka;
	}
	/**
	* Returns the BundledDocuments that have been parsed from the SizeBundleElements added by
	* calling {@link addSizedElement}.
	*/ get documents() {
		return this.Wa;
	}
	/**
	* Adds an element from the bundle to the loader.
	*
	* Returns a new progress if adding the element leads to a new progress,
	* otherwise returns null.
	*/ Ga(e) {
		this.progress.bytesLoaded += e.byteLength;
		let t = this.progress.documentsLoaded;
		if (e.Qa.namedQuery) this.Ka.push(e.Qa.namedQuery);
		else if (e.Qa.documentMetadata) {
			this.Wa.push({ metadata: e.Qa.documentMetadata }), e.Qa.documentMetadata.exists || ++t;
			const n = ResourcePath.fromString(e.Qa.documentMetadata.name);
			this.collectionGroups.add(n.get(n.length - 2));
		} else e.Qa.document && (this.Wa[this.Wa.length - 1].document = e.Qa.document, ++t);
		return t !== this.progress.documentsLoaded ? (this.progress.documentsLoaded = t, { ...this.progress }) : null;
	}
	za(e) {
		const t = /* @__PURE__ */ new Map(), n = new __PRIVATE_BundleConverterImpl(this.serializer);
		for (const r of e) if (r.metadata.queries) {
			const e$1 = n.$s(r.metadata.name);
			for (const n$1 of r.metadata.queries) {
				const r$1 = (t.get(n$1) || __PRIVATE_documentKeySet()).add(e$1);
				t.set(n$1, r$1);
			}
		}
		return t;
	}
	/**
	* Update the progress to 'Success' and return the updated progress.
	*/ async ja(e) {
		const t = await __PRIVATE_localStoreApplyBundledDocuments(e, new __PRIVATE_BundleConverterImpl(this.serializer), this.Wa, this.Ua.id), n = this.za(this.documents);
		for (const t$1 of this.Ka) await __PRIVATE_localStoreSaveNamedQuery(e, t$1, n.get(t$1.name));
		return this.progress.taskState = "Success", {
			progress: this.progress,
			Ja: this.collectionGroups,
			Ha: t
		};
	}
};
/**
* Returns a `LoadBundleTaskProgress` representing the initial progress of
* loading a bundle.
*/ function __PRIVATE_bundleInitialProgress(e) {
	return {
		taskState: "Running",
		documentsLoaded: 0,
		bytesLoaded: 0,
		totalDocuments: e.totalDocuments,
		totalBytes: e.totalBytes
	};
}
/**
* Returns a `LoadBundleTaskProgress` representing the progress that the loading
* has succeeded.
*/
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var __PRIVATE_AddedLimboDocument = class {
	constructor(e) {
		this.key = e;
	}
};
var __PRIVATE_RemovedLimboDocument = class {
	constructor(e) {
		this.key = e;
	}
};
/**
* View is responsible for computing the final merged truth of what docs are in
* a query. It gets notified of local and remote changes to docs, and applies
* the query filters and limits to determine the most correct possible results.
*/ var __PRIVATE_View = class {
	constructor(e, t) {
		this.query = e, this.Ya = t, this.Za = null, this.hasCachedResults = !1, this.current = !1, this.Xa = __PRIVATE_documentKeySet(), this.mutatedKeys = __PRIVATE_documentKeySet(), this.eu = __PRIVATE_newQueryComparator(e), this.tu = new DocumentSet(this.eu);
	}
	/**
	* The set of remote documents that the server has told us belongs to the target associated with
	* this view.
	*/ get nu() {
		return this.Ya;
	}
	/**
	* Iterates over a set of doc changes, applies the query limit, and computes
	* what the new results should be, what the changes were, and whether we may
	* need to go back to the local cache for more results. Does not make any
	* changes to the view.
	* @param docChanges - The doc changes to apply to this view.
	* @param previousChanges - If this is being called with a refill, then start
	*        with this set of docs and changes instead of the current view.
	* @returns a new set of docs, changes, and refill flag.
	*/ ru(e, t) {
		const n = t ? t.iu : new __PRIVATE_DocumentChangeSet(), r = t ? t.tu : this.tu;
		let i = t ? t.mutatedKeys : this.mutatedKeys, s = r, o = !1;
		const _ = "F" === this.query.limitType && r.size === this.query.limit ? r.last() : null, a = "L" === this.query.limitType && r.size === this.query.limit ? r.first() : null;
		if (e.inorderTraversal(((e$1, t$1) => {
			const u = r.get(e$1), c = __PRIVATE_queryMatches(this.query, t$1) ? t$1 : null, l = !!u && this.mutatedKeys.has(u.key), h = !!c && (c.hasLocalMutations || this.mutatedKeys.has(c.key) && c.hasCommittedMutations);
			let P = !1;
			if (u && c) u.data.isEqual(c.data) ? l !== h && (n.track({
				type: 3,
				doc: c
			}), P = !0) : this.su(u, c) || (n.track({
				type: 2,
				doc: c
			}), P = !0, (_ && this.eu(c, _) > 0 || a && this.eu(c, a) < 0) && (o = !0));
			else !u && c ? (n.track({
				type: 0,
				doc: c
			}), P = !0) : u && !c && (n.track({
				type: 1,
				doc: u
			}), P = !0, (_ || a) && (o = !0));
			P && (c ? (s = s.add(c), i = h ? i.add(e$1) : i.delete(e$1)) : (s = s.delete(e$1), i = i.delete(e$1)));
		})), null !== this.query.limit) for (; s.size > this.query.limit;) {
			const e$1 = "F" === this.query.limitType ? s.last() : s.first();
			s = s.delete(e$1.key), i = i.delete(e$1.key), n.track({
				type: 1,
				doc: e$1
			});
		}
		return {
			tu: s,
			iu: n,
			Cs: o,
			mutatedKeys: i
		};
	}
	su(e, t) {
		return e.hasLocalMutations && t.hasCommittedMutations && !t.hasLocalMutations;
	}
	/**
	* Updates the view with the given ViewDocumentChanges and optionally updates
	* limbo docs and sync state from the provided target change.
	* @param docChanges - The set of changes to make to the view's docs.
	* @param limboResolutionEnabled - Whether to update limbo documents based on
	*        this change.
	* @param targetChange - A target change to apply for computing limbo docs and
	*        sync state.
	* @param targetIsPendingReset - Whether the target is pending to reset due to
	*        existence filter mismatch. If not explicitly specified, it is treated
	*        equivalently to `false`.
	* @returns A new ViewChange with the given docs, changes, and sync state.
	*/
	applyChanges(e, t, n, r) {
		const i = this.tu;
		this.tu = e.tu, this.mutatedKeys = e.mutatedKeys;
		const s = e.iu.ya();
		s.sort(((e$1, t$1) => function __PRIVATE_compareChangeType(e$2, t$2) {
			const order = (e$3) => {
				switch (e$3) {
					case 0: return 1;
					case 2:
					case 3: return 2;
					case 1: return 0;
					default: return fail(20277, { Rt: e$3 });
				}
			};
			return order(e$2) - order(t$2);
		}(e$1.type, t$1.type) || this.eu(e$1.doc, t$1.doc))), this.ou(n), r = r ?? !1;
		const o = t && !r ? this._u() : [], _ = 0 === this.Xa.size && this.current && !r ? 1 : 0, a = _ !== this.Za;
		if (this.Za = _, 0 !== s.length || a) return {
			snapshot: new ViewSnapshot(this.query, e.tu, i, s, e.mutatedKeys, 0 === _, a, !1, !!n && n.resumeToken.approximateByteSize() > 0),
			au: o
		};
		return { au: o };
	}
	/**
	* Applies an OnlineState change to the view, potentially generating a
	* ViewChange if the view's syncState changes as a result.
	*/ va(e) {
		return this.current && "Offline" === e ? (this.current = !1, this.applyChanges({
			tu: this.tu,
			iu: new __PRIVATE_DocumentChangeSet(),
			mutatedKeys: this.mutatedKeys,
			Cs: !1
		}, !1)) : { au: [] };
	}
	/**
	* Returns whether the doc for the given key should be in limbo.
	*/ uu(e) {
		return !this.Ya.has(e) && !!this.tu.has(e) && !this.tu.get(e).hasLocalMutations;
	}
	/**
	* Updates syncedDocuments, current, and limbo docs based on the given change.
	* Returns the list of changes to which docs are in limbo.
	*/ ou(e) {
		e && (e.addedDocuments.forEach(((e$1) => this.Ya = this.Ya.add(e$1))), e.modifiedDocuments.forEach(((e$1) => {})), e.removedDocuments.forEach(((e$1) => this.Ya = this.Ya.delete(e$1))), this.current = e.current);
	}
	_u() {
		if (!this.current) return [];
		const e = this.Xa;
		this.Xa = __PRIVATE_documentKeySet(), this.tu.forEach(((e$1) => {
			this.uu(e$1.key) && (this.Xa = this.Xa.add(e$1.key));
		}));
		const t = [];
		return e.forEach(((e$1) => {
			this.Xa.has(e$1) || t.push(new __PRIVATE_RemovedLimboDocument(e$1));
		})), this.Xa.forEach(((n) => {
			e.has(n) || t.push(new __PRIVATE_AddedLimboDocument(n));
		})), t;
	}
	/**
	* Update the in-memory state of the current view with the state read from
	* persistence.
	*
	* We update the query view whenever a client's primary status changes:
	* - When a client transitions from primary to secondary, it can miss
	*   LocalStorage updates and its query views may temporarily not be
	*   synchronized with the state on disk.
	* - For secondary to primary transitions, the client needs to update the list
	*   of `syncedDocuments` since secondary clients update their query views
	*   based purely on synthesized RemoteEvents.
	*
	* @param queryResult.documents - The documents that match the query according
	* to the LocalStore.
	* @param queryResult.remoteKeys - The keys of the documents that match the
	* query according to the backend.
	*
	* @returns The ViewChange that resulted from this synchronization.
	*/
	cu(e) {
		this.Ya = e.Qs, this.Xa = __PRIVATE_documentKeySet();
		const t = this.ru(e.documents);
		return this.applyChanges(t, !0);
	}
	/**
	* Returns a view snapshot as if this query was just listened to. Contains
	* a document add for every existing document and the `fromCache` and
	* `hasPendingWrites` status of the already established view.
	*/
	lu() {
		return ViewSnapshot.fromInitialDocuments(this.query, this.tu, this.mutatedKeys, 0 === this.Za, this.hasCachedResults);
	}
};
var sn = "SyncEngine";
/**
* QueryView contains all of the data that SyncEngine needs to keep track of for
* a particular query.
*/ var __PRIVATE_QueryView = class {
	constructor(e, t, n) {
		this.query = e, this.targetId = t, this.view = n;
	}
};
/** Tracks a limbo resolution. */ var LimboResolution = class {
	constructor(e) {
		this.key = e, this.hu = !1;
	}
};
/**
* An implementation of `SyncEngine` coordinating with other parts of SDK.
*
* The parts of SyncEngine that act as a callback to RemoteStore need to be
* registered individually. This is done in `syncEngineWrite()` and
* `syncEngineListen()` (as well as `applyPrimaryState()`) as these methods
* serve as entry points to RemoteStore's functionality.
*
* Note: some field defined in this class might have public access level, but
* the class is not exported so they are only accessible from this module.
* This is useful to implement optional features (like bundles) in free
* functions, such that they are tree-shakeable.
*/ var __PRIVATE_SyncEngineImpl = class {
	constructor(e, t, n, r, i, s) {
		this.localStore = e, this.remoteStore = t, this.eventManager = n, this.sharedClientState = r, this.currentUser = i, this.maxConcurrentLimboResolutions = s, this.Pu = {}, this.Tu = new ObjectMap(((e$1) => __PRIVATE_canonifyQuery(e$1)), __PRIVATE_queryEquals), this.Iu = /* @__PURE__ */ new Map(), this.Eu = /* @__PURE__ */ new Set(), this.du = new SortedMap(DocumentKey.comparator), this.Au = /* @__PURE__ */ new Map(), this.Ru = new __PRIVATE_ReferenceSet(), this.Vu = {}, this.mu = /* @__PURE__ */ new Map(), this.fu = __PRIVATE_TargetIdGenerator.cr(), this.onlineState = "Unknown", this.gu = void 0;
	}
	get isPrimaryClient() {
		return !0 === this.gu;
	}
};
/**
* Initiates the new listen, resolves promise when listen enqueued to the
* server. All the subsequent view snapshots or errors are sent to the
* subscribed handlers. Returns the initial snapshot.
*/
async function __PRIVATE_syncEngineListen(e, t, n = !0) {
	const r = __PRIVATE_ensureWatchCallbacks(e);
	let i;
	const s = r.Tu.get(t);
	return s ? (r.sharedClientState.addLocalQueryTarget(s.targetId), i = s.view.lu()) : i = await __PRIVATE_allocateTargetAndMaybeListen(
		r,
		t,
		n,
		/** shouldInitializeView= */
		!0
	), i;
}
/** Query has been listening to the cache, and tries to initiate the remote store listen */ async function __PRIVATE_triggerRemoteStoreListen(e, t) {
	const n = __PRIVATE_ensureWatchCallbacks(e);
	await __PRIVATE_allocateTargetAndMaybeListen(
		n,
		t,
		/** shouldListenToRemote= */
		!0,
		/** shouldInitializeView= */
		!1
	);
}
async function __PRIVATE_allocateTargetAndMaybeListen(e, t, n, r) {
	const i = await __PRIVATE_localStoreAllocateTarget(e.localStore, __PRIVATE_queryToTarget(t)), s = i.targetId, o = e.sharedClientState.addLocalQueryTarget(s, n);
	let _;
	return r && (_ = await __PRIVATE_initializeViewAndComputeSnapshot(e, t, s, "current" === o, i.resumeToken)), e.isPrimaryClient && n && __PRIVATE_remoteStoreListen(e.remoteStore, i), _;
}
/**
* Registers a view for a previously unknown query and computes its initial
* snapshot.
*/ async function __PRIVATE_initializeViewAndComputeSnapshot(e, t, n, r, i) {
	e.pu = (t$1, n$1, r$1) => async function __PRIVATE_applyDocChanges(e$1, t$2, n$2, r$2) {
		let i$1 = t$2.view.ru(n$2);
		i$1.Cs && (i$1 = await __PRIVATE_localStoreExecuteQuery(e$1.localStore, t$2.query, !1).then((({ documents: e$2 }) => t$2.view.ru(e$2, i$1))));
		const s$1 = r$2 && r$2.targetChanges.get(t$2.targetId), o$1 = r$2 && null != r$2.targetMismatches.get(t$2.targetId), _$1 = t$2.view.applyChanges(i$1, e$1.isPrimaryClient, s$1, o$1);
		return __PRIVATE_updateTrackedLimbos(e$1, t$2.targetId, _$1.au), _$1.snapshot;
	}(e, t$1, n$1, r$1);
	const s = await __PRIVATE_localStoreExecuteQuery(e.localStore, t, !0), o = new __PRIVATE_View(t, s.Qs), _ = o.ru(s.documents), a = TargetChange.createSynthesizedTargetChangeForCurrentChange(n, r && "Offline" !== e.onlineState, i), u = o.applyChanges(_, e.isPrimaryClient, a);
	__PRIVATE_updateTrackedLimbos(e, n, u.au);
	const c = new __PRIVATE_QueryView(t, n, o);
	return e.Tu.set(t, c), e.Iu.has(n) ? e.Iu.get(n).push(t) : e.Iu.set(n, [t]), u.snapshot;
}
/** Stops listening to the query. */ async function __PRIVATE_syncEngineUnlisten(e, t, n) {
	const r = __PRIVATE_debugCast(e), i = r.Tu.get(t), s = r.Iu.get(i.targetId);
	if (s.length > 1) return r.Iu.set(i.targetId, s.filter(((e$1) => !__PRIVATE_queryEquals(e$1, t)))), void r.Tu.delete(t);
	if (r.isPrimaryClient) {
		r.sharedClientState.removeLocalQueryTarget(i.targetId);
		r.sharedClientState.isActiveQueryTarget(i.targetId) || await __PRIVATE_localStoreReleaseTarget(r.localStore, i.targetId, !1).then((() => {
			r.sharedClientState.clearQueryState(i.targetId), n && __PRIVATE_remoteStoreUnlisten(r.remoteStore, i.targetId), __PRIVATE_removeAndCleanupTarget(r, i.targetId);
		})).catch(__PRIVATE_ignoreIfPrimaryLeaseLoss);
	} else __PRIVATE_removeAndCleanupTarget(r, i.targetId), await __PRIVATE_localStoreReleaseTarget(r.localStore, i.targetId, !0);
}
/** Unlistens to the remote store while still listening to the cache. */ async function __PRIVATE_triggerRemoteStoreUnlisten(e, t) {
	const n = __PRIVATE_debugCast(e), r = n.Tu.get(t), i = n.Iu.get(r.targetId);
	n.isPrimaryClient && 1 === i.length && (n.sharedClientState.removeLocalQueryTarget(r.targetId), __PRIVATE_remoteStoreUnlisten(n.remoteStore, r.targetId));
}
/**
* Initiates the write of local mutation batch which involves adding the
* writes to the mutation queue, notifying the remote store about new
* mutations and raising events for any changes this write caused.
*
* The promise returned by this call is resolved when the above steps
* have completed, *not* when the write was acked by the backend. The
* userCallback is resolved once the write was acked/rejected by the
* backend (or failed locally for any other reason).
*/ async function __PRIVATE_syncEngineWrite(e, t, n) {
	const r = __PRIVATE_syncEngineEnsureWriteCallbacks(e);
	try {
		const e$1 = await function __PRIVATE_localStoreWriteLocally(e$2, t$1) {
			const n$1 = __PRIVATE_debugCast(e$2), r$1 = Timestamp.now(), i = t$1.reduce(((e$3, t$2) => e$3.add(t$2.key)), __PRIVATE_documentKeySet());
			let s, o;
			return n$1.persistence.runTransaction("Locally write mutations", "readwrite", ((e$3) => {
				let _ = __PRIVATE_mutableDocumentMap(), a = __PRIVATE_documentKeySet();
				return n$1.Ns.getEntries(e$3, i).next(((e$4) => {
					_ = e$4, _.forEach(((e$5, t$2) => {
						t$2.isValidDocument() || (a = a.add(e$5));
					}));
				})).next((() => n$1.localDocuments.getOverlayedDocuments(e$3, _))).next(((i$1) => {
					s = i$1;
					const o$1 = [];
					for (const e$4 of t$1) {
						const t$2 = __PRIVATE_mutationExtractBaseValue(e$4, s.get(e$4.key).overlayedDocument);
						null != t$2 && o$1.push(new __PRIVATE_PatchMutation(e$4.key, t$2, __PRIVATE_extractFieldMask(t$2.value.mapValue), Precondition.exists(!0)));
					}
					return n$1.mutationQueue.addMutationBatch(e$3, r$1, o$1, t$1);
				})).next(((t$2) => {
					o = t$2;
					const r$2 = t$2.applyToLocalDocumentSet(s, a);
					return n$1.documentOverlayCache.saveOverlays(e$3, t$2.batchId, r$2);
				}));
			})).then((() => ({
				batchId: o.batchId,
				changes: __PRIVATE_convertOverlayedDocumentMapToDocumentMap(s)
			})));
		}(r.localStore, t);
		r.sharedClientState.addPendingMutation(e$1.batchId), function __PRIVATE_addMutationCallback(e$2, t$1, n$1) {
			let r$1 = e$2.Vu[e$2.currentUser.toKey()];
			r$1 || (r$1 = new SortedMap(__PRIVATE_primitiveComparator));
			r$1 = r$1.insert(t$1, n$1), e$2.Vu[e$2.currentUser.toKey()] = r$1;
		}(r, e$1.batchId, n), await __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(r, e$1.changes), await __PRIVATE_fillWritePipeline(r.remoteStore);
	} catch (e$1) {
		const t$1 = __PRIVATE_wrapInUserErrorIfRecoverable(e$1, "Failed to persist write");
		n.reject(t$1);
	}
}
/**
* Applies one remote event to the sync engine, notifying any views of the
* changes, and releasing any pending mutation batches that would become
* visible because of the snapshot version the remote event contains.
*/ async function __PRIVATE_syncEngineApplyRemoteEvent(e, t) {
	const n = __PRIVATE_debugCast(e);
	try {
		const e$1 = await __PRIVATE_localStoreApplyRemoteEventToLocalCache(n.localStore, t);
		t.targetChanges.forEach(((e$2, t$1) => {
			const r = n.Au.get(t$1);
			r && (__PRIVATE_hardAssert(e$2.addedDocuments.size + e$2.modifiedDocuments.size + e$2.removedDocuments.size <= 1, 22616), e$2.addedDocuments.size > 0 ? r.hu = !0 : e$2.modifiedDocuments.size > 0 ? __PRIVATE_hardAssert(r.hu, 14607) : e$2.removedDocuments.size > 0 && (__PRIVATE_hardAssert(r.hu, 42227), r.hu = !1));
		})), await __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(n, e$1, t);
	} catch (e$1) {
		await __PRIVATE_ignoreIfPrimaryLeaseLoss(e$1);
	}
}
/**
* Applies an OnlineState change to the sync engine and notifies any views of
* the change.
*/ function __PRIVATE_syncEngineApplyOnlineStateChange(e, t, n) {
	const r = __PRIVATE_debugCast(e);
	if (r.isPrimaryClient && 0 === n || !r.isPrimaryClient && 1 === n) {
		const e$1 = [];
		r.Tu.forEach(((n$1, r$1) => {
			const i = r$1.view.va(t);
			i.snapshot && e$1.push(i.snapshot);
		})), function __PRIVATE_eventManagerOnOnlineStateChange(e$2, t$1) {
			const n$1 = __PRIVATE_debugCast(e$2);
			n$1.onlineState = t$1;
			let r$1 = !1;
			n$1.queries.forEach(((e$3, n$2) => {
				for (const e$4 of n$2.Sa) e$4.va(t$1) && (r$1 = !0);
			})), r$1 && __PRIVATE_raiseSnapshotsInSyncEvent(n$1);
		}(r.eventManager, t), e$1.length && r.Pu.H_(e$1), r.onlineState = t, r.isPrimaryClient && r.sharedClientState.setOnlineState(t);
	}
}
/**
* Rejects the listen for the given targetID. This can be triggered by the
* backend for any active target.
*
* @param syncEngine - The sync engine implementation.
* @param targetId - The targetID corresponds to one previously initiated by the
* user as part of TargetData passed to listen() on RemoteStore.
* @param err - A description of the condition that has forced the rejection.
* Nearly always this will be an indication that the user is no longer
* authorized to see the data matching the target.
*/ async function __PRIVATE_syncEngineRejectListen(e, t, n) {
	const r = __PRIVATE_debugCast(e);
	r.sharedClientState.updateQueryState(t, "rejected", n);
	const i = r.Au.get(t), s = i && i.key;
	if (s) {
		let e$1 = new SortedMap(DocumentKey.comparator);
		e$1 = e$1.insert(s, MutableDocument.newNoDocument(s, SnapshotVersion.min()));
		const n$1 = __PRIVATE_documentKeySet().add(s), i$1 = new RemoteEvent(SnapshotVersion.min(), /* @__PURE__ */ new Map(), new SortedMap(__PRIVATE_primitiveComparator), e$1, n$1);
		await __PRIVATE_syncEngineApplyRemoteEvent(r, i$1), r.du = r.du.remove(s), r.Au.delete(t), __PRIVATE_pumpEnqueuedLimboResolutions(r);
	} else await __PRIVATE_localStoreReleaseTarget(r.localStore, t, !1).then((() => __PRIVATE_removeAndCleanupTarget(r, t, n))).catch(__PRIVATE_ignoreIfPrimaryLeaseLoss);
}
async function __PRIVATE_syncEngineApplySuccessfulWrite(e, t) {
	const n = __PRIVATE_debugCast(e), r = t.batch.batchId;
	try {
		const e$1 = await __PRIVATE_localStoreAcknowledgeBatch(n.localStore, t);
		__PRIVATE_processUserCallback(n, r, null), __PRIVATE_triggerPendingWritesCallbacks(n, r), n.sharedClientState.updateMutationState(r, "acknowledged"), await __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(n, e$1);
	} catch (e$1) {
		await __PRIVATE_ignoreIfPrimaryLeaseLoss(e$1);
	}
}
async function __PRIVATE_syncEngineRejectFailedWrite(e, t, n) {
	const r = __PRIVATE_debugCast(e);
	try {
		const e$1 = await function __PRIVATE_localStoreRejectBatch(e$2, t$1) {
			const n$1 = __PRIVATE_debugCast(e$2);
			return n$1.persistence.runTransaction("Reject batch", "readwrite-primary", ((e$3) => {
				let r$1;
				return n$1.mutationQueue.lookupMutationBatch(e$3, t$1).next(((t$2) => (__PRIVATE_hardAssert(null !== t$2, 37113), r$1 = t$2.keys(), n$1.mutationQueue.removeMutationBatch(e$3, t$2)))).next((() => n$1.mutationQueue.performConsistencyCheck(e$3))).next((() => n$1.documentOverlayCache.removeOverlaysForBatchId(e$3, r$1, t$1))).next((() => n$1.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(e$3, r$1))).next((() => n$1.localDocuments.getDocuments(e$3, r$1)));
			}));
		}(r.localStore, t);
		__PRIVATE_processUserCallback(r, t, n), __PRIVATE_triggerPendingWritesCallbacks(r, t), r.sharedClientState.updateMutationState(t, "rejected", n), await __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(r, e$1);
	} catch (n$1) {
		await __PRIVATE_ignoreIfPrimaryLeaseLoss(n$1);
	}
}
/**
* Registers a user callback that resolves when all pending mutations at the moment of calling
* are acknowledged .
*/ async function __PRIVATE_syncEngineRegisterPendingWritesCallback(e, t) {
	const n = __PRIVATE_debugCast(e);
	__PRIVATE_canUseNetwork(n.remoteStore) || __PRIVATE_logDebug(sn, "The network is disabled. The task returned by 'awaitPendingWrites()' will not complete until the network is enabled.");
	try {
		const e$1 = await function __PRIVATE_localStoreGetHighestUnacknowledgedBatchId(e$2) {
			const t$1 = __PRIVATE_debugCast(e$2);
			return t$1.persistence.runTransaction("Get highest unacknowledged batch id", "readonly", ((e$3) => t$1.mutationQueue.getHighestUnacknowledgedBatchId(e$3)));
		}(n.localStore);
		if (e$1 === j) return void t.resolve();
		const r = n.mu.get(e$1) || [];
		r.push(t), n.mu.set(e$1, r);
	} catch (e$1) {
		const n$1 = __PRIVATE_wrapInUserErrorIfRecoverable(e$1, "Initialization of waitForPendingWrites() operation failed");
		t.reject(n$1);
	}
}
/**
* Triggers the callbacks that are waiting for this batch id to get acknowledged by server,
* if there are any.
*/ function __PRIVATE_triggerPendingWritesCallbacks(e, t) {
	(e.mu.get(t) || []).forEach(((e$1) => {
		e$1.resolve();
	})), e.mu.delete(t);
}
/** Reject all outstanding callbacks waiting for pending writes to complete. */ function __PRIVATE_processUserCallback(e, t, n) {
	const r = __PRIVATE_debugCast(e);
	let i = r.Vu[r.currentUser.toKey()];
	if (i) {
		const e$1 = i.get(t);
		e$1 && (n ? e$1.reject(n) : e$1.resolve(), i = i.remove(t)), r.Vu[r.currentUser.toKey()] = i;
	}
}
function __PRIVATE_removeAndCleanupTarget(e, t, n = null) {
	e.sharedClientState.removeLocalQueryTarget(t);
	for (const r of e.Iu.get(t)) e.Tu.delete(r), n && e.Pu.yu(r, n);
	if (e.Iu.delete(t), e.isPrimaryClient) e.Ru.jr(t).forEach(((t$1) => {
		e.Ru.containsKey(t$1) || __PRIVATE_removeLimboTarget(e, t$1);
	}));
}
function __PRIVATE_removeLimboTarget(e, t) {
	e.Eu.delete(t.path.canonicalString());
	const n = e.du.get(t);
	null !== n && (__PRIVATE_remoteStoreUnlisten(e.remoteStore, n), e.du = e.du.remove(t), e.Au.delete(n), __PRIVATE_pumpEnqueuedLimboResolutions(e));
}
function __PRIVATE_updateTrackedLimbos(e, t, n) {
	for (const r of n) if (r instanceof __PRIVATE_AddedLimboDocument) e.Ru.addReference(r.key, t), __PRIVATE_trackLimboChange(e, r);
	else if (r instanceof __PRIVATE_RemovedLimboDocument) {
		__PRIVATE_logDebug(sn, "Document no longer in limbo: " + r.key), e.Ru.removeReference(r.key, t);
		e.Ru.containsKey(r.key) || __PRIVATE_removeLimboTarget(e, r.key);
	} else fail(19791, { wu: r });
}
function __PRIVATE_trackLimboChange(e, t) {
	const n = t.key, r = n.path.canonicalString();
	e.du.get(n) || e.Eu.has(r) || (__PRIVATE_logDebug(sn, "New document in limbo: " + n), e.Eu.add(r), __PRIVATE_pumpEnqueuedLimboResolutions(e));
}
/**
* Starts listens for documents in limbo that are enqueued for resolution,
* subject to a maximum number of concurrent resolutions.
*
* Without bounding the number of concurrent resolutions, the server can fail
* with "resource exhausted" errors which can lead to pathological client
* behavior as seen in https://github.com/firebase/firebase-js-sdk/issues/2683.
*/ function __PRIVATE_pumpEnqueuedLimboResolutions(e) {
	for (; e.Eu.size > 0 && e.du.size < e.maxConcurrentLimboResolutions;) {
		const t = e.Eu.values().next().value;
		e.Eu.delete(t);
		const n = new DocumentKey(ResourcePath.fromString(t)), r = e.fu.next();
		e.Au.set(r, new LimboResolution(n)), e.du = e.du.insert(n, r), __PRIVATE_remoteStoreListen(e.remoteStore, new TargetData(__PRIVATE_queryToTarget(__PRIVATE_newQueryForPath(n.path)), r, "TargetPurposeLimboResolution", __PRIVATE_ListenSequence.ce));
	}
}
async function __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(e, t, n) {
	const r = __PRIVATE_debugCast(e), i = [], s = [], o = [];
	r.Tu.isEmpty() || (r.Tu.forEach(((e$1, _) => {
		o.push(r.pu(_, t, n).then(((e$2) => {
			if ((e$2 || n) && r.isPrimaryClient) {
				const t$1 = e$2 ? !e$2.fromCache : n?.targetChanges.get(_.targetId)?.current;
				r.sharedClientState.updateQueryState(_.targetId, t$1 ? "current" : "not-current");
			}
			if (e$2) {
				i.push(e$2);
				const t$1 = __PRIVATE_LocalViewChanges.As(_.targetId, e$2);
				s.push(t$1);
			}
		})));
	})), await Promise.all(o), r.Pu.H_(i), await async function __PRIVATE_localStoreNotifyLocalViewChanges(e$1, t$1) {
		const n$1 = __PRIVATE_debugCast(e$1);
		try {
			await n$1.persistence.runTransaction("notifyLocalViewChanges", "readwrite", ((e$2) => PersistencePromise.forEach(t$1, ((t$2) => PersistencePromise.forEach(t$2.Es, ((r$1) => n$1.persistence.referenceDelegate.addReference(e$2, t$2.targetId, r$1))).next((() => PersistencePromise.forEach(t$2.ds, ((r$1) => n$1.persistence.referenceDelegate.removeReference(e$2, t$2.targetId, r$1)))))))));
		} catch (e$2) {
			if (!__PRIVATE_isIndexedDbTransactionError(e$2)) throw e$2;
			__PRIVATE_logDebug(Ut, "Failed to update sequence numbers: " + e$2);
		}
		for (const e$2 of t$1) {
			const t$2 = e$2.targetId;
			if (!e$2.fromCache) {
				const e$3 = n$1.Ms.get(t$2), r$1 = e$3.snapshotVersion, i$1 = e$3.withLastLimboFreeSnapshotVersion(r$1);
				n$1.Ms = n$1.Ms.insert(t$2, i$1);
			}
		}
	}(r.localStore, s));
}
async function __PRIVATE_syncEngineHandleCredentialChange(e, t) {
	const n = __PRIVATE_debugCast(e);
	if (!n.currentUser.isEqual(t)) {
		__PRIVATE_logDebug(sn, "User change. New user:", t.toKey());
		const e$1 = await __PRIVATE_localStoreHandleUserChange(n.localStore, t);
		n.currentUser = t, function __PRIVATE_rejectOutstandingPendingWritesCallbacks(e$2, t$1) {
			e$2.mu.forEach(((e$3) => {
				e$3.forEach(((e$4) => {
					e$4.reject(new FirestoreError(N.CANCELLED, t$1));
				}));
			})), e$2.mu.clear();
		}(n, "'waitForPendingWrites' promise is rejected due to a user change."), n.sharedClientState.handleUserChange(t, e$1.removedBatchIds, e$1.addedBatchIds), await __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(n, e$1.Ls);
	}
}
function __PRIVATE_syncEngineGetRemoteKeysForTarget(e, t) {
	const n = __PRIVATE_debugCast(e), r = n.Au.get(t);
	if (r && r.hu) return __PRIVATE_documentKeySet().add(r.key);
	{
		let e$1 = __PRIVATE_documentKeySet();
		const r$1 = n.Iu.get(t);
		if (!r$1) return e$1;
		for (const t$1 of r$1) {
			const r$2 = n.Tu.get(t$1);
			e$1 = e$1.unionWith(r$2.view.nu);
		}
		return e$1;
	}
}
/**
* Reconcile the list of synced documents in an existing view with those
* from persistence.
*/ async function __PRIVATE_synchronizeViewAndComputeSnapshot(e, t) {
	const n = __PRIVATE_debugCast(e), r = await __PRIVATE_localStoreExecuteQuery(n.localStore, t.query, !0), i = t.view.cu(r);
	return n.isPrimaryClient && __PRIVATE_updateTrackedLimbos(n, t.targetId, i.au), i;
}
/**
* Retrieves newly changed documents from remote document cache and raises
* snapshots if needed.
*/
async function __PRIVATE_syncEngineSynchronizeWithChangedDocuments(e, t) {
	const n = __PRIVATE_debugCast(e);
	return __PRIVATE_localStoreGetNewDocumentChanges(n.localStore, t).then(((e$1) => __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(n, e$1)));
}
/** Applies a mutation state to an existing batch.  */
async function __PRIVATE_syncEngineApplyBatchState(e, t, n, r) {
	const i = __PRIVATE_debugCast(e), s = await function __PRIVATE_localStoreLookupMutationDocuments(e$1, t$1) {
		const n$1 = __PRIVATE_debugCast(e$1), r$1 = __PRIVATE_debugCast(n$1.mutationQueue);
		return n$1.persistence.runTransaction("Lookup mutation documents", "readonly", ((e$2) => r$1.er(e$2, t$1).next(((t$2) => t$2 ? n$1.localDocuments.getDocuments(e$2, t$2) : PersistencePromise.resolve(null)))));
	}(i.localStore, t);
	null !== s ? ("pending" === n ? await __PRIVATE_fillWritePipeline(i.remoteStore) : "acknowledged" === n || "rejected" === n ? (__PRIVATE_processUserCallback(i, t, r || null), __PRIVATE_triggerPendingWritesCallbacks(i, t), function __PRIVATE_localStoreRemoveCachedMutationBatchMetadata(e$1, t$1) {
		__PRIVATE_debugCast(__PRIVATE_debugCast(e$1).mutationQueue).ir(t$1);
	}(i.localStore, t)) : fail(6720, "Unknown batchState", { Su: n }), await __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(i, s)) : __PRIVATE_logDebug(sn, "Cannot apply mutation batch with id: " + t);
}
/** Applies a query target change from a different tab. */
async function __PRIVATE_syncEngineApplyPrimaryState(e, t) {
	const n = __PRIVATE_debugCast(e);
	if (__PRIVATE_ensureWatchCallbacks(n), __PRIVATE_syncEngineEnsureWriteCallbacks(n), !0 === t && !0 !== n.gu) {
		const e$1 = n.sharedClientState.getAllActiveQueryTargets(), t$1 = await __PRIVATE_synchronizeQueryViewsAndRaiseSnapshots(n, e$1.toArray());
		n.gu = !0, await __PRIVATE_remoteStoreApplyPrimaryState(n.remoteStore, !0);
		for (const e$2 of t$1) __PRIVATE_remoteStoreListen(n.remoteStore, e$2);
	} else if (!1 === t && !1 !== n.gu) {
		const e$1 = [];
		let t$1 = Promise.resolve();
		n.Iu.forEach(((r, i) => {
			n.sharedClientState.isLocalQueryTarget(i) ? e$1.push(i) : t$1 = t$1.then((() => (__PRIVATE_removeAndCleanupTarget(n, i), __PRIVATE_localStoreReleaseTarget(n.localStore, i, !0)))), __PRIVATE_remoteStoreUnlisten(n.remoteStore, i);
		})), await t$1, await __PRIVATE_synchronizeQueryViewsAndRaiseSnapshots(n, e$1), function __PRIVATE_resetLimboDocuments(e$2) {
			const t$2 = __PRIVATE_debugCast(e$2);
			t$2.Au.forEach(((e$3, n$1) => {
				__PRIVATE_remoteStoreUnlisten(t$2.remoteStore, n$1);
			})), t$2.Ru.Jr(), t$2.Au = /* @__PURE__ */ new Map(), t$2.du = new SortedMap(DocumentKey.comparator);
		}(n), n.gu = !1, await __PRIVATE_remoteStoreApplyPrimaryState(n.remoteStore, !1);
	}
}
async function __PRIVATE_synchronizeQueryViewsAndRaiseSnapshots(e, t, n) {
	const r = __PRIVATE_debugCast(e), i = [], s = [];
	for (const e$1 of t) {
		let t$1;
		const n$1 = r.Iu.get(e$1);
		if (n$1 && 0 !== n$1.length) {
			t$1 = await __PRIVATE_localStoreAllocateTarget(r.localStore, __PRIVATE_queryToTarget(n$1[0]));
			for (const e$2 of n$1) {
				const t$2 = r.Tu.get(e$2), n$2 = await __PRIVATE_synchronizeViewAndComputeSnapshot(r, t$2);
				n$2.snapshot && s.push(n$2.snapshot);
			}
		} else {
			const n$2 = await __PRIVATE_localStoreGetCachedTarget(r.localStore, e$1);
			t$1 = await __PRIVATE_localStoreAllocateTarget(r.localStore, n$2), await __PRIVATE_initializeViewAndComputeSnapshot(r, __PRIVATE_synthesizeTargetToQuery(n$2), e$1, !1, t$1.resumeToken);
		}
		i.push(t$1);
	}
	return r.Pu.H_(s), i;
}
/**
* Creates a `Query` object from the specified `Target`. There is no way to
* obtain the original `Query`, so we synthesize a `Query` from the `Target`
* object.
*
* The synthesized result might be different from the original `Query`, but
* since the synthesized `Query` should return the same results as the
* original one (only the presentation of results might differ), the potential
* difference will not cause issues.
*/
function __PRIVATE_synthesizeTargetToQuery(e) {
	return __PRIVATE_newQuery(e.path, e.collectionGroup, e.orderBy, e.filters, e.limit, "F", e.startAt, e.endAt);
}
/** Returns the IDs of the clients that are currently active. */
function __PRIVATE_syncEngineGetActiveClients(e) {
	return function __PRIVATE_localStoreGetActiveClients(e$1) {
		return __PRIVATE_debugCast(__PRIVATE_debugCast(e$1).persistence).Ts();
	}(__PRIVATE_debugCast(e).localStore);
}
/** Applies a query target change from a different tab. */
async function __PRIVATE_syncEngineApplyTargetState(e, t, n, r) {
	const i = __PRIVATE_debugCast(e);
	if (i.gu) return void __PRIVATE_logDebug(sn, "Ignoring unexpected query state notification.");
	const s = i.Iu.get(t);
	if (s && s.length > 0) switch (n) {
		case "current":
		case "not-current": {
			const e$1 = await __PRIVATE_localStoreGetNewDocumentChanges(i.localStore, __PRIVATE_queryCollectionGroup(s[0])), r$1 = RemoteEvent.createSynthesizedRemoteEventForCurrentChange(t, "current" === n, ByteString.EMPTY_BYTE_STRING);
			await __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(i, e$1, r$1);
			break;
		}
		case "rejected":
			await __PRIVATE_localStoreReleaseTarget(i.localStore, t, !0), __PRIVATE_removeAndCleanupTarget(i, t, r);
			break;
		default: fail(64155, n);
	}
}
/** Adds or removes Watch targets for queries from different tabs. */ async function __PRIVATE_syncEngineApplyActiveTargetsChange(e, t, n) {
	const r = __PRIVATE_ensureWatchCallbacks(e);
	if (r.gu) {
		for (const e$1 of t) {
			if (r.Iu.has(e$1) && r.sharedClientState.isActiveQueryTarget(e$1)) {
				__PRIVATE_logDebug(sn, "Adding an already active target " + e$1);
				continue;
			}
			const t$1 = await __PRIVATE_localStoreGetCachedTarget(r.localStore, e$1), n$1 = await __PRIVATE_localStoreAllocateTarget(r.localStore, t$1);
			await __PRIVATE_initializeViewAndComputeSnapshot(r, __PRIVATE_synthesizeTargetToQuery(t$1), n$1.targetId, !1, n$1.resumeToken), __PRIVATE_remoteStoreListen(r.remoteStore, n$1);
		}
		for (const e$1 of n) r.Iu.has(e$1) && await __PRIVATE_localStoreReleaseTarget(r.localStore, e$1, !1).then((() => {
			__PRIVATE_remoteStoreUnlisten(r.remoteStore, e$1), __PRIVATE_removeAndCleanupTarget(r, e$1);
		})).catch(__PRIVATE_ignoreIfPrimaryLeaseLoss);
	}
}
function __PRIVATE_ensureWatchCallbacks(e) {
	const t = __PRIVATE_debugCast(e);
	return t.remoteStore.remoteSyncer.applyRemoteEvent = __PRIVATE_syncEngineApplyRemoteEvent.bind(null, t), t.remoteStore.remoteSyncer.getRemoteKeysForTarget = __PRIVATE_syncEngineGetRemoteKeysForTarget.bind(null, t), t.remoteStore.remoteSyncer.rejectListen = __PRIVATE_syncEngineRejectListen.bind(null, t), t.Pu.H_ = __PRIVATE_eventManagerOnWatchChange.bind(null, t.eventManager), t.Pu.yu = __PRIVATE_eventManagerOnWatchError.bind(null, t.eventManager), t;
}
function __PRIVATE_syncEngineEnsureWriteCallbacks(e) {
	const t = __PRIVATE_debugCast(e);
	return t.remoteStore.remoteSyncer.applySuccessfulWrite = __PRIVATE_syncEngineApplySuccessfulWrite.bind(null, t), t.remoteStore.remoteSyncer.rejectFailedWrite = __PRIVATE_syncEngineRejectFailedWrite.bind(null, t), t;
}
/**
* Loads a Firestore bundle into the SDK. The returned promise resolves when
* the bundle finished loading.
*
* @param syncEngine - SyncEngine to use.
* @param bundleReader - Bundle to load into the SDK.
* @param task - LoadBundleTask used to update the loading progress to public API.
*/ function __PRIVATE_syncEngineLoadBundle(e, t, n) {
	const r = __PRIVATE_debugCast(e);
	(async function __PRIVATE_loadBundleImpl(e$1, t$1, n$1) {
		try {
			const r$1 = await t$1.getMetadata();
			if (await function __PRIVATE_localStoreHasNewerBundle(e$2, t$2) {
				const n$2 = __PRIVATE_debugCast(e$2), r$2 = __PRIVATE_fromVersion(t$2.createTime);
				return n$2.persistence.runTransaction("hasNewerBundle", "readonly", ((e$3) => n$2.Ii.getBundleMetadata(e$3, t$2.id))).then(((e$3) => !!e$3 && e$3.createTime.compareTo(r$2) >= 0));
			}(e$1.localStore, r$1)) return await t$1.close(), n$1._completeWith(function __PRIVATE_bundleSuccessProgress(e$2) {
				return {
					taskState: "Success",
					documentsLoaded: e$2.totalDocuments,
					bytesLoaded: e$2.totalBytes,
					totalDocuments: e$2.totalDocuments,
					totalBytes: e$2.totalBytes
				};
			}(r$1)), Promise.resolve(/* @__PURE__ */ new Set());
			n$1._updateProgress(__PRIVATE_bundleInitialProgress(r$1));
			const i = new __PRIVATE_BundleLoader(r$1, t$1.serializer);
			let s = await t$1.bu();
			for (; s;) {
				const e$2 = await i.Ga(s);
				e$2 && n$1._updateProgress(e$2), s = await t$1.bu();
			}
			const o = await i.ja(e$1.localStore);
			return await __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(e$1, o.Ha, void 0), await function __PRIVATE_localStoreSaveBundle(e$2, t$2) {
				const n$2 = __PRIVATE_debugCast(e$2);
				return n$2.persistence.runTransaction("Save bundle", "readwrite", ((e$3) => n$2.Ii.saveBundleMetadata(e$3, t$2)));
			}(e$1.localStore, r$1), n$1._completeWith(o.progress), Promise.resolve(o.Ja);
		} catch (e$2) {
			return __PRIVATE_logWarn(sn, `Loading bundle failed with ${e$2}`), n$1._failWith(e$2), Promise.resolve(/* @__PURE__ */ new Set());
		}
	})(r, t, n).then(((e$1) => {
		r.sharedClientState.notifyBundleLoaded(e$1);
	}));
}
var __PRIVATE_MemoryOfflineComponentProvider = class {
	constructor() {
		this.kind = "memory", this.synchronizeTabs = !1;
	}
	async initialize(e) {
		this.serializer = __PRIVATE_newSerializer(e.databaseInfo.databaseId), this.sharedClientState = this.Du(e), this.persistence = this.Cu(e), await this.persistence.start(), this.localStore = this.vu(e), this.gcScheduler = this.Fu(e, this.localStore), this.indexBackfillerScheduler = this.Mu(e, this.localStore);
	}
	Fu(e, t) {
		return null;
	}
	Mu(e, t) {
		return null;
	}
	vu(e) {
		return __PRIVATE_newLocalStore(this.persistence, new __PRIVATE_QueryEngine(), e.initialUser, this.serializer);
	}
	Cu(e) {
		return new __PRIVATE_MemoryPersistence(__PRIVATE_MemoryEagerDelegate.mi, this.serializer);
	}
	Du(e) {
		return new __PRIVATE_MemorySharedClientState();
	}
	async terminate() {
		this.gcScheduler?.stop(), this.indexBackfillerScheduler?.stop(), this.sharedClientState.shutdown(), await this.persistence.shutdown();
	}
};
__PRIVATE_MemoryOfflineComponentProvider.provider = { build: () => new __PRIVATE_MemoryOfflineComponentProvider() };
var __PRIVATE_LruGcMemoryOfflineComponentProvider = class extends __PRIVATE_MemoryOfflineComponentProvider {
	constructor(e) {
		super(), this.cacheSizeBytes = e;
	}
	Fu(e, t) {
		__PRIVATE_hardAssert(this.persistence.referenceDelegate instanceof __PRIVATE_MemoryLruDelegate, 46915);
		const n = this.persistence.referenceDelegate.garbageCollector;
		return new __PRIVATE_LruScheduler(n, e.asyncQueue, t);
	}
	Cu(e) {
		const t = void 0 !== this.cacheSizeBytes ? LruParams.withCacheSize(this.cacheSizeBytes) : LruParams.DEFAULT;
		return new __PRIVATE_MemoryPersistence(((e$1) => __PRIVATE_MemoryLruDelegate.mi(e$1, t)), this.serializer);
	}
};
/**
* Provides all components needed for Firestore with IndexedDB persistence.
*/ var __PRIVATE_IndexedDbOfflineComponentProvider = class extends __PRIVATE_MemoryOfflineComponentProvider {
	constructor(e, t, n) {
		super(), this.xu = e, this.cacheSizeBytes = t, this.forceOwnership = n, this.kind = "persistent", this.synchronizeTabs = !1;
	}
	async initialize(e) {
		await super.initialize(e), await this.xu.initialize(this, e), await __PRIVATE_syncEngineEnsureWriteCallbacks(this.xu.syncEngine), await __PRIVATE_fillWritePipeline(this.xu.remoteStore), await this.persistence.Ji((() => (this.gcScheduler && !this.gcScheduler.started && this.gcScheduler.start(), this.indexBackfillerScheduler && !this.indexBackfillerScheduler.started && this.indexBackfillerScheduler.start(), Promise.resolve())));
	}
	vu(e) {
		return __PRIVATE_newLocalStore(this.persistence, new __PRIVATE_QueryEngine(), e.initialUser, this.serializer);
	}
	Fu(e, t) {
		const n = this.persistence.referenceDelegate.garbageCollector;
		return new __PRIVATE_LruScheduler(n, e.asyncQueue, t);
	}
	Mu(e, t) {
		const n = new __PRIVATE_IndexBackfiller(t, this.persistence);
		return new __PRIVATE_IndexBackfillerScheduler(e.asyncQueue, n);
	}
	Cu(e) {
		const t = __PRIVATE_indexedDbStoragePrefix(e.databaseInfo.databaseId, e.databaseInfo.persistenceKey), n = void 0 !== this.cacheSizeBytes ? LruParams.withCacheSize(this.cacheSizeBytes) : LruParams.DEFAULT;
		return new __PRIVATE_IndexedDbPersistence(this.synchronizeTabs, t, e.clientId, n, e.asyncQueue, __PRIVATE_getWindow(), getDocument(), this.serializer, this.sharedClientState, !!this.forceOwnership);
	}
	Du(e) {
		return new __PRIVATE_MemorySharedClientState();
	}
};
/**
* Provides all components needed for Firestore with multi-tab IndexedDB
* persistence.
*
* In the legacy client, this provider is used to provide both multi-tab and
* non-multi-tab persistence since we cannot tell at build time whether
* `synchronizeTabs` will be enabled.
*/ var __PRIVATE_MultiTabOfflineComponentProvider = class extends __PRIVATE_IndexedDbOfflineComponentProvider {
	constructor(e, t) {
		super(e, t, !1), this.xu = e, this.cacheSizeBytes = t, this.synchronizeTabs = !0;
	}
	async initialize(e) {
		await super.initialize(e);
		const t = this.xu.syncEngine;
		this.sharedClientState instanceof __PRIVATE_WebStorageSharedClientState && (this.sharedClientState.syncEngine = {
			Co: __PRIVATE_syncEngineApplyBatchState.bind(null, t),
			vo: __PRIVATE_syncEngineApplyTargetState.bind(null, t),
			Fo: __PRIVATE_syncEngineApplyActiveTargetsChange.bind(null, t),
			Ts: __PRIVATE_syncEngineGetActiveClients.bind(null, t),
			Do: __PRIVATE_syncEngineSynchronizeWithChangedDocuments.bind(null, t)
		}, await this.sharedClientState.start()), await this.persistence.Ji((async (e$1) => {
			await __PRIVATE_syncEngineApplyPrimaryState(this.xu.syncEngine, e$1), this.gcScheduler && (e$1 && !this.gcScheduler.started ? this.gcScheduler.start() : e$1 || this.gcScheduler.stop()), this.indexBackfillerScheduler && (e$1 && !this.indexBackfillerScheduler.started ? this.indexBackfillerScheduler.start() : e$1 || this.indexBackfillerScheduler.stop());
		}));
	}
	Du(e) {
		const t = __PRIVATE_getWindow();
		if (!__PRIVATE_WebStorageSharedClientState.v(t)) throw new FirestoreError(N.UNIMPLEMENTED, "IndexedDB persistence is only available on platforms that support LocalStorage.");
		const n = __PRIVATE_indexedDbStoragePrefix(e.databaseInfo.databaseId, e.databaseInfo.persistenceKey);
		return new __PRIVATE_WebStorageSharedClientState(t, e.asyncQueue, n, e.clientId, e.initialUser);
	}
};
/**
* Initializes and wires the components that are needed to interface with the
* network.
*/ var OnlineComponentProvider = class {
	async initialize(e, t) {
		this.localStore || (this.localStore = e.localStore, this.sharedClientState = e.sharedClientState, this.datastore = this.createDatastore(t), this.remoteStore = this.createRemoteStore(t), this.eventManager = this.createEventManager(t), this.syncEngine = this.createSyncEngine(t, !e.synchronizeTabs), this.sharedClientState.onlineStateHandler = (e$1) => __PRIVATE_syncEngineApplyOnlineStateChange(this.syncEngine, e$1, 1), this.remoteStore.remoteSyncer.handleCredentialChange = __PRIVATE_syncEngineHandleCredentialChange.bind(null, this.syncEngine), await __PRIVATE_remoteStoreApplyPrimaryState(this.remoteStore, this.syncEngine.isPrimaryClient));
	}
	createEventManager(e) {
		return function __PRIVATE_newEventManager() {
			return new __PRIVATE_EventManagerImpl();
		}();
	}
	createDatastore(e) {
		const t = __PRIVATE_newSerializer(e.databaseInfo.databaseId), n = function __PRIVATE_newConnection(e$1) {
			return new __PRIVATE_WebChannelConnection(e$1);
		}(e.databaseInfo);
		return function __PRIVATE_newDatastore(e$1, t$1, n$1, r) {
			return new __PRIVATE_DatastoreImpl(e$1, t$1, n$1, r);
		}(e.authCredentials, e.appCheckCredentials, n, t);
	}
	createRemoteStore(e) {
		return function __PRIVATE_newRemoteStore(e$1, t, n, r, i) {
			return new __PRIVATE_RemoteStoreImpl(e$1, t, n, r, i);
		}(this.localStore, this.datastore, e.asyncQueue, ((e$1) => __PRIVATE_syncEngineApplyOnlineStateChange(this.syncEngine, e$1, 0)), function __PRIVATE_newConnectivityMonitor() {
			return __PRIVATE_BrowserConnectivityMonitor.v() ? new __PRIVATE_BrowserConnectivityMonitor() : new __PRIVATE_NoopConnectivityMonitor();
		}());
	}
	createSyncEngine(e, t) {
		return function __PRIVATE_newSyncEngine(e$1, t$1, n, r, i, s, o) {
			const _ = new __PRIVATE_SyncEngineImpl(e$1, t$1, n, r, i, s);
			return o && (_.gu = !0), _;
		}(this.localStore, this.remoteStore, this.eventManager, this.sharedClientState, e.initialUser, e.maxConcurrentLimboResolutions, t);
	}
	async terminate() {
		await async function __PRIVATE_remoteStoreShutdown(e) {
			const t = __PRIVATE_debugCast(e);
			__PRIVATE_logDebug(tn, "RemoteStore shutting down."), t.Ea.add(5), await __PRIVATE_disableNetworkInternal(t), t.Aa.shutdown(), t.Ra.set("Unknown");
		}(this.remoteStore), this.datastore?.terminate(), this.eventManager?.terminate();
	}
};
OnlineComponentProvider.provider = { build: () => new OnlineComponentProvider() };
/**
* Builds a `ByteStreamReader` from a UInt8Array.
* @param source - The data source to use.
* @param bytesPerRead - How many bytes each `read()` from the returned reader
*        will read.
*/
function __PRIVATE_toByteStreamReaderHelper(e, t = 10240) {
	let n = 0;
	return {
		async read() {
			if (n < e.byteLength) {
				const r = {
					value: e.slice(n, n + t),
					done: !1
				};
				return n += t, r;
			}
			return { done: !0 };
		},
		async cancel() {},
		releaseLock() {},
		closed: Promise.resolve()
	};
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* On web, a `ReadableStream` is wrapped around by a `ByteStreamReader`.
*/
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var __PRIVATE_AsyncObserver = class {
	constructor(e) {
		this.observer = e, this.muted = !1;
	}
	next(e) {
		this.muted || this.observer.next && this.Ou(this.observer.next, e);
	}
	error(e) {
		this.muted || (this.observer.error ? this.Ou(this.observer.error, e) : __PRIVATE_logError("Uncaught Error in snapshot listener:", e.toString()));
	}
	Nu() {
		this.muted = !0;
	}
	Ou(e, t) {
		setTimeout((() => {
			this.muted || e(t);
		}), 0);
	}
};
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* A class representing a bundle.
*
* Takes a bundle stream or buffer, and presents abstractions to read bundled
* elements out of the underlying content.
*/ var __PRIVATE_BundleReaderImpl = class {
	constructor(e, t) {
		this.Bu = e, this.serializer = t, this.metadata = new __PRIVATE_Deferred(), this.buffer = new Uint8Array(), this.Lu = function __PRIVATE_newTextDecoder() {
			return new TextDecoder("utf-8");
		}(), this.ku().then(((e$1) => {
			e$1 && e$1.$a() ? this.metadata.resolve(e$1.Qa.metadata) : this.metadata.reject(/* @__PURE__ */ new Error(`The first element of the bundle is not a metadata, it is\n             ${JSON.stringify(e$1?.Qa)}`));
		}), ((e$1) => this.metadata.reject(e$1)));
	}
	close() {
		return this.Bu.cancel();
	}
	async getMetadata() {
		return this.metadata.promise;
	}
	async bu() {
		return await this.getMetadata(), this.ku();
	}
	/**
	* Reads from the head of internal buffer, and pulling more data from
	* underlying stream if a complete element cannot be found, until an
	* element(including the prefixed length and the JSON string) is found.
	*
	* Once a complete element is read, it is dropped from internal buffer.
	*
	* Returns either the bundled element, or null if we have reached the end of
	* the stream.
	*/ async ku() {
		const e = await this.qu();
		if (null === e) return null;
		const t = this.Lu.decode(e), n = Number(t);
		isNaN(n) && this.Qu(`length string (${t}) is not valid number`);
		const r = await this.$u(n);
		return new __PRIVATE_SizedBundleElement(JSON.parse(r), e.length + n);
	}
	/** First index of '{' from the underlying buffer. */ Uu() {
		return this.buffer.findIndex(((e) => e === "{".charCodeAt(0)));
	}
	/**
	* Reads from the beginning of the internal buffer, until the first '{', and
	* return the content.
	*
	* If reached end of the stream, returns a null.
	*/ async qu() {
		for (; this.Uu() < 0;) if (await this.Ku()) break;
		if (0 === this.buffer.length) return null;
		const e = this.Uu();
		e < 0 && this.Qu("Reached the end of bundle when a length string is expected.");
		const t = this.buffer.slice(0, e);
		return this.buffer = this.buffer.slice(e), t;
	}
	/**
	* Reads from a specified position from the internal buffer, for a specified
	* number of bytes, pulling more data from the underlying stream if needed.
	*
	* Returns a string decoded from the read bytes.
	*/ async $u(e) {
		for (; this.buffer.length < e;) await this.Ku() && this.Qu("Reached the end of bundle when more is expected.");
		const t = this.Lu.decode(this.buffer.slice(0, e));
		return this.buffer = this.buffer.slice(e), t;
	}
	Qu(e) {
		throw this.Bu.cancel(), /* @__PURE__ */ new Error(`Invalid bundle format: ${e}`);
	}
	/**
	* Pulls more data from underlying stream to internal buffer.
	* Returns a boolean indicating whether the stream is finished.
	*/ async Ku() {
		const e = await this.Bu.read();
		if (!e.done) {
			const t = new Uint8Array(this.buffer.length + e.value.length);
			t.set(this.buffer), t.set(e.value, this.buffer.length), this.buffer = t;
		}
		return e.done;
	}
};
/**
* @license
* Copyright 2025 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* A class that can parse a bundle form the string serialization of a bundle.
*/
var __PRIVATE_BundleReaderSyncImpl = class {
	constructor(e, t) {
		this.bundleData = e, this.serializer = t, this.cursor = 0, this.elements = [];
		let n = this.bu();
		if (!n || !n.$a()) throw new Error(`The first element of the bundle is not a metadata object, it is\n         ${JSON.stringify(n?.Qa)}`);
		this.metadata = n;
		do
			n = this.bu(), null !== n && this.elements.push(n);
		while (null !== n);
	}
	getMetadata() {
		return this.metadata;
	}
	Wu() {
		return this.elements;
	}
	/**
	* Parses the next element of the bundle.
	*
	* @returns a SizedBundleElement representation of the next element in the bundle, or null if
	* no more elements exist.
	*/ bu() {
		if (this.cursor === this.bundleData.length) return null;
		const e = this.qu(), t = this.$u(e);
		return new __PRIVATE_SizedBundleElement(JSON.parse(t), e);
	}
	/**
	* Reads from a specified position from the bundleData string, for a specified
	* number of bytes.
	*
	* @param length how many characters to read.
	* @returns a string parsed from the bundle.
	*/ $u(e) {
		if (this.cursor + e > this.bundleData.length) throw new FirestoreError(N.INTERNAL, "Reached the end of bundle when more is expected.");
		return this.bundleData.slice(this.cursor, this.cursor += e);
	}
	/**
	* Reads from the current cursor until the first '{'.
	*
	* @returns  A string to integer represention of the parsed value.
	* @throws An {@link Error} if the cursor has reached the end of the stream, since lengths
	* prefix bundle objects.
	*/ qu() {
		const e = this.cursor;
		let t = this.cursor;
		for (; t < this.bundleData.length;) {
			if ("{" === this.bundleData[t]) {
				if (t === e) throw new Error("First character is a bracket and not a number");
				return this.cursor = t, Number(this.bundleData.slice(e, t));
			}
			t++;
		}
		throw new Error("Reached the end of bundle when more is expected.");
	}
};
/**
*  Creates an instance of BundleReader without exposing the BundleReaderSyncImpl class type.
*/
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Internal transaction object responsible for accumulating the mutations to
* perform and the base versions for any documents read.
*/
var Transaction$2 = class {
	constructor(e) {
		this.datastore = e, this.readVersions = /* @__PURE__ */ new Map(), this.mutations = [], this.committed = !1, this.lastTransactionError = null, this.writtenDocs = /* @__PURE__ */ new Set();
	}
	async lookup(e) {
		if (this.ensureCommitNotCalled(), this.mutations.length > 0) throw this.lastTransactionError = new FirestoreError(N.INVALID_ARGUMENT, "Firestore transactions require all reads to be executed before all writes."), this.lastTransactionError;
		const t = await async function __PRIVATE_invokeBatchGetDocumentsRpc(e$1, t$1) {
			const n = __PRIVATE_debugCast(e$1), r = { documents: t$1.map(((e$2) => __PRIVATE_toName(n.serializer, e$2))) }, i = await n.Ho("BatchGetDocuments", n.serializer.databaseId, ResourcePath.emptyPath(), r, t$1.length), s = /* @__PURE__ */ new Map();
			i.forEach(((e$2) => {
				const t$2 = __PRIVATE_fromBatchGetDocumentsResponse(n.serializer, e$2);
				s.set(t$2.key.toString(), t$2);
			}));
			const o = [];
			return t$1.forEach(((e$2) => {
				const t$2 = s.get(e$2.toString());
				__PRIVATE_hardAssert(!!t$2, 55234, { key: e$2 }), o.push(t$2);
			})), o;
		}(this.datastore, e);
		return t.forEach(((e$1) => this.recordVersion(e$1))), t;
	}
	set(e, t) {
		this.write(t.toMutation(e, this.precondition(e))), this.writtenDocs.add(e.toString());
	}
	update(e, t) {
		try {
			this.write(t.toMutation(e, this.preconditionForUpdate(e)));
		} catch (e$1) {
			this.lastTransactionError = e$1;
		}
		this.writtenDocs.add(e.toString());
	}
	delete(e) {
		this.write(new __PRIVATE_DeleteMutation(e, this.precondition(e))), this.writtenDocs.add(e.toString());
	}
	async commit() {
		if (this.ensureCommitNotCalled(), this.lastTransactionError) throw this.lastTransactionError;
		const e = this.readVersions;
		this.mutations.forEach(((t) => {
			e.delete(t.key.toString());
		})), e.forEach(((e$1, t) => {
			const n = DocumentKey.fromPath(t);
			this.mutations.push(new __PRIVATE_VerifyMutation(n, this.precondition(n)));
		})), await async function __PRIVATE_invokeCommitRpc(e$1, t) {
			const n = __PRIVATE_debugCast(e$1), r = { writes: t.map(((e$2) => toMutation(n.serializer, e$2))) };
			await n.Go("Commit", n.serializer.databaseId, ResourcePath.emptyPath(), r);
		}(this.datastore, this.mutations), this.committed = !0;
	}
	recordVersion(e) {
		let t;
		if (e.isFoundDocument()) t = e.version;
		else {
			if (!e.isNoDocument()) throw fail(50498, { Gu: e.constructor.name });
			t = SnapshotVersion.min();
		}
		const n = this.readVersions.get(e.key.toString());
		if (n) {
			if (!t.isEqual(n)) throw new FirestoreError(N.ABORTED, "Document version changed between two reads.");
		} else this.readVersions.set(e.key.toString(), t);
	}
	/**
	* Returns the version of this document when it was read in this transaction,
	* as a precondition, or no precondition if it was not read.
	*/ precondition(e) {
		const t = this.readVersions.get(e.toString());
		return !this.writtenDocs.has(e.toString()) && t ? t.isEqual(SnapshotVersion.min()) ? Precondition.exists(!1) : Precondition.updateTime(t) : Precondition.none();
	}
	/**
	* Returns the precondition for a document if the operation is an update.
	*/ preconditionForUpdate(e) {
		const t = this.readVersions.get(e.toString());
		if (!this.writtenDocs.has(e.toString()) && t) {
			if (t.isEqual(SnapshotVersion.min())) throw new FirestoreError(N.INVALID_ARGUMENT, "Can't update a document that doesn't exist.");
			return Precondition.updateTime(t);
		}
		return Precondition.exists(!0);
	}
	write(e) {
		this.ensureCommitNotCalled(), this.mutations.push(e);
	}
	ensureCommitNotCalled() {}
};
/**
* @license
* Copyright 2019 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* TransactionRunner encapsulates the logic needed to run and retry transactions
* with backoff.
*/ var __PRIVATE_TransactionRunner = class {
	constructor(e, t, n, r, i) {
		this.asyncQueue = e, this.datastore = t, this.options = n, this.updateFunction = r, this.deferred = i, this.zu = n.maxAttempts, this.M_ = new __PRIVATE_ExponentialBackoff(this.asyncQueue, "transaction_retry");
	}
	/** Runs the transaction and sets the result on deferred. */ ju() {
		this.zu -= 1, this.Ju();
	}
	Ju() {
		this.M_.p_((async () => {
			const e = new Transaction$2(this.datastore), t = this.Hu(e);
			t && t.then(((t$1) => {
				this.asyncQueue.enqueueAndForget((() => e.commit().then((() => {
					this.deferred.resolve(t$1);
				})).catch(((e$1) => {
					this.Yu(e$1);
				}))));
			})).catch(((e$1) => {
				this.Yu(e$1);
			}));
		}));
	}
	Hu(e) {
		try {
			const t = this.updateFunction(e);
			return !__PRIVATE_isNullOrUndefined(t) && t.catch && t.then ? t : (this.deferred.reject(Error("Transaction callback must return a Promise")), null);
		} catch (e$1) {
			return this.deferred.reject(e$1), null;
		}
	}
	Yu(e) {
		this.zu > 0 && this.Zu(e) ? (this.zu -= 1, this.asyncQueue.enqueueAndForget((() => (this.Ju(), Promise.resolve())))) : this.deferred.reject(e);
	}
	Zu(e) {
		if ("FirebaseError" === e?.name) {
			const t = e.code;
			return "aborted" === t || "failed-precondition" === t || "already-exists" === t || !__PRIVATE_isPermanentError(t);
		}
		return !1;
	}
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ var on = "FirestoreClient";
/**
* FirestoreClient is a top-level class that constructs and owns all of the //
* pieces of the client SDK architecture. It is responsible for creating the //
* async queue that is shared by all of the other components in the system. //
*/
var FirestoreClient = class {
	constructor(e, t, n, r, i) {
		this.authCredentials = e, this.appCheckCredentials = t, this.asyncQueue = n, this.databaseInfo = r, this.user = User.UNAUTHENTICATED, this.clientId = __PRIVATE_AutoId.newId(), this.authCredentialListener = () => Promise.resolve(), this.appCheckCredentialListener = () => Promise.resolve(), this._uninitializedComponentsProvider = i, this.authCredentials.start(n, (async (e$1) => {
			__PRIVATE_logDebug(on, "Received user=", e$1.uid), await this.authCredentialListener(e$1), this.user = e$1;
		})), this.appCheckCredentials.start(n, ((e$1) => (__PRIVATE_logDebug(on, "Received new app check token=", e$1), this.appCheckCredentialListener(e$1, this.user))));
	}
	get configuration() {
		return {
			asyncQueue: this.asyncQueue,
			databaseInfo: this.databaseInfo,
			clientId: this.clientId,
			authCredentials: this.authCredentials,
			appCheckCredentials: this.appCheckCredentials,
			initialUser: this.user,
			maxConcurrentLimboResolutions: 100
		};
	}
	setCredentialChangeListener(e) {
		this.authCredentialListener = e;
	}
	setAppCheckTokenChangeListener(e) {
		this.appCheckCredentialListener = e;
	}
	terminate() {
		this.asyncQueue.enterRestrictedMode();
		const e = new __PRIVATE_Deferred();
		return this.asyncQueue.enqueueAndForgetEvenWhileRestricted((async () => {
			try {
				this._onlineComponents && await this._onlineComponents.terminate(), this._offlineComponents && await this._offlineComponents.terminate(), this.authCredentials.shutdown(), this.appCheckCredentials.shutdown(), e.resolve();
			} catch (t) {
				const n = __PRIVATE_wrapInUserErrorIfRecoverable(t, "Failed to shutdown persistence");
				e.reject(n);
			}
		})), e.promise;
	}
};
async function __PRIVATE_setOfflineComponentProvider(e, t) {
	e.asyncQueue.verifyOperationInProgress(), __PRIVATE_logDebug(on, "Initializing OfflineComponentProvider");
	const n = e.configuration;
	await t.initialize(n);
	let r = n.initialUser;
	e.setCredentialChangeListener((async (e$1) => {
		r.isEqual(e$1) || (await __PRIVATE_localStoreHandleUserChange(t.localStore, e$1), r = e$1);
	})), t.persistence.setDatabaseDeletedListener((() => e.terminate())), e._offlineComponents = t;
}
async function __PRIVATE_setOnlineComponentProvider(e, t) {
	e.asyncQueue.verifyOperationInProgress();
	const n = await __PRIVATE_ensureOfflineComponents(e);
	__PRIVATE_logDebug(on, "Initializing OnlineComponentProvider"), await t.initialize(n, e.configuration), e.setCredentialChangeListener(((e$1) => __PRIVATE_remoteStoreHandleCredentialChange(t.remoteStore, e$1))), e.setAppCheckTokenChangeListener(((e$1, n$1) => __PRIVATE_remoteStoreHandleCredentialChange(t.remoteStore, n$1))), e._onlineComponents = t;
}
/**
* Decides whether the provided error allows us to gracefully disable
* persistence (as opposed to crashing the client).
*/ async function __PRIVATE_ensureOfflineComponents(e) {
	if (!e._offlineComponents) if (e._uninitializedComponentsProvider) {
		__PRIVATE_logDebug(on, "Using user provided OfflineComponentProvider");
		try {
			await __PRIVATE_setOfflineComponentProvider(e, e._uninitializedComponentsProvider._offline);
		} catch (t) {
			const n = t;
			if (!function __PRIVATE_canFallbackFromIndexedDbError(e$1) {
				return "FirebaseError" === e$1.name ? e$1.code === N.FAILED_PRECONDITION || e$1.code === N.UNIMPLEMENTED : !("undefined" != typeof DOMException && e$1 instanceof DOMException) || 22 === e$1.code || 20 === e$1.code || 11 === e$1.code;
			}(n)) throw n;
			__PRIVATE_logWarn("Error using user provided cache. Falling back to memory cache: " + n), await __PRIVATE_setOfflineComponentProvider(e, new __PRIVATE_MemoryOfflineComponentProvider());
		}
	} else __PRIVATE_logDebug(on, "Using default OfflineComponentProvider"), await __PRIVATE_setOfflineComponentProvider(e, new __PRIVATE_LruGcMemoryOfflineComponentProvider(void 0));
	return e._offlineComponents;
}
async function __PRIVATE_ensureOnlineComponents(e) {
	return e._onlineComponents || (e._uninitializedComponentsProvider ? (__PRIVATE_logDebug(on, "Using user provided OnlineComponentProvider"), await __PRIVATE_setOnlineComponentProvider(e, e._uninitializedComponentsProvider._online)) : (__PRIVATE_logDebug(on, "Using default OnlineComponentProvider"), await __PRIVATE_setOnlineComponentProvider(e, new OnlineComponentProvider()))), e._onlineComponents;
}
function __PRIVATE_getPersistence(e) {
	return __PRIVATE_ensureOfflineComponents(e).then(((e$1) => e$1.persistence));
}
function __PRIVATE_getLocalStore(e) {
	return __PRIVATE_ensureOfflineComponents(e).then(((e$1) => e$1.localStore));
}
function __PRIVATE_getRemoteStore(e) {
	return __PRIVATE_ensureOnlineComponents(e).then(((e$1) => e$1.remoteStore));
}
function __PRIVATE_getSyncEngine(e) {
	return __PRIVATE_ensureOnlineComponents(e).then(((e$1) => e$1.syncEngine));
}
function __PRIVATE_getDatastore(e) {
	return __PRIVATE_ensureOnlineComponents(e).then(((e$1) => e$1.datastore));
}
async function __PRIVATE_getEventManager(e) {
	const t = await __PRIVATE_ensureOnlineComponents(e), n = t.eventManager;
	return n.onListen = __PRIVATE_syncEngineListen.bind(null, t.syncEngine), n.onUnlisten = __PRIVATE_syncEngineUnlisten.bind(null, t.syncEngine), n.onFirstRemoteStoreListen = __PRIVATE_triggerRemoteStoreListen.bind(null, t.syncEngine), n.onLastRemoteStoreUnlisten = __PRIVATE_triggerRemoteStoreUnlisten.bind(null, t.syncEngine), n;
}
/** Enables the network connection and re-enqueues all pending operations. */ function __PRIVATE_firestoreClientEnableNetwork(e) {
	return e.asyncQueue.enqueue((async () => {
		const t = await __PRIVATE_getPersistence(e), n = await __PRIVATE_getRemoteStore(e);
		return t.setNetworkEnabled(!0), function __PRIVATE_remoteStoreEnableNetwork(e$1) {
			const t$1 = __PRIVATE_debugCast(e$1);
			return t$1.Ea.delete(0), __PRIVATE_enableNetworkInternal(t$1);
		}(n);
	}));
}
/** Disables the network connection. Pending operations will not complete. */ function __PRIVATE_firestoreClientDisableNetwork(e) {
	return e.asyncQueue.enqueue((async () => {
		const t = await __PRIVATE_getPersistence(e), n = await __PRIVATE_getRemoteStore(e);
		return t.setNetworkEnabled(!1), async function __PRIVATE_remoteStoreDisableNetwork(e$1) {
			const t$1 = __PRIVATE_debugCast(e$1);
			t$1.Ea.add(0), await __PRIVATE_disableNetworkInternal(t$1), t$1.Ra.set("Offline");
		}(n);
	}));
}
/**
* Returns a Promise that resolves when all writes that were pending at the time
* this method was called received server acknowledgement. An acknowledgement
* can be either acceptance or rejection.
*/ function __PRIVATE_firestoreClientGetDocumentFromLocalCache(e, t) {
	const n = new __PRIVATE_Deferred();
	return e.asyncQueue.enqueueAndForget((async () => async function __PRIVATE_readDocumentFromCache(e$1, t$1, n$1) {
		try {
			const r = await function __PRIVATE_localStoreReadDocument(e$2, t$2) {
				const n$2 = __PRIVATE_debugCast(e$2);
				return n$2.persistence.runTransaction("read document", "readonly", ((e$3) => n$2.localDocuments.getDocument(e$3, t$2)));
			}(e$1, t$1);
			r.isFoundDocument() ? n$1.resolve(r) : r.isNoDocument() ? n$1.resolve(null) : n$1.reject(new FirestoreError(N.UNAVAILABLE, "Failed to get document from cache. (However, this document may exist on the server. Run again without setting 'source' in the GetOptions to attempt to retrieve the document from the server.)"));
		} catch (e$2) {
			const r = __PRIVATE_wrapInUserErrorIfRecoverable(e$2, `Failed to get document '${t$1} from cache`);
			n$1.reject(r);
		}
	}(await __PRIVATE_getLocalStore(e), t, n))), n.promise;
}
function __PRIVATE_firestoreClientGetDocumentViaSnapshotListener(e, t, n = {}) {
	const r = new __PRIVATE_Deferred();
	return e.asyncQueue.enqueueAndForget((async () => function __PRIVATE_readDocumentViaSnapshotListener(e$1, t$1, n$1, r$1, i) {
		const s = new __PRIVATE_AsyncObserver({
			next: (_) => {
				s.Nu(), t$1.enqueueAndForget((() => __PRIVATE_eventManagerUnlisten(e$1, o)));
				const a = _.docs.has(n$1);
				!a && _.fromCache ? i.reject(new FirestoreError(N.UNAVAILABLE, "Failed to get document because the client is offline.")) : a && _.fromCache && r$1 && "server" === r$1.source ? i.reject(new FirestoreError(N.UNAVAILABLE, "Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to \"server\" to retrieve the cached document.)")) : i.resolve(_);
			},
			error: (e$2) => i.reject(e$2)
		}), o = new __PRIVATE_QueryListener(__PRIVATE_newQueryForPath(n$1.path), s, {
			includeMetadataChanges: !0,
			qa: !0
		});
		return __PRIVATE_eventManagerListen(e$1, o);
	}(await __PRIVATE_getEventManager(e), e.asyncQueue, t, n, r))), r.promise;
}
function __PRIVATE_firestoreClientGetDocumentsFromLocalCache(e, t) {
	const n = new __PRIVATE_Deferred();
	return e.asyncQueue.enqueueAndForget((async () => async function __PRIVATE_executeQueryFromCache(e$1, t$1, n$1) {
		try {
			const r = await __PRIVATE_localStoreExecuteQuery(e$1, t$1, !0), i = new __PRIVATE_View(t$1, r.Qs), s = i.ru(r.documents), o = i.applyChanges(s, !1);
			n$1.resolve(o.snapshot);
		} catch (e$2) {
			const r = __PRIVATE_wrapInUserErrorIfRecoverable(e$2, `Failed to execute query '${t$1} against cache`);
			n$1.reject(r);
		}
	}(await __PRIVATE_getLocalStore(e), t, n))), n.promise;
}
function __PRIVATE_firestoreClientGetDocumentsViaSnapshotListener(e, t, n = {}) {
	const r = new __PRIVATE_Deferred();
	return e.asyncQueue.enqueueAndForget((async () => function __PRIVATE_executeQueryViaSnapshotListener(e$1, t$1, n$1, r$1, i) {
		const s = new __PRIVATE_AsyncObserver({
			next: (n$2) => {
				s.Nu(), t$1.enqueueAndForget((() => __PRIVATE_eventManagerUnlisten(e$1, o))), n$2.fromCache && "server" === r$1.source ? i.reject(new FirestoreError(N.UNAVAILABLE, "Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to \"server\" to retrieve the cached documents.)")) : i.resolve(n$2);
			},
			error: (e$2) => i.reject(e$2)
		}), o = new __PRIVATE_QueryListener(n$1, s, {
			includeMetadataChanges: !0,
			qa: !0
		});
		return __PRIVATE_eventManagerListen(e$1, o);
	}(await __PRIVATE_getEventManager(e), e.asyncQueue, t, n, r))), r.promise;
}
function __PRIVATE_firestoreClientRunAggregateQuery(e, t, n) {
	const r = new __PRIVATE_Deferred();
	return e.asyncQueue.enqueueAndForget((async () => {
		try {
			const i = await __PRIVATE_getDatastore(e);
			r.resolve(async function __PRIVATE_invokeRunAggregationQueryRpc(e$1, t$1, n$1) {
				const r$1 = __PRIVATE_debugCast(e$1), { request: i$1, gt: s, parent: o } = __PRIVATE_toRunAggregationQueryRequest(r$1.serializer, __PRIVATE_queryToAggregateTarget(t$1), n$1);
				r$1.connection.$o || delete i$1.parent;
				const _ = (await r$1.Ho("RunAggregationQuery", r$1.serializer.databaseId, o, i$1, 1)).filter(((e$2) => !!e$2.result));
				__PRIVATE_hardAssert(1 === _.length, 64727);
				const a = _[0].result?.aggregateFields;
				return Object.keys(a).reduce(((e$2, t$2) => (e$2[s[t$2]] = a[t$2], e$2)), {});
			}(i, t, n));
		} catch (e$1) {
			r.reject(e$1);
		}
	})), r.promise;
}
function __PRIVATE_firestoreClientAddSnapshotsInSyncListener(e, t) {
	const n = new __PRIVATE_AsyncObserver(t);
	return e.asyncQueue.enqueueAndForget((async () => function __PRIVATE_addSnapshotsInSyncListener(e$1, t$1) {
		__PRIVATE_debugCast(e$1).Ca.add(t$1), t$1.next();
	}(await __PRIVATE_getEventManager(e), n))), () => {
		n.Nu(), e.asyncQueue.enqueueAndForget((async () => function __PRIVATE_removeSnapshotsInSyncListener(e$1, t$1) {
			__PRIVATE_debugCast(e$1).Ca.delete(t$1);
		}(await __PRIVATE_getEventManager(e), n)));
	};
}
/**
* Takes an updateFunction in which a set of reads and writes can be performed
* atomically. In the updateFunction, the client can read and write values
* using the supplied transaction object. After the updateFunction, all
* changes will be committed. If a retryable error occurs (ex: some other
* client has changed any of the data referenced), then the updateFunction
* will be called again after a backoff. If the updateFunction still fails
* after all retries, then the transaction will be rejected.
*
* The transaction object passed to the updateFunction contains methods for
* accessing documents and collections. Unlike other datastore access, data
* accessed with the transaction will not reflect local changes that have not
* been committed. For this reason, it is required that all reads are
* performed before any writes. Transactions must be performed while online.
*/ function __PRIVATE_firestoreClientLoadBundle(e, t, n, r) {
	const i = function __PRIVATE_createBundleReader(e$1, t$1) {
		let n$1;
		n$1 = "string" == typeof e$1 ? __PRIVATE_newTextEncoder().encode(e$1) : e$1;
		return function __PRIVATE_newBundleReader(e$2, t$2) {
			return new __PRIVATE_BundleReaderImpl(e$2, t$2);
		}(function __PRIVATE_toByteStreamReader(e$2, t$2) {
			if (e$2 instanceof Uint8Array) return __PRIVATE_toByteStreamReaderHelper(e$2, t$2);
			if (e$2 instanceof ArrayBuffer) return __PRIVATE_toByteStreamReaderHelper(new Uint8Array(e$2), t$2);
			if (e$2 instanceof ReadableStream) return e$2.getReader();
			throw new Error("Source of `toByteStreamReader` has to be a ArrayBuffer or ReadableStream");
		}(n$1), t$1);
	}(n, __PRIVATE_newSerializer(t));
	e.asyncQueue.enqueueAndForget((async () => {
		__PRIVATE_syncEngineLoadBundle(await __PRIVATE_getSyncEngine(e), i, r);
	}));
}
function __PRIVATE_firestoreClientGetNamedQuery(e, t) {
	return e.asyncQueue.enqueue((async () => function __PRIVATE_localStoreGetNamedQuery(e$1, t$1) {
		const n = __PRIVATE_debugCast(e$1);
		return n.persistence.runTransaction("Get named query", "readonly", ((e$2) => n.Ii.getNamedQuery(e$2, t$1)));
	}(await __PRIVATE_getLocalStore(e), t)));
}
function __PRIVATE_createBundleReaderSync(e, t) {
	return function __PRIVATE_newBundleReaderSync(e$1, t$1) {
		return new __PRIVATE_BundleReaderSyncImpl(e$1, t$1);
	}(e, t);
}
function __PRIVATE_firestoreClientSetIndexConfiguration(e, t) {
	return e.asyncQueue.enqueue((async () => async function __PRIVATE_localStoreConfigureFieldIndexes(e$1, t$1) {
		const n = __PRIVATE_debugCast(e$1), r = n.indexManager, i = [];
		return n.persistence.runTransaction("Configure indexes", "readwrite", ((e$2) => r.getFieldIndexes(e$2).next(((n$1) => function __PRIVATE_diffArrays(e$3, t$2, n$2, r$1, i$1) {
			e$3 = [...e$3], t$2 = [...t$2], e$3.sort(n$2), t$2.sort(n$2);
			const s = e$3.length, o = t$2.length;
			let _ = 0, a = 0;
			for (; _ < o && a < s;) {
				const s$1 = n$2(e$3[a], t$2[_]);
				s$1 < 0 ? i$1(e$3[a++]) : s$1 > 0 ? r$1(t$2[_++]) : (_++, a++);
			}
			for (; _ < o;) r$1(t$2[_++]);
			for (; a < s;) i$1(e$3[a++]);
		}(n$1, t$1, __PRIVATE_fieldIndexSemanticComparator, ((t$2) => {
			i.push(r.addFieldIndex(e$2, t$2));
		}), ((t$2) => {
			i.push(r.deleteFieldIndex(e$2, t$2));
		})))).next((() => PersistencePromise.waitFor(i)))));
	}(await __PRIVATE_getLocalStore(e), t)));
}
function __PRIVATE_firestoreClientSetPersistentCacheIndexAutoCreationEnabled(e, t) {
	return e.asyncQueue.enqueue((async () => function __PRIVATE_localStoreSetIndexAutoCreationEnabled(e$1, t$1) {
		__PRIVATE_debugCast(e$1).Fs.Vs = t$1;
	}(await __PRIVATE_getLocalStore(e), t)));
}
function __PRIVATE_firestoreClientDeleteAllFieldIndexes(e) {
	return e.asyncQueue.enqueue((async () => function __PRIVATE_localStoreDeleteAllFieldIndexes(e$1) {
		const t = __PRIVATE_debugCast(e$1), n = t.indexManager;
		return t.persistence.runTransaction("Delete All Indexes", "readwrite", ((e$2) => n.deleteAllFieldIndexes(e$2)));
	}(await __PRIVATE_getLocalStore(e))));
}
/**
* @license
* Copyright 2023 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Compares two `ExperimentalLongPollingOptions` objects for equality.
*/
/**
* Creates and returns a new `ExperimentalLongPollingOptions` with the same
* option values as the given instance.
*/
function __PRIVATE_cloneLongPollingOptions(e) {
	const t = {};
	return void 0 !== e.timeoutSeconds && (t.timeoutSeconds = e.timeoutSeconds), t;
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ var _n = /* @__PURE__ */ new Map();
/**
* An instance map that ensures only one Datastore exists per Firestore
* instance.
*/
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var an = "firestore.googleapis.com", un = !0;
/**
* A concrete type describing all the values that can be applied via a
* user-supplied `FirestoreSettings` object. This is a separate type so that
* defaults can be supplied and the value can be checked for equality.
*/
var FirestoreSettingsImpl = class {
	constructor(e) {
		if (void 0 === e.host) {
			if (void 0 !== e.ssl) throw new FirestoreError(N.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
			this.host = an, this.ssl = un;
		} else this.host = e.host, this.ssl = e.ssl ?? un;
		if (this.isUsingEmulator = void 0 !== e.emulatorOptions, this.credentials = e.credentials, this.ignoreUndefinedProperties = !!e.ignoreUndefinedProperties, this.localCache = e.localCache, void 0 === e.cacheSizeBytes) this.cacheSizeBytes = Ot;
		else {
			if (-1 !== e.cacheSizeBytes && e.cacheSizeBytes < Bt) throw new FirestoreError(N.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
			this.cacheSizeBytes = e.cacheSizeBytes;
		}
		__PRIVATE_validateIsNotUsedTogether("experimentalForceLongPolling", e.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", e.experimentalAutoDetectLongPolling), this.experimentalForceLongPolling = !!e.experimentalForceLongPolling, this.experimentalForceLongPolling ? this.experimentalAutoDetectLongPolling = !1 : void 0 === e.experimentalAutoDetectLongPolling ? this.experimentalAutoDetectLongPolling = true : this.experimentalAutoDetectLongPolling = !!e.experimentalAutoDetectLongPolling, this.experimentalLongPollingOptions = __PRIVATE_cloneLongPollingOptions(e.experimentalLongPollingOptions ?? {}), function __PRIVATE_validateLongPollingOptions(e$1) {
			if (void 0 !== e$1.timeoutSeconds) {
				if (isNaN(e$1.timeoutSeconds)) throw new FirestoreError(N.INVALID_ARGUMENT, `invalid long polling timeout: ${e$1.timeoutSeconds} (must not be NaN)`);
				if (e$1.timeoutSeconds < 5) throw new FirestoreError(N.INVALID_ARGUMENT, `invalid long polling timeout: ${e$1.timeoutSeconds} (minimum allowed value is 5)`);
				if (e$1.timeoutSeconds > 30) throw new FirestoreError(N.INVALID_ARGUMENT, `invalid long polling timeout: ${e$1.timeoutSeconds} (maximum allowed value is 30)`);
			}
		}(this.experimentalLongPollingOptions), this.useFetchStreams = !!e.useFetchStreams;
	}
	isEqual(e) {
		return this.host === e.host && this.ssl === e.ssl && this.credentials === e.credentials && this.cacheSizeBytes === e.cacheSizeBytes && this.experimentalForceLongPolling === e.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === e.experimentalAutoDetectLongPolling && function __PRIVATE_longPollingOptionsEqual(e$1, t) {
			return e$1.timeoutSeconds === t.timeoutSeconds;
		}(this.experimentalLongPollingOptions, e.experimentalLongPollingOptions) && this.ignoreUndefinedProperties === e.ignoreUndefinedProperties && this.useFetchStreams === e.useFetchStreams;
	}
};
var Firestore$1 = class {
	/** @hideconstructor */
	constructor(e, t, n, r) {
		this._authCredentials = e, this._appCheckCredentials = t, this._databaseId = n, this._app = r, this.type = "firestore-lite", this._persistenceKey = "(lite)", this._settings = new FirestoreSettingsImpl({}), this._settingsFrozen = !1, this._emulatorOptions = {}, this._terminateTask = "notTerminated";
	}
	/**
	* The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service
	* instance.
	*/ get app() {
		if (!this._app) throw new FirestoreError(N.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
		return this._app;
	}
	get _initialized() {
		return this._settingsFrozen;
	}
	get _terminated() {
		return "notTerminated" !== this._terminateTask;
	}
	_setSettings(e) {
		if (this._settingsFrozen) throw new FirestoreError(N.FAILED_PRECONDITION, "Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");
		this._settings = new FirestoreSettingsImpl(e), this._emulatorOptions = e.emulatorOptions || {}, void 0 !== e.credentials && (this._authCredentials = function __PRIVATE_makeAuthCredentialsProvider(e$1) {
			if (!e$1) return new __PRIVATE_EmptyAuthCredentialsProvider();
			switch (e$1.type) {
				case "firstParty": return new __PRIVATE_FirstPartyAuthCredentialsProvider(e$1.sessionIndex || "0", e$1.iamToken || null, e$1.authTokenFactory || null);
				case "provider": return e$1.client;
				default: throw new FirestoreError(N.INVALID_ARGUMENT, "makeAuthCredentialsProvider failed due to invalid credential type");
			}
		}(e.credentials));
	}
	_getSettings() {
		return this._settings;
	}
	_getEmulatorOptions() {
		return this._emulatorOptions;
	}
	_freezeSettings() {
		return this._settingsFrozen = !0, this._settings;
	}
	_delete() {
		return "notTerminated" === this._terminateTask && (this._terminateTask = this._terminate()), this._terminateTask;
	}
	async _restart() {
		"notTerminated" === this._terminateTask ? await this._terminate() : this._terminateTask = "notTerminated";
	}
	/** Returns a JSON-serializable representation of this `Firestore` instance. */ toJSON() {
		return {
			app: this._app,
			databaseId: this._databaseId,
			settings: this._settings
		};
	}
	/**
	* Terminates all components used by this client. Subclasses can override
	* this method to clean up their own dependencies, but must also call this
	* method.
	*
	* Only ever called once.
	*/ _terminate() {
		/**
		* Removes all components associated with the provided instance. Must be called
		* when the `Firestore` instance is terminated.
		*/
		return function __PRIVATE_removeComponents(e) {
			const t = _n.get(e);
			t && (__PRIVATE_logDebug("ComponentProvider", "Removing Datastore"), _n.delete(e), t.terminate());
		}(this), Promise.resolve();
	}
};
/**
* Modify this instance to communicate with the Cloud Firestore emulator.
*
* Note: This must be called before this instance has been used to do any
* operations.
*
* @param firestore - The `Firestore` instance to configure to connect to the
* emulator.
* @param host - the emulator host (ex: localhost).
* @param port - the emulator port (ex: 9000).
* @param options.mockUserToken - the mock auth token to use for unit testing
* Security Rules.
*/ function connectFirestoreEmulator(e, t, n, r = {}) {
	e = __PRIVATE_cast(e, Firestore$1);
	const i = isCloudWorkstation(t), s = e._getSettings(), o = {
		...s,
		emulatorOptions: e._getEmulatorOptions()
	}, _ = `${t}:${n}`;
	i && (pingServer(`https://${_}`), updateEmulatorBanner("Firestore", !0)), s.host !== an && s.host !== _ && __PRIVATE_logWarn("Host has been set in both settings() and connectFirestoreEmulator(), emulator host will be used.");
	const a = {
		...s,
		host: _,
		ssl: i,
		emulatorOptions: r
	};
	if (!deepEqual(a, o) && (e._setSettings(a), r.mockUserToken)) {
		let t$1, n$1;
		if ("string" == typeof r.mockUserToken) t$1 = r.mockUserToken, n$1 = User.MOCK_USER;
		else {
			t$1 = createMockUserToken(r.mockUserToken, e._app?.options.projectId);
			const i$1 = r.mockUserToken.sub || r.mockUserToken.user_id;
			if (!i$1) throw new FirestoreError(N.INVALID_ARGUMENT, "mockUserToken must contain 'sub' or 'user_id' field!");
			n$1 = new User(i$1);
		}
		e._authCredentials = new __PRIVATE_EmulatorAuthCredentialsProvider(new __PRIVATE_OAuthToken(t$1, n$1));
	}
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* A `Query` refers to a query which you can read or listen to. You can also
* construct refined `Query` objects by adding filters and ordering.
*/ var Query = class Query {
	/** @hideconstructor protected */
	constructor(e, t, n) {
		this.converter = t, this._query = n, this.type = "query", this.firestore = e;
	}
	withConverter(e) {
		return new Query(this.firestore, e, this._query);
	}
};
/**
* A `DocumentReference` refers to a document location in a Firestore database
* and can be used to write, read, or listen to the location. The document at
* the referenced location may or may not exist.
*/ var DocumentReference = class DocumentReference {
	/** @hideconstructor */
	constructor(e, t, n) {
		this.converter = t, this._key = n, this.type = "document", this.firestore = e;
	}
	get _path() {
		return this._key.path;
	}
	/**
	* The document's identifier within its collection.
	*/ get id() {
		return this._key.path.lastSegment();
	}
	/**
	* A string representing the path of the referenced document (relative
	* to the root of the database).
	*/ get path() {
		return this._key.path.canonicalString();
	}
	/**
	* The collection this `DocumentReference` belongs to.
	*/ get parent() {
		return new CollectionReference(this.firestore, this.converter, this._key.path.popLast());
	}
	withConverter(e) {
		return new DocumentReference(this.firestore, e, this._key);
	}
	/**
	* Returns a JSON-serializable representation of this `DocumentReference` instance.
	*
	* @returns a JSON representation of this object.
	*/ toJSON() {
		return {
			type: DocumentReference._jsonSchemaVersion,
			referencePath: this._key.toString()
		};
	}
	static fromJSON(e, t, n) {
		if (__PRIVATE_validateJSON(t, DocumentReference._jsonSchema)) return new DocumentReference(e, n || null, new DocumentKey(ResourcePath.fromString(t.referencePath)));
	}
};
DocumentReference._jsonSchemaVersion = "firestore/documentReference/1.0", DocumentReference._jsonSchema = {
	type: property("string", DocumentReference._jsonSchemaVersion),
	referencePath: property("string")
};
/**
* A `CollectionReference` object can be used for adding documents, getting
* document references, and querying for documents (using {@link (query:1)}).
*/
var CollectionReference = class CollectionReference extends Query {
	/** @hideconstructor */
	constructor(e, t, n) {
		super(e, t, __PRIVATE_newQueryForPath(n)), this._path = n, this.type = "collection";
	}
	/** The collection's identifier. */ get id() {
		return this._query.path.lastSegment();
	}
	/**
	* A string representing the path of the referenced collection (relative
	* to the root of the database).
	*/ get path() {
		return this._query.path.canonicalString();
	}
	/**
	* A reference to the containing `DocumentReference` if this is a
	* subcollection. If this isn't a subcollection, the reference is null.
	*/ get parent() {
		const e = this._path.popLast();
		return e.isEmpty() ? null : new DocumentReference(this.firestore, null, new DocumentKey(e));
	}
	withConverter(e) {
		return new CollectionReference(this.firestore, e, this._path);
	}
};
function collection(e, t, ...n) {
	if (e = getModularInstance(e), __PRIVATE_validateNonEmptyArgument("collection", "path", t), e instanceof Firestore$1) {
		const r = ResourcePath.fromString(t, ...n);
		return __PRIVATE_validateCollectionPath(r), new CollectionReference(e, null, r);
	}
	{
		if (!(e instanceof DocumentReference || e instanceof CollectionReference)) throw new FirestoreError(N.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
		const r = e._path.child(ResourcePath.fromString(t, ...n));
		return __PRIVATE_validateCollectionPath(r), new CollectionReference(e.firestore, null, r);
	}
}
/**
* Creates and returns a new `Query` instance that includes all documents in the
* database that are contained in a collection or subcollection with the
* given `collectionId`.
*
* @param firestore - A reference to the root `Firestore` instance.
* @param collectionId - Identifies the collections to query over. Every
* collection or subcollection with this ID as the last segment of its path
* will be included. Cannot contain a slash.
* @returns The created `Query`.
*/ function collectionGroup(e, t) {
	if (e = __PRIVATE_cast(e, Firestore$1), __PRIVATE_validateNonEmptyArgument("collectionGroup", "collection id", t), t.indexOf("/") >= 0) throw new FirestoreError(N.INVALID_ARGUMENT, `Invalid collection ID '${t}' passed to function collectionGroup(). Collection IDs must not contain '/'.`);
	return new Query(e, null, function __PRIVATE_newQueryForCollectionGroup(e$1) {
		return new __PRIVATE_QueryImpl(ResourcePath.emptyPath(), e$1);
	}(t));
}
function doc(e, t, ...n) {
	if (e = getModularInstance(e), 1 === arguments.length && (t = __PRIVATE_AutoId.newId()), __PRIVATE_validateNonEmptyArgument("doc", "path", t), e instanceof Firestore$1) {
		const r = ResourcePath.fromString(t, ...n);
		return __PRIVATE_validateDocumentPath(r), new DocumentReference(e, null, new DocumentKey(r));
	}
	{
		if (!(e instanceof DocumentReference || e instanceof CollectionReference)) throw new FirestoreError(N.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
		const r = e._path.child(ResourcePath.fromString(t, ...n));
		return __PRIVATE_validateDocumentPath(r), new DocumentReference(e.firestore, e instanceof CollectionReference ? e.converter : null, new DocumentKey(r));
	}
}
/**
* Returns true if the provided references are equal.
*
* @param left - A reference to compare.
* @param right - A reference to compare.
* @returns true if the references point to the same location in the same
* Firestore database.
*/ function refEqual(e, t) {
	return e = getModularInstance(e), t = getModularInstance(t), (e instanceof DocumentReference || e instanceof CollectionReference) && (t instanceof DocumentReference || t instanceof CollectionReference) && e.firestore === t.firestore && e.path === t.path && e.converter === t.converter;
}
/**
* Returns true if the provided queries point to the same collection and apply
* the same constraints.
*
* @param left - A `Query` to compare.
* @param right - A `Query` to compare.
* @returns true if the references point to the same location in the same
* Firestore database.
*/ function queryEqual(e, t) {
	return e = getModularInstance(e), t = getModularInstance(t), e instanceof Query && t instanceof Query && e.firestore === t.firestore && __PRIVATE_queryEquals(e._query, t._query) && e.converter === t.converter;
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ var cn = "AsyncQueue";
var __PRIVATE_AsyncQueueImpl = class {
	constructor(e = Promise.resolve()) {
		this.Xu = [], this.ec = !1, this.tc = [], this.nc = null, this.rc = !1, this.sc = !1, this.oc = [], this.M_ = new __PRIVATE_ExponentialBackoff(this, "async_queue_retry"), this._c = () => {
			const e$1 = getDocument();
			e$1 && __PRIVATE_logDebug(cn, "Visibility state changed to " + e$1.visibilityState), this.M_.w_();
		}, this.ac = e;
		const t = getDocument();
		t && "function" == typeof t.addEventListener && t.addEventListener("visibilitychange", this._c);
	}
	get isShuttingDown() {
		return this.ec;
	}
	/**
	* Adds a new operation to the queue without waiting for it to complete (i.e.
	* we ignore the Promise result).
	*/ enqueueAndForget(e) {
		this.enqueue(e);
	}
	enqueueAndForgetEvenWhileRestricted(e) {
		this.uc(), this.cc(e);
	}
	enterRestrictedMode(e) {
		if (!this.ec) {
			this.ec = !0, this.sc = e || !1;
			const t = getDocument();
			t && "function" == typeof t.removeEventListener && t.removeEventListener("visibilitychange", this._c);
		}
	}
	enqueue(e) {
		if (this.uc(), this.ec) return new Promise((() => {}));
		const t = new __PRIVATE_Deferred();
		return this.cc((() => this.ec && this.sc ? Promise.resolve() : (e().then(t.resolve, t.reject), t.promise))).then((() => t.promise));
	}
	enqueueRetryable(e) {
		this.enqueueAndForget((() => (this.Xu.push(e), this.lc())));
	}
	/**
	* Runs the next operation from the retryable queue. If the operation fails,
	* reschedules with backoff.
	*/ async lc() {
		if (0 !== this.Xu.length) {
			try {
				await this.Xu[0](), this.Xu.shift(), this.M_.reset();
			} catch (e) {
				if (!__PRIVATE_isIndexedDbTransactionError(e)) throw e;
				__PRIVATE_logDebug(cn, "Operation failed with retryable error: " + e);
			}
			this.Xu.length > 0 && this.M_.p_((() => this.lc()));
		}
	}
	cc(e) {
		const t = this.ac.then((() => (this.rc = !0, e().catch(((e$1) => {
			this.nc = e$1, this.rc = !1;
			throw __PRIVATE_logError("INTERNAL UNHANDLED ERROR: ", __PRIVATE_getMessageOrStack(e$1)), e$1;
		})).then(((e$1) => (this.rc = !1, e$1))))));
		return this.ac = t, t;
	}
	enqueueAfterDelay(e, t, n) {
		this.uc(), this.oc.indexOf(e) > -1 && (t = 0);
		const r = DelayedOperation.createAndSchedule(this, e, t, n, ((e$1) => this.hc(e$1)));
		return this.tc.push(r), r;
	}
	uc() {
		this.nc && fail(47125, { Pc: __PRIVATE_getMessageOrStack(this.nc) });
	}
	verifyOperationInProgress() {}
	/**
	* Waits until all currently queued tasks are finished executing. Delayed
	* operations are not run.
	*/ async Tc() {
		let e;
		do
			e = this.ac, await e;
		while (e !== this.ac);
	}
	/**
	* For Tests: Determine if a delayed operation with a particular TimerId
	* exists.
	*/ Ic(e) {
		for (const t of this.tc) if (t.timerId === e) return !0;
		return !1;
	}
	/**
	* For Tests: Runs some or all delayed operations early.
	*
	* @param lastTimerId - Delayed operations up to and including this TimerId
	* will be drained. Pass TimerId.All to run all delayed operations.
	* @returns a Promise that resolves once all operations have been run.
	*/ Ec(e) {
		return this.Tc().then((() => {
			this.tc.sort(((e$1, t) => e$1.targetTimeMs - t.targetTimeMs));
			for (const t of this.tc) if (t.skipDelay(), "all" !== e && t.timerId === e) break;
			return this.Tc();
		}));
	}
	/**
	* For Tests: Skip all subsequent delays for a timer id.
	*/ dc(e) {
		this.oc.push(e);
	}
	/** Called once a DelayedOperation is run or canceled. */ hc(e) {
		const t = this.tc.indexOf(e);
		this.tc.splice(t, 1);
	}
};
/**
* Chrome includes Error.message in Error.stack. Other browsers do not.
* This returns expected output of message + stack when available.
* @param error - Error or FirestoreError
*/ function __PRIVATE_getMessageOrStack(e) {
	let t = e.message || "";
	return e.stack && (t = e.stack.includes(e.message) ? e.stack : e.message + "\n" + e.stack), t;
}
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ function __PRIVATE_isPartialObserver(e) {
	/**
	* Returns true if obj is an object and contains at least one of the specified
	* methods.
	*/
	return function __PRIVATE_implementsAnyMethods(e$1, t) {
		if ("object" != typeof e$1 || null === e$1) return !1;
		const n = e$1;
		for (const e$2 of t) if (e$2 in n && "function" == typeof n[e$2]) return !0;
		return !1;
	}(e, [
		"next",
		"error",
		"complete"
	]);
}
var LoadBundleTask = class {
	constructor() {
		this._progressObserver = {}, this._taskCompletionResolver = new __PRIVATE_Deferred(), this._lastProgress = {
			taskState: "Running",
			totalBytes: 0,
			totalDocuments: 0,
			bytesLoaded: 0,
			documentsLoaded: 0
		};
	}
	/**
	* Registers functions to listen to bundle loading progress events.
	* @param next - Called when there is a progress update from bundle loading. Typically `next` calls occur
	*   each time a Firestore document is loaded from the bundle.
	* @param error - Called when an error occurs during bundle loading. The task aborts after reporting the
	*   error, and there should be no more updates after this.
	* @param complete - Called when the loading task is complete.
	*/ onProgress(e, t, n) {
		this._progressObserver = {
			next: e,
			error: t,
			complete: n
		};
	}
	/**
	* Implements the `Promise<LoadBundleTaskProgress>.catch` interface.
	*
	* @param onRejected - Called when an error occurs during bundle loading.
	*/ catch(e) {
		return this._taskCompletionResolver.promise.catch(e);
	}
	/**
	* Implements the `Promise<LoadBundleTaskProgress>.then` interface.
	*
	* @param onFulfilled - Called on the completion of the loading task with a final `LoadBundleTaskProgress` update.
	*   The update will always have its `taskState` set to `"Success"`.
	* @param onRejected - Called when an error occurs during bundle loading.
	*/ then(e, t) {
		return this._taskCompletionResolver.promise.then(e, t);
	}
	/**
	* Notifies all observers that bundle loading has completed, with a provided
	* `LoadBundleTaskProgress` object.
	*
	* @private
	*/ _completeWith(e) {
		this._updateProgress(e), this._progressObserver.complete && this._progressObserver.complete(), this._taskCompletionResolver.resolve(e);
	}
	/**
	* Notifies all observers that bundle loading has failed, with a provided
	* `Error` as the reason.
	*
	* @private
	*/ _failWith(e) {
		this._lastProgress.taskState = "Error", this._progressObserver.next && this._progressObserver.next(this._lastProgress), this._progressObserver.error && this._progressObserver.error(e), this._taskCompletionResolver.reject(e);
	}
	/**
	* Notifies a progress update of loading a bundle.
	* @param progress - The new progress.
	*
	* @private
	*/ _updateProgress(e) {
		this._lastProgress = e, this._progressObserver.next && this._progressObserver.next(e);
	}
};
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Constant used to indicate the LRU garbage collection should be disabled.
* Set this value as the `cacheSizeBytes` on the settings passed to the
* {@link Firestore} instance.
*/ var ln = -1;
/**
* The Cloud Firestore service interface.
*
* Do not call this constructor directly. Instead, use {@link (getFirestore:1)}.
*/ var Firestore = class extends Firestore$1 {
	/** @hideconstructor */
	constructor(e, t, n, r) {
		super(e, t, n, r), this.type = "firestore", this._queue = new __PRIVATE_AsyncQueueImpl(), this._persistenceKey = r?.name || "[DEFAULT]";
	}
	async _terminate() {
		if (this._firestoreClient) {
			const e = this._firestoreClient.terminate();
			this._queue = new __PRIVATE_AsyncQueueImpl(e), this._firestoreClient = void 0, await e;
		}
	}
};
/**
* Initializes a new instance of {@link Firestore} with the provided settings.
* Can only be called before any other function, including
* {@link (getFirestore:1)}. If the custom settings are empty, this function is
* equivalent to calling {@link (getFirestore:1)}.
*
* @param app - The {@link @firebase/app#FirebaseApp} with which the {@link Firestore} instance will
* be associated.
* @param settings - A settings object to configure the {@link Firestore} instance.
* @param databaseId - The name of the database.
* @returns A newly initialized {@link Firestore} instance.
*/ function initializeFirestore(e, t, n) {
	n || (n = lt);
	const r = _getProvider(e, "firestore");
	if (r.isInitialized(n)) {
		const e$1 = r.getImmediate({ identifier: n }), i = r.getOptions(n);
		if (deepEqual(i, t)) return e$1;
		throw new FirestoreError(N.FAILED_PRECONDITION, "initializeFirestore() has already been called with different options. To avoid this error, call initializeFirestore() with the same options as when it was originally called, or call getFirestore() to return the already initialized instance.");
	}
	if (void 0 !== t.cacheSizeBytes && void 0 !== t.localCache) throw new FirestoreError(N.INVALID_ARGUMENT, "cache and cacheSizeBytes cannot be specified at the same time as cacheSizeBytes willbe deprecated. Instead, specify the cache size in the cache object");
	if (void 0 !== t.cacheSizeBytes && -1 !== t.cacheSizeBytes && t.cacheSizeBytes < Bt) throw new FirestoreError(N.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
	return t.host && isCloudWorkstation(t.host) && pingServer(t.host), r.initialize({
		options: t,
		instanceIdentifier: n
	});
}
function getFirestore(e, n) {
	const r = "object" == typeof e ? e : getApp(), i = "string" == typeof e ? e : n || lt, s = _getProvider(r, "firestore").getImmediate({ identifier: i });
	if (!s._initialized) {
		const e$1 = getDefaultEmulatorHostnameAndPort("firestore");
		e$1 && connectFirestoreEmulator(s, ...e$1);
	}
	return s;
}
/**
* @internal
*/ function ensureFirestoreConfigured(e) {
	if (e._terminated) throw new FirestoreError(N.FAILED_PRECONDITION, "The client has already been terminated.");
	return e._firestoreClient || __PRIVATE_configureFirestore(e), e._firestoreClient;
}
function __PRIVATE_configureFirestore(e) {
	const t = e._freezeSettings(), n = function __PRIVATE_makeDatabaseInfo(e$1, t$1, n$1, r) {
		return new DatabaseInfo(e$1, t$1, n$1, r.host, r.ssl, r.experimentalForceLongPolling, r.experimentalAutoDetectLongPolling, __PRIVATE_cloneLongPollingOptions(r.experimentalLongPollingOptions), r.useFetchStreams, r.isUsingEmulator);
	}(e._databaseId, e._app?.options.appId || "", e._persistenceKey, t);
	e._componentsProvider || t.localCache?._offlineComponentProvider && t.localCache?._onlineComponentProvider && (e._componentsProvider = {
		_offline: t.localCache._offlineComponentProvider,
		_online: t.localCache._onlineComponentProvider
	}), e._firestoreClient = new FirestoreClient(e._authCredentials, e._appCheckCredentials, e._queue, n, e._componentsProvider && function __PRIVATE_buildComponentProvider(e$1) {
		const t$1 = e$1?._online.build();
		return {
			_offline: e$1?._offline.build(t$1),
			_online: t$1
		};
	}(e._componentsProvider));
}
function enableIndexedDbPersistence(e, t) {
	__PRIVATE_logWarn("enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.");
	const n = e._freezeSettings();
	return __PRIVATE_setPersistenceProviders(e, OnlineComponentProvider.provider, { build: (e$1) => new __PRIVATE_IndexedDbOfflineComponentProvider(e$1, n.cacheSizeBytes, t?.forceOwnership) }), Promise.resolve();
}
/**
* Attempts to enable multi-tab persistent storage, if possible. If enabled
* across all tabs, all operations share access to local persistence, including
* shared execution of queries and latency-compensated local document updates
* across all connected instances.
*
* On failure, `enableMultiTabIndexedDbPersistence()` will reject the promise or
* throw an exception. There are several reasons why this can fail, which can be
* identified by the `code` on the error.
*
*   * failed-precondition: The app is already open in another browser tab and
*     multi-tab is not enabled.
*   * unimplemented: The browser is incompatible with the offline persistence
*     implementation.
*
* Note that even after a failure, the {@link Firestore} instance will remain
* usable, however offline persistence will be disabled.
*
* @param firestore - The {@link Firestore} instance to enable persistence for.
* @returns A `Promise` that represents successfully enabling persistent
* storage.
* @deprecated This function will be removed in a future major release. Instead, set
* `FirestoreSettings.localCache` to an instance of `PersistentLocalCache` to
* turn on indexeddb cache. Calling this function when `FirestoreSettings.localCache`
* is already specified will throw an exception.
*/ async function enableMultiTabIndexedDbPersistence(e) {
	__PRIVATE_logWarn("enableMultiTabIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.");
	const t = e._freezeSettings();
	__PRIVATE_setPersistenceProviders(e, OnlineComponentProvider.provider, { build: (e$1) => new __PRIVATE_MultiTabOfflineComponentProvider(e$1, t.cacheSizeBytes) });
}
/**
* Registers both the `OfflineComponentProvider` and `OnlineComponentProvider`.
* If the operation fails with a recoverable error (see
* `canRecoverFromIndexedDbError()` below), the returned Promise is rejected
* but the client remains usable.
*/ function __PRIVATE_setPersistenceProviders(e, t, n) {
	if ((e = __PRIVATE_cast(e, Firestore))._firestoreClient || e._terminated) throw new FirestoreError(N.FAILED_PRECONDITION, "Firestore has already been started and persistence can no longer be enabled. You can only enable persistence before calling any other methods on a Firestore object.");
	if (e._componentsProvider || e._getSettings().localCache) throw new FirestoreError(N.FAILED_PRECONDITION, "SDK cache is already specified.");
	e._componentsProvider = {
		_online: t,
		_offline: n
	}, __PRIVATE_configureFirestore(e);
}
/**
* Clears the persistent storage. This includes pending writes and cached
* documents.
*
* Must be called while the {@link Firestore} instance is not started (after the app is
* terminated or when the app is first initialized). On startup, this function
* must be called before other functions (other than {@link
* initializeFirestore} or {@link (getFirestore:1)})). If the {@link Firestore}
* instance is still running, the promise will be rejected with the error code
* of `failed-precondition`.
*
* Note: `clearIndexedDbPersistence()` is primarily intended to help write
* reliable tests that use Cloud Firestore. It uses an efficient mechanism for
* dropping existing data but does not attempt to securely overwrite or
* otherwise make cached data unrecoverable. For applications that are sensitive
* to the disclosure of cached data in between user sessions, we strongly
* recommend not enabling persistence at all.
*
* @param firestore - The {@link Firestore} instance to clear persistence for.
* @returns A `Promise` that is resolved when the persistent storage is
* cleared. Otherwise, the promise is rejected with an error.
*/ function clearIndexedDbPersistence(e) {
	if (e._initialized && !e._terminated) throw new FirestoreError(N.FAILED_PRECONDITION, "Persistence can only be cleared before a Firestore instance is initialized or after it is terminated.");
	const t = new __PRIVATE_Deferred();
	return e._queue.enqueueAndForgetEvenWhileRestricted((async () => {
		try {
			await async function __PRIVATE_indexedDbClearPersistence(e$1) {
				if (!__PRIVATE_SimpleDb.v()) return Promise.resolve();
				const t$1 = e$1 + $t;
				await __PRIVATE_SimpleDb.delete(t$1);
			}(__PRIVATE_indexedDbStoragePrefix(e._databaseId, e._persistenceKey)), t.resolve();
		} catch (e$1) {
			t.reject(e$1);
		}
	})), t.promise;
}
/**
* Waits until all currently pending writes for the active user have been
* acknowledged by the backend.
*
* The returned promise resolves immediately if there are no outstanding writes.
* Otherwise, the promise waits for all previously issued writes (including
* those written in a previous app session), but it does not wait for writes
* that were added after the function is called. If you want to wait for
* additional writes, call `waitForPendingWrites()` again.
*
* Any outstanding `waitForPendingWrites()` promises are rejected during user
* changes.
*
* @returns A `Promise` which resolves when all currently pending writes have been
* acknowledged by the backend.
*/ function waitForPendingWrites(e) {
	return function __PRIVATE_firestoreClientWaitForPendingWrites(e$1) {
		const t = new __PRIVATE_Deferred();
		return e$1.asyncQueue.enqueueAndForget((async () => __PRIVATE_syncEngineRegisterPendingWritesCallback(await __PRIVATE_getSyncEngine(e$1), t))), t.promise;
	}(ensureFirestoreConfigured(e = __PRIVATE_cast(e, Firestore)));
}
/**
* Re-enables use of the network for this {@link Firestore} instance after a prior
* call to {@link disableNetwork}.
*
* @returns A `Promise` that is resolved once the network has been enabled.
*/ function enableNetwork(e) {
	return __PRIVATE_firestoreClientEnableNetwork(ensureFirestoreConfigured(e = __PRIVATE_cast(e, Firestore)));
}
/**
* Disables network usage for this instance. It can be re-enabled via {@link
* enableNetwork}. While the network is disabled, any snapshot listeners,
* `getDoc()` or `getDocs()` calls will return results from cache, and any write
* operations will be queued until the network is restored.
*
* @returns A `Promise` that is resolved once the network has been disabled.
*/ function disableNetwork(e) {
	return __PRIVATE_firestoreClientDisableNetwork(ensureFirestoreConfigured(e = __PRIVATE_cast(e, Firestore)));
}
/**
* Terminates the provided {@link Firestore} instance.
*
* After calling `terminate()` only the `clearIndexedDbPersistence()` function
* may be used. Any other function will throw a `FirestoreError`.
*
* To restart after termination, create a new instance of FirebaseFirestore with
* {@link (getFirestore:1)}.
*
* Termination does not cancel any pending writes, and any promises that are
* awaiting a response from the server will not be resolved. If you have
* persistence enabled, the next time you start this instance, it will resume
* sending these writes to the server.
*
* Note: Under normal circumstances, calling `terminate()` is not required. This
* function is useful only when you want to force this instance to release all
* of its resources or in combination with `clearIndexedDbPersistence()` to
* ensure that all local state is destroyed between test runs.
*
* @returns A `Promise` that is resolved when the instance has been successfully
* terminated.
*/ function terminate(e) {
	return _removeServiceInstance(e.app, "firestore", e._databaseId.database), e._delete();
}
/**
* Loads a Firestore bundle into the local cache.
*
* @param firestore - The {@link Firestore} instance to load bundles for.
* @param bundleData - An object representing the bundle to be loaded. Valid
* objects are `ArrayBuffer`, `ReadableStream<Uint8Array>` or `string`.
*
* @returns A `LoadBundleTask` object, which notifies callers with progress
* updates, and completion or error events. It can be used as a
* `Promise<LoadBundleTaskProgress>`.
*/ function loadBundle(e, t) {
	const n = ensureFirestoreConfigured(e = __PRIVATE_cast(e, Firestore)), r = new LoadBundleTask();
	return __PRIVATE_firestoreClientLoadBundle(n, e._databaseId, t, r), r;
}
/**
* Reads a Firestore {@link Query} from local cache, identified by the given
* name.
*
* The named queries are packaged  into bundles on the server side (along
* with resulting documents), and loaded to local cache using `loadBundle`. Once
* in local cache, use this method to extract a {@link Query} by name.
*
* @param firestore - The {@link Firestore} instance to read the query from.
* @param name - The name of the query.
* @returns A `Promise` that is resolved with the Query or `null`.
*/ function namedQuery(e, t) {
	return __PRIVATE_firestoreClientGetNamedQuery(ensureFirestoreConfigured(e = __PRIVATE_cast(e, Firestore)), t).then(((t$1) => t$1 ? new Query(e, null, t$1.query) : null));
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* @license
* Copyright 2022 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Represents an aggregation that can be performed by Firestore.
*/
var AggregateField = class {
	/**
	* Create a new AggregateField<T>
	* @param aggregateType Specifies the type of aggregation operation to perform.
	* @param _internalFieldPath Optionally specifies the field that is aggregated.
	* @internal
	*/
	constructor(e = "count", t) {
		this._internalFieldPath = t, this.type = "AggregateField", this.aggregateType = e;
	}
};
/**
* The results of executing an aggregation query.
*/ var AggregateQuerySnapshot = class {
	/** @hideconstructor */
	constructor(e, t, n) {
		this._userDataWriter = t, this._data = n, this.type = "AggregateQuerySnapshot", this.query = e;
	}
	/**
	* Returns the results of the aggregations performed over the underlying
	* query.
	*
	* The keys of the returned object will be the same as those of the
	* `AggregateSpec` object specified to the aggregation method, and the values
	* will be the corresponding aggregation result.
	*
	* @returns The results of the aggregations performed over the underlying
	* query.
	*/ data() {
		return this._userDataWriter.convertObjectMap(this._data);
	}
};
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* An immutable object representing an array of bytes.
*/ var Bytes = class Bytes {
	/** @hideconstructor */
	constructor(e) {
		this._byteString = e;
	}
	/**
	* Creates a new `Bytes` object from the given Base64 string, converting it to
	* bytes.
	*
	* @param base64 - The Base64 string used to create the `Bytes` object.
	*/ static fromBase64String(e) {
		try {
			return new Bytes(ByteString.fromBase64String(e));
		} catch (e$1) {
			throw new FirestoreError(N.INVALID_ARGUMENT, "Failed to construct data from Base64 string: " + e$1);
		}
	}
	/**
	* Creates a new `Bytes` object from the given Uint8Array.
	*
	* @param array - The Uint8Array used to create the `Bytes` object.
	*/ static fromUint8Array(e) {
		return new Bytes(ByteString.fromUint8Array(e));
	}
	/**
	* Returns the underlying bytes as a Base64-encoded string.
	*
	* @returns The Base64-encoded string created from the `Bytes` object.
	*/ toBase64() {
		return this._byteString.toBase64();
	}
	/**
	* Returns the underlying bytes in a new `Uint8Array`.
	*
	* @returns The Uint8Array created from the `Bytes` object.
	*/ toUint8Array() {
		return this._byteString.toUint8Array();
	}
	/**
	* Returns a string representation of the `Bytes` object.
	*
	* @returns A string representation of the `Bytes` object.
	*/ toString() {
		return "Bytes(base64: " + this.toBase64() + ")";
	}
	/**
	* Returns true if this `Bytes` object is equal to the provided one.
	*
	* @param other - The `Bytes` object to compare against.
	* @returns true if this `Bytes` object is equal to the provided one.
	*/ isEqual(e) {
		return this._byteString.isEqual(e._byteString);
	}
	/**
	* Returns a JSON-serializable representation of this `Bytes` instance.
	*
	* @returns a JSON representation of this object.
	*/ toJSON() {
		return {
			type: Bytes._jsonSchemaVersion,
			bytes: this.toBase64()
		};
	}
	/**
	* Builds a `Bytes` instance from a JSON object created by {@link Bytes.toJSON}.
	*
	* @param json a JSON object represention of a `Bytes` instance
	* @returns an instance of {@link Bytes} if the JSON object could be parsed. Throws a
	* {@link FirestoreError} if an error occurs.
	*/ static fromJSON(e) {
		if (__PRIVATE_validateJSON(e, Bytes._jsonSchema)) return Bytes.fromBase64String(e.bytes);
	}
};
Bytes._jsonSchemaVersion = "firestore/bytes/1.0", Bytes._jsonSchema = {
	type: property("string", Bytes._jsonSchemaVersion),
	bytes: property("string")
};
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* A `FieldPath` refers to a field in a document. The path may consist of a
* single field name (referring to a top-level field in the document), or a
* list of field names (referring to a nested field in the document).
*
* Create a `FieldPath` by providing field names. If more than one field
* name is provided, the path will point to a nested field in a document.
*/
var FieldPath = class {
	/**
	* Creates a `FieldPath` from the provided field names. If more than one field
	* name is provided, the path will point to a nested field in a document.
	*
	* @param fieldNames - A list of field names.
	*/
	constructor(...e) {
		for (let t = 0; t < e.length; ++t) if (0 === e[t].length) throw new FirestoreError(N.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). Field names must not be empty.");
		this._internalPath = new FieldPath$1(e);
	}
	/**
	* Returns true if this `FieldPath` is equal to the provided one.
	*
	* @param other - The `FieldPath` to compare against.
	* @returns true if this `FieldPath` is equal to the provided one.
	*/ isEqual(e) {
		return this._internalPath.isEqual(e._internalPath);
	}
};
/**
* Returns a special sentinel `FieldPath` to refer to the ID of a document.
* It can be used in queries to sort or filter by the document ID.
*/ function documentId() {
	return new FieldPath(k);
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Sentinel values that can be used when writing document fields with `set()`
* or `update()`.
*/ var FieldValue = class {
	/**
	* @param _methodName - The public API endpoint that returns this class.
	* @hideconstructor
	*/
	constructor(e) {
		this._methodName = e;
	}
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* An immutable object representing a geographic location in Firestore. The
* location is represented as latitude/longitude pair.
*
* Latitude values are in the range of [-90, 90].
* Longitude values are in the range of [-180, 180].
*/ var GeoPoint = class GeoPoint {
	/**
	* Creates a new immutable `GeoPoint` object with the provided latitude and
	* longitude values.
	* @param latitude - The latitude as number between -90 and 90.
	* @param longitude - The longitude as number between -180 and 180.
	*/
	constructor(e, t) {
		if (!isFinite(e) || e < -90 || e > 90) throw new FirestoreError(N.INVALID_ARGUMENT, "Latitude must be a number between -90 and 90, but was: " + e);
		if (!isFinite(t) || t < -180 || t > 180) throw new FirestoreError(N.INVALID_ARGUMENT, "Longitude must be a number between -180 and 180, but was: " + t);
		this._lat = e, this._long = t;
	}
	/**
	* The latitude of this `GeoPoint` instance.
	*/ get latitude() {
		return this._lat;
	}
	/**
	* The longitude of this `GeoPoint` instance.
	*/ get longitude() {
		return this._long;
	}
	/**
	* Returns true if this `GeoPoint` is equal to the provided one.
	*
	* @param other - The `GeoPoint` to compare against.
	* @returns true if this `GeoPoint` is equal to the provided one.
	*/ isEqual(e) {
		return this._lat === e._lat && this._long === e._long;
	}
	/**
	* Actually private to JS consumers of our API, so this function is prefixed
	* with an underscore.
	*/ _compareTo(e) {
		return __PRIVATE_primitiveComparator(this._lat, e._lat) || __PRIVATE_primitiveComparator(this._long, e._long);
	}
	/**
	* Returns a JSON-serializable representation of this `GeoPoint` instance.
	*
	* @returns a JSON representation of this object.
	*/ toJSON() {
		return {
			latitude: this._lat,
			longitude: this._long,
			type: GeoPoint._jsonSchemaVersion
		};
	}
	/**
	* Builds a `GeoPoint` instance from a JSON object created by {@link GeoPoint.toJSON}.
	*
	* @param json a JSON object represention of a `GeoPoint` instance
	* @returns an instance of {@link GeoPoint} if the JSON object could be parsed. Throws a
	* {@link FirestoreError} if an error occurs.
	*/ static fromJSON(e) {
		if (__PRIVATE_validateJSON(e, GeoPoint._jsonSchema)) return new GeoPoint(e.latitude, e.longitude);
	}
};
GeoPoint._jsonSchemaVersion = "firestore/geoPoint/1.0", GeoPoint._jsonSchema = {
	type: property("string", GeoPoint._jsonSchemaVersion),
	latitude: property("number"),
	longitude: property("number")
};
/**
* @license
* Copyright 2024 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Represents a vector type in Firestore documents.
* Create an instance with <code>{@link vector}</code>.
*
* @class VectorValue
*/
var VectorValue = class VectorValue {
	/**
	* @private
	* @internal
	*/
	constructor(e) {
		this._values = (e || []).map(((e$1) => e$1));
	}
	/**
	* Returns a copy of the raw number array form of the vector.
	*/ toArray() {
		return this._values.map(((e) => e));
	}
	/**
	* Returns `true` if the two `VectorValue` values have the same raw number arrays, returns `false` otherwise.
	*/ isEqual(e) {
		return function __PRIVATE_isPrimitiveArrayEqual(e$1, t) {
			if (e$1.length !== t.length) return !1;
			for (let n = 0; n < e$1.length; ++n) if (e$1[n] !== t[n]) return !1;
			return !0;
		}(this._values, e._values);
	}
	/**
	* Returns a JSON-serializable representation of this `VectorValue` instance.
	*
	* @returns a JSON representation of this object.
	*/ toJSON() {
		return {
			type: VectorValue._jsonSchemaVersion,
			vectorValues: this._values
		};
	}
	/**
	* Builds a `VectorValue` instance from a JSON object created by {@link VectorValue.toJSON}.
	*
	* @param json a JSON object represention of a `VectorValue` instance.
	* @returns an instance of {@link VectorValue} if the JSON object could be parsed. Throws a
	* {@link FirestoreError} if an error occurs.
	*/ static fromJSON(e) {
		if (__PRIVATE_validateJSON(e, VectorValue._jsonSchema)) {
			if (Array.isArray(e.vectorValues) && e.vectorValues.every(((e$1) => "number" == typeof e$1))) return new VectorValue(e.vectorValues);
			throw new FirestoreError(N.INVALID_ARGUMENT, "Expected 'vectorValues' field to be a number array");
		}
	}
};
VectorValue._jsonSchemaVersion = "firestore/vectorValue/1.0", VectorValue._jsonSchema = {
	type: property("string", VectorValue._jsonSchemaVersion),
	vectorValues: property("object")
};
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var hn = /^__.*__$/;
/** The result of parsing document data (e.g. for a setData call). */ var ParsedSetData = class {
	constructor(e, t, n) {
		this.data = e, this.fieldMask = t, this.fieldTransforms = n;
	}
	toMutation(e, t) {
		return null !== this.fieldMask ? new __PRIVATE_PatchMutation(e, this.data, this.fieldMask, t, this.fieldTransforms) : new __PRIVATE_SetMutation(e, this.data, t, this.fieldTransforms);
	}
};
/** The result of parsing "update" data (i.e. for an updateData call). */ var ParsedUpdateData = class {
	constructor(e, t, n) {
		this.data = e, this.fieldMask = t, this.fieldTransforms = n;
	}
	toMutation(e, t) {
		return new __PRIVATE_PatchMutation(e, this.data, this.fieldMask, t, this.fieldTransforms);
	}
};
function __PRIVATE_isWrite(e) {
	switch (e) {
		case 0:
		case 2:
		case 1: return !0;
		case 3:
		case 4: return !1;
		default: throw fail(40011, { Ac: e });
	}
}
/** A "context" object passed around while parsing user data. */ var __PRIVATE_ParseContextImpl = class __PRIVATE_ParseContextImpl {
	/**
	* Initializes a ParseContext with the given source and path.
	*
	* @param settings - The settings for the parser.
	* @param databaseId - The database ID of the Firestore instance.
	* @param serializer - The serializer to use to generate the Value proto.
	* @param ignoreUndefinedProperties - Whether to ignore undefined properties
	* rather than throw.
	* @param fieldTransforms - A mutable list of field transforms encountered
	* while parsing the data.
	* @param fieldMask - A mutable list of field paths encountered while parsing
	* the data.
	*
	* TODO(b/34871131): We don't support array paths right now, so path can be
	* null to indicate the context represents any location within an array (in
	* which case certain features will not work and errors will be somewhat
	* compromised).
	*/
	constructor(e, t, n, r, i, s) {
		this.settings = e, this.databaseId = t, this.serializer = n, this.ignoreUndefinedProperties = r, void 0 === i && this.Rc(), this.fieldTransforms = i || [], this.fieldMask = s || [];
	}
	get path() {
		return this.settings.path;
	}
	get Ac() {
		return this.settings.Ac;
	}
	/** Returns a new context with the specified settings overwritten. */ Vc(e) {
		return new __PRIVATE_ParseContextImpl({
			...this.settings,
			...e
		}, this.databaseId, this.serializer, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);
	}
	mc(e) {
		const t = this.path?.child(e), n = this.Vc({
			path: t,
			fc: !1
		});
		return n.gc(e), n;
	}
	yc(e) {
		const t = this.path?.child(e), n = this.Vc({
			path: t,
			fc: !1
		});
		return n.Rc(), n;
	}
	wc(e) {
		return this.Vc({
			path: void 0,
			fc: !0
		});
	}
	Sc(e) {
		return __PRIVATE_createError(e, this.settings.methodName, this.settings.bc || !1, this.path, this.settings.Dc);
	}
	/** Returns 'true' if 'fieldPath' was traversed when creating this context. */ contains(e) {
		return void 0 !== this.fieldMask.find(((t) => e.isPrefixOf(t))) || void 0 !== this.fieldTransforms.find(((t) => e.isPrefixOf(t.field)));
	}
	Rc() {
		if (this.path) for (let e = 0; e < this.path.length; e++) this.gc(this.path.get(e));
	}
	gc(e) {
		if (0 === e.length) throw this.Sc("Document fields must not be empty");
		if (__PRIVATE_isWrite(this.Ac) && hn.test(e)) throw this.Sc("Document fields cannot begin and end with \"__\"");
	}
};
/**
* Helper for parsing raw user input (provided via the API) into internal model
* classes.
*/ var __PRIVATE_UserDataReader = class {
	constructor(e, t, n) {
		this.databaseId = e, this.ignoreUndefinedProperties = t, this.serializer = n || __PRIVATE_newSerializer(e);
	}
	/** Creates a new top-level parse context. */ Cc(e, t, n, r = !1) {
		return new __PRIVATE_ParseContextImpl({
			Ac: e,
			methodName: t,
			Dc: n,
			path: FieldPath$1.emptyPath(),
			fc: !1,
			bc: r
		}, this.databaseId, this.serializer, this.ignoreUndefinedProperties);
	}
};
function __PRIVATE_newUserDataReader(e) {
	const t = e._freezeSettings(), n = __PRIVATE_newSerializer(e._databaseId);
	return new __PRIVATE_UserDataReader(e._databaseId, !!t.ignoreUndefinedProperties, n);
}
/** Parse document data from a set() call. */ function __PRIVATE_parseSetData(e, t, n, r, i, s = {}) {
	const o = e.Cc(s.merge || s.mergeFields ? 2 : 0, t, n, i);
	__PRIVATE_validatePlainObject("Data must be an object, but it was:", o, r);
	const _ = __PRIVATE_parseObject(r, o);
	let a, u;
	if (s.merge) a = new FieldMask(o.fieldMask), u = o.fieldTransforms;
	else if (s.mergeFields) {
		const e$1 = [];
		for (const r$1 of s.mergeFields) {
			const i$1 = __PRIVATE_fieldPathFromArgument$1(t, r$1, n);
			if (!o.contains(i$1)) throw new FirestoreError(N.INVALID_ARGUMENT, `Field '${i$1}' is specified in your field mask but missing from your input data.`);
			__PRIVATE_fieldMaskContains(e$1, i$1) || e$1.push(i$1);
		}
		a = new FieldMask(e$1), u = o.fieldTransforms.filter(((e$2) => a.covers(e$2.field)));
	} else a = null, u = o.fieldTransforms;
	return new ParsedSetData(new ObjectValue(_), a, u);
}
var __PRIVATE_DeleteFieldValueImpl = class __PRIVATE_DeleteFieldValueImpl extends FieldValue {
	_toFieldTransform(e) {
		if (2 !== e.Ac) throw 1 === e.Ac ? e.Sc(`${this._methodName}() can only appear at the top level of your update data`) : e.Sc(`${this._methodName}() cannot be used with set() unless you pass {merge:true}`);
		return e.fieldMask.push(e.path), null;
	}
	isEqual(e) {
		return e instanceof __PRIVATE_DeleteFieldValueImpl;
	}
};
/**
* Creates a child context for parsing SerializableFieldValues.
*
* This is different than calling `ParseContext.contextWith` because it keeps
* the fieldTransforms and fieldMask separate.
*
* The created context has its `dataSource` set to `UserDataSource.Argument`.
* Although these values are used with writes, any elements in these FieldValues
* are not considered writes since they cannot contain any FieldValue sentinels,
* etc.
*
* @param fieldValue - The sentinel FieldValue for which to create a child
*     context.
* @param context - The parent context.
* @param arrayElement - Whether or not the FieldValue has an array.
*/ function __PRIVATE_createSentinelChildContext(e, t, n) {
	return new __PRIVATE_ParseContextImpl({
		Ac: 3,
		Dc: t.settings.Dc,
		methodName: e._methodName,
		fc: n
	}, t.databaseId, t.serializer, t.ignoreUndefinedProperties);
}
var __PRIVATE_ServerTimestampFieldValueImpl = class __PRIVATE_ServerTimestampFieldValueImpl extends FieldValue {
	_toFieldTransform(e) {
		return new FieldTransform(e.path, new __PRIVATE_ServerTimestampTransform());
	}
	isEqual(e) {
		return e instanceof __PRIVATE_ServerTimestampFieldValueImpl;
	}
};
var __PRIVATE_ArrayUnionFieldValueImpl = class __PRIVATE_ArrayUnionFieldValueImpl extends FieldValue {
	constructor(e, t) {
		super(e), this.vc = t;
	}
	_toFieldTransform(e) {
		const t = __PRIVATE_createSentinelChildContext(this, e, !0), n = this.vc.map(((e$1) => __PRIVATE_parseData(e$1, t))), r = new __PRIVATE_ArrayUnionTransformOperation(n);
		return new FieldTransform(e.path, r);
	}
	isEqual(e) {
		return e instanceof __PRIVATE_ArrayUnionFieldValueImpl && deepEqual(this.vc, e.vc);
	}
};
var __PRIVATE_ArrayRemoveFieldValueImpl = class __PRIVATE_ArrayRemoveFieldValueImpl extends FieldValue {
	constructor(e, t) {
		super(e), this.vc = t;
	}
	_toFieldTransform(e) {
		const t = __PRIVATE_createSentinelChildContext(this, e, !0), n = this.vc.map(((e$1) => __PRIVATE_parseData(e$1, t))), r = new __PRIVATE_ArrayRemoveTransformOperation(n);
		return new FieldTransform(e.path, r);
	}
	isEqual(e) {
		return e instanceof __PRIVATE_ArrayRemoveFieldValueImpl && deepEqual(this.vc, e.vc);
	}
};
var __PRIVATE_NumericIncrementFieldValueImpl = class __PRIVATE_NumericIncrementFieldValueImpl extends FieldValue {
	constructor(e, t) {
		super(e), this.Fc = t;
	}
	_toFieldTransform(e) {
		const t = new __PRIVATE_NumericIncrementTransformOperation(e.serializer, toNumber(e.serializer, this.Fc));
		return new FieldTransform(e.path, t);
	}
	isEqual(e) {
		return e instanceof __PRIVATE_NumericIncrementFieldValueImpl && this.Fc === e.Fc;
	}
};
/** Parse update data from an update() call. */ function __PRIVATE_parseUpdateData(e, t, n, r) {
	const i = e.Cc(1, t, n);
	__PRIVATE_validatePlainObject("Data must be an object, but it was:", i, r);
	const s = [], o = ObjectValue.empty();
	forEach(r, ((e$1, r$1) => {
		const _$1 = __PRIVATE_fieldPathFromDotSeparatedString(t, e$1, n);
		r$1 = getModularInstance(r$1);
		const a = i.yc(_$1);
		if (r$1 instanceof __PRIVATE_DeleteFieldValueImpl) s.push(_$1);
		else {
			const e$2 = __PRIVATE_parseData(r$1, a);
			null != e$2 && (s.push(_$1), o.set(_$1, e$2));
		}
	}));
	const _ = new FieldMask(s);
	return new ParsedUpdateData(o, _, i.fieldTransforms);
}
/** Parse update data from a list of field/value arguments. */ function __PRIVATE_parseUpdateVarargs(e, t, n, r, i, s) {
	const o = e.Cc(1, t, n), _ = [__PRIVATE_fieldPathFromArgument$1(t, r, n)], a = [i];
	if (s.length % 2 != 0) throw new FirestoreError(N.INVALID_ARGUMENT, `Function ${t}() needs to be called with an even number of arguments that alternate between field names and values.`);
	for (let e$1 = 0; e$1 < s.length; e$1 += 2) _.push(__PRIVATE_fieldPathFromArgument$1(t, s[e$1])), a.push(s[e$1 + 1]);
	const u = [], c = ObjectValue.empty();
	for (let e$1 = _.length - 1; e$1 >= 0; --e$1) if (!__PRIVATE_fieldMaskContains(u, _[e$1])) {
		const t$1 = _[e$1];
		let n$1 = a[e$1];
		n$1 = getModularInstance(n$1);
		const r$1 = o.yc(t$1);
		if (n$1 instanceof __PRIVATE_DeleteFieldValueImpl) u.push(t$1);
		else {
			const e$2 = __PRIVATE_parseData(n$1, r$1);
			null != e$2 && (u.push(t$1), c.set(t$1, e$2));
		}
	}
	const l = new FieldMask(u);
	return new ParsedUpdateData(c, l, o.fieldTransforms);
}
/**
* Parse a "query value" (e.g. value in a where filter or a value in a cursor
* bound).
*
* @param allowArrays - Whether the query value is an array that may directly
* contain additional arrays (e.g. the operand of an `in` query).
*/ function __PRIVATE_parseQueryValue(e, t, n, r = !1) {
	return __PRIVATE_parseData(n, e.Cc(r ? 4 : 3, t));
}
/**
* Parses user data to Protobuf Values.
*
* @param input - Data to be parsed.
* @param context - A context object representing the current path being parsed,
* the source of the data being parsed, etc.
* @returns The parsed value, or null if the value was a FieldValue sentinel
* that should not be included in the resulting parsed data.
*/ function __PRIVATE_parseData(e, t) {
	if (__PRIVATE_looksLikeJsonObject(e = getModularInstance(e))) return __PRIVATE_validatePlainObject("Unsupported field value:", t, e), __PRIVATE_parseObject(e, t);
	if (e instanceof FieldValue)
 /**
	* "Parses" the provided FieldValueImpl, adding any necessary transforms to
	* context.fieldTransforms.
	*/
	return function __PRIVATE_parseSentinelFieldValue(e$1, t$1) {
		if (!__PRIVATE_isWrite(t$1.Ac)) throw t$1.Sc(`${e$1._methodName}() can only be used with update() and set()`);
		if (!t$1.path) throw t$1.Sc(`${e$1._methodName}() is not currently supported inside arrays`);
		const n = e$1._toFieldTransform(t$1);
		n && t$1.fieldTransforms.push(n);
	}(e, t), null;
	if (void 0 === e && t.ignoreUndefinedProperties) return null;
	if (t.path && t.fieldMask.push(t.path), e instanceof Array) {
		if (t.settings.fc && 4 !== t.Ac) throw t.Sc("Nested arrays are not supported");
		return function __PRIVATE_parseArray(e$1, t$1) {
			const n = [];
			let r = 0;
			for (const i of e$1) {
				let e$2 = __PRIVATE_parseData(i, t$1.wc(r));
				e$2 ??= { nullValue: "NULL_VALUE" }, n.push(e$2), r++;
			}
			return { arrayValue: { values: n } };
		}(e, t);
	}
	return function __PRIVATE_parseScalarValue(e$1, t$1) {
		if (null === (e$1 = getModularInstance(e$1))) return { nullValue: "NULL_VALUE" };
		if ("number" == typeof e$1) return toNumber(t$1.serializer, e$1);
		if ("boolean" == typeof e$1) return { booleanValue: e$1 };
		if ("string" == typeof e$1) return { stringValue: e$1 };
		if (e$1 instanceof Date) {
			const n = Timestamp.fromDate(e$1);
			return { timestampValue: toTimestamp(t$1.serializer, n) };
		}
		if (e$1 instanceof Timestamp) {
			const n = new Timestamp(e$1.seconds, 1e3 * Math.floor(e$1.nanoseconds / 1e3));
			return { timestampValue: toTimestamp(t$1.serializer, n) };
		}
		if (e$1 instanceof GeoPoint) return { geoPointValue: {
			latitude: e$1.latitude,
			longitude: e$1.longitude
		} };
		if (e$1 instanceof Bytes) return { bytesValue: __PRIVATE_toBytes(t$1.serializer, e$1._byteString) };
		if (e$1 instanceof DocumentReference) {
			const n = t$1.databaseId, r = e$1.firestore._databaseId;
			if (!r.isEqual(n)) throw t$1.Sc(`Document reference is for database ${r.projectId}/${r.database} but should be for database ${n.projectId}/${n.database}`);
			return { referenceValue: __PRIVATE_toResourceName(e$1.firestore._databaseId || t$1.databaseId, e$1._key.path) };
		}
		if (e$1 instanceof VectorValue)
 /**
		* Creates a new VectorValue proto value (using the internal format).
		*/
		return function __PRIVATE_parseVectorValue(e$2, t$2) {
			return { mapValue: { fields: {
				[ht]: { stringValue: It },
				[Et]: { arrayValue: { values: e$2.toArray().map(((e$3) => {
					if ("number" != typeof e$3) throw t$2.Sc("VectorValues must only contain numeric values.");
					return __PRIVATE_toDouble(t$2.serializer, e$3);
				})) } }
			} } };
		}(e$1, t$1);
		throw t$1.Sc(`Unsupported field value: ${__PRIVATE_valueDescription(e$1)}`);
	}(e, t);
}
function __PRIVATE_parseObject(e, t) {
	const n = {};
	return isEmpty(e) ? t.path && t.path.length > 0 && t.fieldMask.push(t.path) : forEach(e, ((e$1, r) => {
		const i = __PRIVATE_parseData(r, t.mc(e$1));
		null != i && (n[e$1] = i);
	})), { mapValue: { fields: n } };
}
function __PRIVATE_looksLikeJsonObject(e) {
	return !("object" != typeof e || null === e || e instanceof Array || e instanceof Date || e instanceof Timestamp || e instanceof GeoPoint || e instanceof Bytes || e instanceof DocumentReference || e instanceof FieldValue || e instanceof VectorValue);
}
function __PRIVATE_validatePlainObject(e, t, n) {
	if (!__PRIVATE_looksLikeJsonObject(n) || !__PRIVATE_isPlainObject(n)) {
		const r = __PRIVATE_valueDescription(n);
		throw "an object" === r ? t.Sc(e + " a custom object") : t.Sc(e + " " + r);
	}
}
/**
* Helper that calls fromDotSeparatedString() but wraps any error thrown.
*/ function __PRIVATE_fieldPathFromArgument$1(e, t, n) {
	if ((t = getModularInstance(t)) instanceof FieldPath) return t._internalPath;
	if ("string" == typeof t) return __PRIVATE_fieldPathFromDotSeparatedString(e, t);
	throw __PRIVATE_createError("Field path arguments must be of type string or ", e, !1, void 0, n);
}
/**
* Matches any characters in a field path string that are reserved.
*/ var Pn = /* @__PURE__ */ new RegExp("[~\\*/\\[\\]]");
/**
* Wraps fromDotSeparatedString with an error message about the method that
* was thrown.
* @param methodName - The publicly visible method name
* @param path - The dot-separated string form of a field path which will be
* split on dots.
* @param targetDoc - The document against which the field path will be
* evaluated.
*/ function __PRIVATE_fieldPathFromDotSeparatedString(e, t, n) {
	if (t.search(Pn) >= 0) throw __PRIVATE_createError(`Invalid field path (${t}). Paths must not contain '~', '*', '/', '[', or ']'`, e, !1, void 0, n);
	try {
		return new FieldPath(...t.split("."))._internalPath;
	} catch (r) {
		throw __PRIVATE_createError(`Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`, e, !1, void 0, n);
	}
}
function __PRIVATE_createError(e, t, n, r, i) {
	const s = r && !r.isEmpty(), o = void 0 !== i;
	let _ = `Function ${t}() called with invalid data`;
	n && (_ += " (via `toFirestore()`)"), _ += ". ";
	let a = "";
	return (s || o) && (a += " (found", s && (a += ` in field ${r}`), o && (a += ` in document ${i}`), a += ")"), new FirestoreError(N.INVALID_ARGUMENT, _ + e + a);
}
/** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */ function __PRIVATE_fieldMaskContains(e, t) {
	return e.some(((e$1) => e$1.isEqual(t)));
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* A `DocumentSnapshot` contains data read from a document in your Firestore
* database. The data can be extracted with `.data()` or `.get(<field>)` to
* get a specific field.
*
* For a `DocumentSnapshot` that points to a non-existing document, any data
* access will return 'undefined'. You can use the `exists()` method to
* explicitly verify a document's existence.
*/ var DocumentSnapshot$1 = class {
	/** @hideconstructor protected */
	constructor(e, t, n, r, i) {
		this._firestore = e, this._userDataWriter = t, this._key = n, this._document = r, this._converter = i;
	}
	/** Property of the `DocumentSnapshot` that provides the document's ID. */ get id() {
		return this._key.path.lastSegment();
	}
	/**
	* The `DocumentReference` for the document included in the `DocumentSnapshot`.
	*/ get ref() {
		return new DocumentReference(this._firestore, this._converter, this._key);
	}
	/**
	* Signals whether or not the document at the snapshot's location exists.
	*
	* @returns true if the document exists.
	*/ exists() {
		return null !== this._document;
	}
	/**
	* Retrieves all fields in the document as an `Object`. Returns `undefined` if
	* the document doesn't exist.
	*
	* @returns An `Object` containing all fields in the document or `undefined`
	* if the document doesn't exist.
	*/ data() {
		if (this._document) {
			if (this._converter) {
				const e = new QueryDocumentSnapshot$1(this._firestore, this._userDataWriter, this._key, this._document, null);
				return this._converter.fromFirestore(e);
			}
			return this._userDataWriter.convertValue(this._document.data.value);
		}
	}
	/**
	* Retrieves the field specified by `fieldPath`. Returns `undefined` if the
	* document or field doesn't exist.
	*
	* @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
	* field.
	* @returns The data at the specified field location or undefined if no such
	* field exists in the document.
	*/
	get(e) {
		if (this._document) {
			const t = this._document.data.field(__PRIVATE_fieldPathFromArgument("DocumentSnapshot.get", e));
			if (null !== t) return this._userDataWriter.convertValue(t);
		}
	}
};
/**
* A `QueryDocumentSnapshot` contains data read from a document in your
* Firestore database as part of a query. The document is guaranteed to exist
* and its data can be extracted with `.data()` or `.get(<field>)` to get a
* specific field.
*
* A `QueryDocumentSnapshot` offers the same API surface as a
* `DocumentSnapshot`. Since query results contain only existing documents, the
* `exists` property will always be true and `data()` will never return
* 'undefined'.
*/ var QueryDocumentSnapshot$1 = class extends DocumentSnapshot$1 {
	/**
	* Retrieves all fields in the document as an `Object`.
	*
	* @override
	* @returns An `Object` containing all fields in the document.
	*/
	data() {
		return super.data();
	}
};
/**
* Helper that calls `fromDotSeparatedString()` but wraps any error thrown.
*/ function __PRIVATE_fieldPathFromArgument(e, t) {
	return "string" == typeof t ? __PRIVATE_fieldPathFromDotSeparatedString(e, t) : t instanceof FieldPath ? t._internalPath : t._delegate._internalPath;
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ function __PRIVATE_validateHasExplicitOrderByForLimitToLast(e) {
	if ("L" === e.limitType && 0 === e.explicitOrderBy.length) throw new FirestoreError(N.UNIMPLEMENTED, "limitToLast() queries require specifying at least one orderBy() clause");
}
/**
* An `AppliableConstraint` is an abstraction of a constraint that can be applied
* to a Firestore query.
*/ var AppliableConstraint = class {};
/**
* A `QueryConstraint` is used to narrow the set of documents returned by a
* Firestore query. `QueryConstraint`s are created by invoking {@link where},
* {@link orderBy}, {@link (startAt:1)}, {@link (startAfter:1)}, {@link
* (endBefore:1)}, {@link (endAt:1)}, {@link limit}, {@link limitToLast} and
* can then be passed to {@link (query:1)} to create a new query instance that
* also contains this `QueryConstraint`.
*/ var QueryConstraint = class extends AppliableConstraint {};
function query(e, t, ...n) {
	let r = [];
	t instanceof AppliableConstraint && r.push(t), r = r.concat(n), function __PRIVATE_validateQueryConstraintArray(e$1) {
		const t$1 = e$1.filter(((e$2) => e$2 instanceof QueryCompositeFilterConstraint)).length, n$1 = e$1.filter(((e$2) => e$2 instanceof QueryFieldFilterConstraint)).length;
		if (t$1 > 1 || t$1 > 0 && n$1 > 0) throw new FirestoreError(N.INVALID_ARGUMENT, "InvalidQuery. When using composite filters, you cannot use more than one filter at the top level. Consider nesting the multiple filters within an `and(...)` statement. For example: change `query(query, where(...), or(...))` to `query(query, and(where(...), or(...)))`.");
	}(r);
	for (const t$1 of r) e = t$1._apply(e);
	return e;
}
/**
* A `QueryFieldFilterConstraint` is used to narrow the set of documents returned by
* a Firestore query by filtering on one or more document fields.
* `QueryFieldFilterConstraint`s are created by invoking {@link where} and can then
* be passed to {@link (query:1)} to create a new query instance that also contains
* this `QueryFieldFilterConstraint`.
*/ var QueryFieldFilterConstraint = class QueryFieldFilterConstraint extends QueryConstraint {
	/**
	* @internal
	*/
	constructor(e, t, n) {
		super(), this._field = e, this._op = t, this._value = n, this.type = "where";
	}
	static _create(e, t, n) {
		return new QueryFieldFilterConstraint(e, t, n);
	}
	_apply(e) {
		const t = this._parse(e);
		return __PRIVATE_validateNewFieldFilter(e._query, t), new Query(e.firestore, e.converter, __PRIVATE_queryWithAddedFilter(e._query, t));
	}
	_parse(e) {
		const t = __PRIVATE_newUserDataReader(e.firestore);
		return function __PRIVATE_newQueryFilter(e$1, t$1, n, r, i, s, o) {
			let _;
			if (i.isKeyField()) {
				if ("array-contains" === s || "array-contains-any" === s) throw new FirestoreError(N.INVALID_ARGUMENT, `Invalid Query. You can't perform '${s}' queries on documentId().`);
				if ("in" === s || "not-in" === s) {
					__PRIVATE_validateDisjunctiveFilterElements(o, s);
					const t$2 = [];
					for (const n$1 of o) t$2.push(__PRIVATE_parseDocumentIdValue(r, e$1, n$1));
					_ = { arrayValue: { values: t$2 } };
				} else _ = __PRIVATE_parseDocumentIdValue(r, e$1, o);
			} else "in" !== s && "not-in" !== s && "array-contains-any" !== s || __PRIVATE_validateDisjunctiveFilterElements(o, s), _ = __PRIVATE_parseQueryValue(n, t$1, o, "in" === s || "not-in" === s);
			return FieldFilter.create(i, s, _);
		}(e._query, "where", t, e.firestore._databaseId, this._field, this._op, this._value);
	}
};
/**
* Creates a {@link QueryFieldFilterConstraint} that enforces that documents
* must contain the specified field and that the value should satisfy the
* relation constraint provided.
*
* @param fieldPath - The path to compare
* @param opStr - The operation string (e.g "&lt;", "&lt;=", "==", "&lt;",
*   "&lt;=", "!=").
* @param value - The value for comparison
* @returns The created {@link QueryFieldFilterConstraint}.
*/ function where(e, t, n) {
	const r = t, i = __PRIVATE_fieldPathFromArgument("where", e);
	return QueryFieldFilterConstraint._create(i, r, n);
}
/**
* A `QueryCompositeFilterConstraint` is used to narrow the set of documents
* returned by a Firestore query by performing the logical OR or AND of multiple
* {@link QueryFieldFilterConstraint}s or {@link QueryCompositeFilterConstraint}s.
* `QueryCompositeFilterConstraint`s are created by invoking {@link or} or
* {@link and} and can then be passed to {@link (query:1)} to create a new query
* instance that also contains the `QueryCompositeFilterConstraint`.
*/ var QueryCompositeFilterConstraint = class QueryCompositeFilterConstraint extends AppliableConstraint {
	/**
	* @internal
	*/
	constructor(e, t) {
		super(), this.type = e, this._queryConstraints = t;
	}
	static _create(e, t) {
		return new QueryCompositeFilterConstraint(e, t);
	}
	_parse(e) {
		const t = this._queryConstraints.map(((t$1) => t$1._parse(e))).filter(((e$1) => e$1.getFilters().length > 0));
		return 1 === t.length ? t[0] : CompositeFilter.create(t, this._getOperator());
	}
	_apply(e) {
		const t = this._parse(e);
		return 0 === t.getFilters().length ? e : (function __PRIVATE_validateNewFilter(e$1, t$1) {
			let n = e$1;
			const r = t$1.getFlattenedFilters();
			for (const e$2 of r) __PRIVATE_validateNewFieldFilter(n, e$2), n = __PRIVATE_queryWithAddedFilter(n, e$2);
		}(e._query, t), new Query(e.firestore, e.converter, __PRIVATE_queryWithAddedFilter(e._query, t)));
	}
	_getQueryConstraints() {
		return this._queryConstraints;
	}
	_getOperator() {
		return "and" === this.type ? "and" : "or";
	}
};
/**
* Creates a new {@link QueryCompositeFilterConstraint} that is a disjunction of
* the given filter constraints. A disjunction filter includes a document if it
* satisfies any of the given filters.
*
* @param queryConstraints - Optional. The list of
* {@link QueryFilterConstraint}s to perform a disjunction for. These must be
* created with calls to {@link where}, {@link or}, or {@link and}.
* @returns The newly created {@link QueryCompositeFilterConstraint}.
*/ function or(...e) {
	return e.forEach(((e$1) => __PRIVATE_validateQueryFilterConstraint("or", e$1))), QueryCompositeFilterConstraint._create("or", e);
}
/**
* Creates a new {@link QueryCompositeFilterConstraint} that is a conjunction of
* the given filter constraints. A conjunction filter includes a document if it
* satisfies all of the given filters.
*
* @param queryConstraints - Optional. The list of
* {@link QueryFilterConstraint}s to perform a conjunction for. These must be
* created with calls to {@link where}, {@link or}, or {@link and}.
* @returns The newly created {@link QueryCompositeFilterConstraint}.
*/ function and(...e) {
	return e.forEach(((e$1) => __PRIVATE_validateQueryFilterConstraint("and", e$1))), QueryCompositeFilterConstraint._create("and", e);
}
/**
* A `QueryOrderByConstraint` is used to sort the set of documents returned by a
* Firestore query. `QueryOrderByConstraint`s are created by invoking
* {@link orderBy} and can then be passed to {@link (query:1)} to create a new query
* instance that also contains this `QueryOrderByConstraint`.
*
* Note: Documents that do not contain the orderBy field will not be present in
* the query result.
*/ var QueryOrderByConstraint = class QueryOrderByConstraint extends QueryConstraint {
	/**
	* @internal
	*/
	constructor(e, t) {
		super(), this._field = e, this._direction = t, this.type = "orderBy";
	}
	static _create(e, t) {
		return new QueryOrderByConstraint(e, t);
	}
	_apply(e) {
		const t = function __PRIVATE_newQueryOrderBy(e$1, t$1, n) {
			if (null !== e$1.startAt) throw new FirestoreError(N.INVALID_ARGUMENT, "Invalid query. You must not call startAt() or startAfter() before calling orderBy().");
			if (null !== e$1.endAt) throw new FirestoreError(N.INVALID_ARGUMENT, "Invalid query. You must not call endAt() or endBefore() before calling orderBy().");
			return new OrderBy(t$1, n);
		}(e._query, this._field, this._direction);
		return new Query(e.firestore, e.converter, function __PRIVATE_queryWithAddedOrderBy(e$1, t$1) {
			const n = e$1.explicitOrderBy.concat([t$1]);
			return new __PRIVATE_QueryImpl(e$1.path, e$1.collectionGroup, n, e$1.filters.slice(), e$1.limit, e$1.limitType, e$1.startAt, e$1.endAt);
		}(e._query, t));
	}
};
/**
* Creates a {@link QueryOrderByConstraint} that sorts the query result by the
* specified field, optionally in descending order instead of ascending.
*
* Note: Documents that do not contain the specified field will not be present
* in the query result.
*
* @param fieldPath - The field to sort by.
* @param directionStr - Optional direction to sort by ('asc' or 'desc'). If
* not specified, order will be ascending.
* @returns The created {@link QueryOrderByConstraint}.
*/ function orderBy(e, t = "asc") {
	const n = t, r = __PRIVATE_fieldPathFromArgument("orderBy", e);
	return QueryOrderByConstraint._create(r, n);
}
/**
* A `QueryLimitConstraint` is used to limit the number of documents returned by
* a Firestore query.
* `QueryLimitConstraint`s are created by invoking {@link limit} or
* {@link limitToLast} and can then be passed to {@link (query:1)} to create a new
* query instance that also contains this `QueryLimitConstraint`.
*/ var QueryLimitConstraint = class QueryLimitConstraint extends QueryConstraint {
	/**
	* @internal
	*/
	constructor(e, t, n) {
		super(), this.type = e, this._limit = t, this._limitType = n;
	}
	static _create(e, t, n) {
		return new QueryLimitConstraint(e, t, n);
	}
	_apply(e) {
		return new Query(e.firestore, e.converter, __PRIVATE_queryWithLimit(e._query, this._limit, this._limitType));
	}
};
/**
* Creates a {@link QueryLimitConstraint} that only returns the first matching
* documents.
*
* @param limit - The maximum number of items to return.
* @returns The created {@link QueryLimitConstraint}.
*/ function limit(e) {
	return __PRIVATE_validatePositiveNumber("limit", e), QueryLimitConstraint._create("limit", e, "F");
}
/**
* Creates a {@link QueryLimitConstraint} that only returns the last matching
* documents.
*
* You must specify at least one `orderBy` clause for `limitToLast` queries,
* otherwise an exception will be thrown during execution.
*
* @param limit - The maximum number of items to return.
* @returns The created {@link QueryLimitConstraint}.
*/ function limitToLast(e) {
	return __PRIVATE_validatePositiveNumber("limitToLast", e), QueryLimitConstraint._create("limitToLast", e, "L");
}
/**
* A `QueryStartAtConstraint` is used to exclude documents from the start of a
* result set returned by a Firestore query.
* `QueryStartAtConstraint`s are created by invoking {@link (startAt:1)} or
* {@link (startAfter:1)} and can then be passed to {@link (query:1)} to create a
* new query instance that also contains this `QueryStartAtConstraint`.
*/ var QueryStartAtConstraint = class QueryStartAtConstraint extends QueryConstraint {
	/**
	* @internal
	*/
	constructor(e, t, n) {
		super(), this.type = e, this._docOrFields = t, this._inclusive = n;
	}
	static _create(e, t, n) {
		return new QueryStartAtConstraint(e, t, n);
	}
	_apply(e) {
		const t = __PRIVATE_newQueryBoundFromDocOrFields(e, this.type, this._docOrFields, this._inclusive);
		return new Query(e.firestore, e.converter, function __PRIVATE_queryWithStartAt(e$1, t$1) {
			return new __PRIVATE_QueryImpl(e$1.path, e$1.collectionGroup, e$1.explicitOrderBy.slice(), e$1.filters.slice(), e$1.limit, e$1.limitType, t$1, e$1.endAt);
		}(e._query, t));
	}
};
function startAt(...e) {
	return QueryStartAtConstraint._create("startAt", e, !0);
}
function startAfter(...e) {
	return QueryStartAtConstraint._create("startAfter", e, !1);
}
/**
* A `QueryEndAtConstraint` is used to exclude documents from the end of a
* result set returned by a Firestore query.
* `QueryEndAtConstraint`s are created by invoking {@link (endAt:1)} or
* {@link (endBefore:1)} and can then be passed to {@link (query:1)} to create a new
* query instance that also contains this `QueryEndAtConstraint`.
*/ var QueryEndAtConstraint = class QueryEndAtConstraint extends QueryConstraint {
	/**
	* @internal
	*/
	constructor(e, t, n) {
		super(), this.type = e, this._docOrFields = t, this._inclusive = n;
	}
	static _create(e, t, n) {
		return new QueryEndAtConstraint(e, t, n);
	}
	_apply(e) {
		const t = __PRIVATE_newQueryBoundFromDocOrFields(e, this.type, this._docOrFields, this._inclusive);
		return new Query(e.firestore, e.converter, function __PRIVATE_queryWithEndAt(e$1, t$1) {
			return new __PRIVATE_QueryImpl(e$1.path, e$1.collectionGroup, e$1.explicitOrderBy.slice(), e$1.filters.slice(), e$1.limit, e$1.limitType, e$1.startAt, t$1);
		}(e._query, t));
	}
};
function endBefore(...e) {
	return QueryEndAtConstraint._create("endBefore", e, !1);
}
function endAt(...e) {
	return QueryEndAtConstraint._create("endAt", e, !0);
}
/** Helper function to create a bound from a document or fields */ function __PRIVATE_newQueryBoundFromDocOrFields(e, t, n, r) {
	if (n[0] = getModularInstance(n[0]), n[0] instanceof DocumentSnapshot$1) return function __PRIVATE_newQueryBoundFromDocument(e$1, t$1, n$1, r$1, i) {
		if (!r$1) throw new FirestoreError(N.NOT_FOUND, `Can't use a DocumentSnapshot that doesn't exist for ${n$1}().`);
		const s = [];
		for (const n$2 of __PRIVATE_queryNormalizedOrderBy(e$1)) if (n$2.field.isKeyField()) s.push(__PRIVATE_refValue(t$1, r$1.key));
		else {
			const e$2 = r$1.data.field(n$2.field);
			if (__PRIVATE_isServerTimestamp(e$2)) throw new FirestoreError(N.INVALID_ARGUMENT, "Invalid query. You are trying to start or end a query using a document for which the field \"" + n$2.field + "\" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)");
			if (null === e$2) {
				const e$3 = n$2.field.canonicalString();
				throw new FirestoreError(N.INVALID_ARGUMENT, `Invalid query. You are trying to start or end a query using a document for which the field '${e$3}' (used as the orderBy) does not exist.`);
			}
			s.push(e$2);
		}
		return new Bound(s, i);
	}(e._query, e.firestore._databaseId, t, n[0]._document, r);
	{
		const i = __PRIVATE_newUserDataReader(e.firestore);
		return function __PRIVATE_newQueryBoundFromFields(e$1, t$1, n$1, r$1, i$1, s) {
			const o = e$1.explicitOrderBy;
			if (i$1.length > o.length) throw new FirestoreError(N.INVALID_ARGUMENT, `Too many arguments provided to ${r$1}(). The number of arguments must be less than or equal to the number of orderBy() clauses`);
			const _ = [];
			for (let s$1 = 0; s$1 < i$1.length; s$1++) {
				const a = i$1[s$1];
				if (o[s$1].field.isKeyField()) {
					if ("string" != typeof a) throw new FirestoreError(N.INVALID_ARGUMENT, `Invalid query. Expected a string for document ID in ${r$1}(), but got a ${typeof a}`);
					if (!__PRIVATE_isCollectionGroupQuery(e$1) && -1 !== a.indexOf("/")) throw new FirestoreError(N.INVALID_ARGUMENT, `Invalid query. When querying a collection and ordering by documentId(), the value passed to ${r$1}() must be a plain document ID, but '${a}' contains a slash.`);
					const n$2 = e$1.path.child(ResourcePath.fromString(a));
					if (!DocumentKey.isDocumentKey(n$2)) throw new FirestoreError(N.INVALID_ARGUMENT, `Invalid query. When querying a collection group and ordering by documentId(), the value passed to ${r$1}() must result in a valid document path, but '${n$2}' is not because it contains an odd number of segments.`);
					const i$2 = new DocumentKey(n$2);
					_.push(__PRIVATE_refValue(t$1, i$2));
				} else {
					const e$2 = __PRIVATE_parseQueryValue(n$1, r$1, a);
					_.push(e$2);
				}
			}
			return new Bound(_, s);
		}(e._query, e.firestore._databaseId, i, t, n, r);
	}
}
function __PRIVATE_parseDocumentIdValue(e, t, n) {
	if ("string" == typeof (n = getModularInstance(n))) {
		if ("" === n) throw new FirestoreError(N.INVALID_ARGUMENT, "Invalid query. When querying with documentId(), you must provide a valid document ID, but it was an empty string.");
		if (!__PRIVATE_isCollectionGroupQuery(t) && -1 !== n.indexOf("/")) throw new FirestoreError(N.INVALID_ARGUMENT, `Invalid query. When querying a collection by documentId(), you must provide a plain document ID, but '${n}' contains a '/' character.`);
		const r = t.path.child(ResourcePath.fromString(n));
		if (!DocumentKey.isDocumentKey(r)) throw new FirestoreError(N.INVALID_ARGUMENT, `Invalid query. When querying a collection group by documentId(), the value provided must result in a valid document path, but '${r}' is not because it has an odd number of segments (${r.length}).`);
		return __PRIVATE_refValue(e, new DocumentKey(r));
	}
	if (n instanceof DocumentReference) return __PRIVATE_refValue(e, n._key);
	throw new FirestoreError(N.INVALID_ARGUMENT, `Invalid query. When querying with documentId(), you must provide a valid string or a DocumentReference, but it was: ${__PRIVATE_valueDescription(n)}.`);
}
/**
* Validates that the value passed into a disjunctive filter satisfies all
* array requirements.
*/ function __PRIVATE_validateDisjunctiveFilterElements(e, t) {
	if (!Array.isArray(e) || 0 === e.length) throw new FirestoreError(N.INVALID_ARGUMENT, `Invalid Query. A non-empty array is required for '${t.toString()}' filters.`);
}
/**
* Given an operator, returns the set of operators that cannot be used with it.
*
* This is not a comprehensive check, and this function should be removed in the
* long term. Validations should occur in the Firestore backend.
*
* Operators in a query must adhere to the following set of rules:
* 1. Only one inequality per query.
* 2. `NOT_IN` cannot be used with array, disjunctive, or `NOT_EQUAL` operators.
*/ function __PRIVATE_validateNewFieldFilter(e, t) {
	const n = function __PRIVATE_findOpInsideFilters(e$1, t$1) {
		for (const n$1 of e$1) for (const e$2 of n$1.getFlattenedFilters()) if (t$1.indexOf(e$2.op) >= 0) return e$2.op;
		return null;
	}(e.filters, function __PRIVATE_conflictingOps(e$1) {
		switch (e$1) {
			case "!=": return ["!=", "not-in"];
			case "array-contains-any":
			case "in": return ["not-in"];
			case "not-in": return [
				"array-contains-any",
				"in",
				"not-in",
				"!="
			];
			default: return [];
		}
	}(t.op));
	if (null !== n) throw n === t.op ? new FirestoreError(N.INVALID_ARGUMENT, `Invalid query. You cannot use more than one '${t.op.toString()}' filter.`) : new FirestoreError(N.INVALID_ARGUMENT, `Invalid query. You cannot use '${t.op.toString()}' filters with '${n.toString()}' filters.`);
}
function __PRIVATE_validateQueryFilterConstraint(e, t) {
	if (!(t instanceof QueryFieldFilterConstraint || t instanceof QueryCompositeFilterConstraint)) throw new FirestoreError(N.INVALID_ARGUMENT, `Function ${e}() requires AppliableConstraints created with a call to 'where(...)', 'or(...)', or 'and(...)'.`);
}
var AbstractUserDataWriter = class {
	convertValue(e, t = "none") {
		switch (__PRIVATE_typeOrder(e)) {
			case 0: return null;
			case 1: return e.booleanValue;
			case 2: return __PRIVATE_normalizeNumber(e.integerValue || e.doubleValue);
			case 3: return this.convertTimestamp(e.timestampValue);
			case 4: return this.convertServerTimestamp(e, t);
			case 5: return e.stringValue;
			case 6: return this.convertBytes(__PRIVATE_normalizeByteString(e.bytesValue));
			case 7: return this.convertReference(e.referenceValue);
			case 8: return this.convertGeoPoint(e.geoPointValue);
			case 9: return this.convertArray(e.arrayValue, t);
			case 11: return this.convertObject(e.mapValue, t);
			case 10: return this.convertVectorValue(e.mapValue);
			default: throw fail(62114, { value: e });
		}
	}
	convertObject(e, t) {
		return this.convertObjectMap(e.fields, t);
	}
	/**
	* @internal
	*/ convertObjectMap(e, t = "none") {
		const n = {};
		return forEach(e, ((e$1, r) => {
			n[e$1] = this.convertValue(r, t);
		})), n;
	}
	/**
	* @internal
	*/ convertVectorValue(e) {
		const t = e.fields?.[Et].arrayValue?.values?.map(((e$1) => __PRIVATE_normalizeNumber(e$1.doubleValue)));
		return new VectorValue(t);
	}
	convertGeoPoint(e) {
		return new GeoPoint(__PRIVATE_normalizeNumber(e.latitude), __PRIVATE_normalizeNumber(e.longitude));
	}
	convertArray(e, t) {
		return (e.values || []).map(((e$1) => this.convertValue(e$1, t)));
	}
	convertServerTimestamp(e, t) {
		switch (t) {
			case "previous":
				const n = __PRIVATE_getPreviousValue(e);
				return null == n ? null : this.convertValue(n, t);
			case "estimate": return this.convertTimestamp(__PRIVATE_getLocalWriteTime(e));
			default: return null;
		}
	}
	convertTimestamp(e) {
		const t = __PRIVATE_normalizeTimestamp(e);
		return new Timestamp(t.seconds, t.nanos);
	}
	convertDocumentKey(e, t) {
		const n = ResourcePath.fromString(e);
		__PRIVATE_hardAssert(__PRIVATE_isValidResourceName(n), 9688, { name: e });
		const r = new DatabaseId(n.get(1), n.get(3)), i = new DocumentKey(n.popFirst(5));
		return r.isEqual(t) || __PRIVATE_logError(`Document ${i} contains a document reference within a different database (${r.projectId}/${r.database}) which is not supported. It will be treated as a reference in the current database (${t.projectId}/${t.database}) instead.`), i;
	}
};
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Converts custom model object of type T into `DocumentData` by applying the
* converter if it exists.
*
* This function is used when converting user objects to `DocumentData`
* because we want to provide the user with a more specific error message if
* their `set()` or fails due to invalid data originating from a `toFirestore()`
* call.
*/ function __PRIVATE_applyFirestoreDataConverter(e, t, n) {
	let r;
	return r = e ? n && (n.merge || n.mergeFields) ? e.toFirestore(t, n) : e.toFirestore(t) : t, r;
}
var __PRIVATE_LiteUserDataWriter = class extends AbstractUserDataWriter {
	constructor(e) {
		super(), this.firestore = e;
	}
	convertBytes(e) {
		return new Bytes(e);
	}
	convertReference(e) {
		const t = this.convertDocumentKey(e, this.firestore._databaseId);
		return new DocumentReference(this.firestore, null, t);
	}
};
/**
* @license
* Copyright 2022 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Create an AggregateField object that can be used to compute the sum of
* a specified field over a range of documents in the result set of a query.
* @param field Specifies the field to sum across the result set.
*/ function sum(e) {
	return new AggregateField("sum", __PRIVATE_fieldPathFromArgument$1("sum", e));
}
/**
* Create an AggregateField object that can be used to compute the average of
* a specified field over a range of documents in the result set of a query.
* @param field Specifies the field to average across the result set.
*/ function average(e) {
	return new AggregateField("avg", __PRIVATE_fieldPathFromArgument$1("average", e));
}
/**
* Create an AggregateField object that can be used to compute the count of
* documents in the result set of a query.
*/ function count() {
	return new AggregateField("count");
}
/**
* Compares two 'AggregateField` instances for equality.
*
* @param left Compare this AggregateField to the `right`.
* @param right Compare this AggregateField to the `left`.
*/ function aggregateFieldEqual(e, t) {
	return e instanceof AggregateField && t instanceof AggregateField && e.aggregateType === t.aggregateType && e._internalFieldPath?.canonicalString() === t._internalFieldPath?.canonicalString();
}
/**
* Compares two `AggregateQuerySnapshot` instances for equality.
*
* Two `AggregateQuerySnapshot` instances are considered "equal" if they have
* underlying queries that compare equal, and the same data.
*
* @param left - The first `AggregateQuerySnapshot` to compare.
* @param right - The second `AggregateQuerySnapshot` to compare.
*
* @returns `true` if the objects are "equal", as defined above, or `false`
* otherwise.
*/ function aggregateQuerySnapshotEqual(e, t) {
	return queryEqual(e.query, t.query) && deepEqual(e.data(), t.data());
}
/**
* @license
* Copyright 2025 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
var Tn = "NOT SUPPORTED";
/**
* Metadata about a snapshot, describing the state of the snapshot.
*/ var SnapshotMetadata = class {
	/** @hideconstructor */
	constructor(e, t) {
		this.hasPendingWrites = e, this.fromCache = t;
	}
	/**
	* Returns true if this `SnapshotMetadata` is equal to the provided one.
	*
	* @param other - The `SnapshotMetadata` to compare against.
	* @returns true if this `SnapshotMetadata` is equal to the provided one.
	*/ isEqual(e) {
		return this.hasPendingWrites === e.hasPendingWrites && this.fromCache === e.fromCache;
	}
};
/**
* A `DocumentSnapshot` contains data read from a document in your Firestore
* database. The data can be extracted with `.data()` or `.get(<field>)` to
* get a specific field.
*
* For a `DocumentSnapshot` that points to a non-existing document, any data
* access will return 'undefined'. You can use the `exists()` method to
* explicitly verify a document's existence.
*/ var DocumentSnapshot = class DocumentSnapshot extends DocumentSnapshot$1 {
	/** @hideconstructor protected */
	constructor(e, t, n, r, i, s) {
		super(e, t, n, r, s), this._firestore = e, this._firestoreImpl = e, this.metadata = i;
	}
	/**
	* Returns whether or not the data exists. True if the document exists.
	*/ exists() {
		return super.exists();
	}
	/**
	* Retrieves all fields in the document as an `Object`. Returns `undefined` if
	* the document doesn't exist.
	*
	* By default, `serverTimestamp()` values that have not yet been
	* set to their final value will be returned as `null`. You can override
	* this by passing an options object.
	*
	* @param options - An options object to configure how data is retrieved from
	* the snapshot (for example the desired behavior for server timestamps that
	* have not yet been set to their final value).
	* @returns An `Object` containing all fields in the document or `undefined` if
	* the document doesn't exist.
	*/ data(e = {}) {
		if (this._document) {
			if (this._converter) {
				const t = new QueryDocumentSnapshot(this._firestore, this._userDataWriter, this._key, this._document, this.metadata, null);
				return this._converter.fromFirestore(t, e);
			}
			return this._userDataWriter.convertValue(this._document.data.value, e.serverTimestamps);
		}
	}
	/**
	* Retrieves the field specified by `fieldPath`. Returns `undefined` if the
	* document or field doesn't exist.
	*
	* By default, a `serverTimestamp()` that has not yet been set to
	* its final value will be returned as `null`. You can override this by
	* passing an options object.
	*
	* @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
	* field.
	* @param options - An options object to configure how the field is retrieved
	* from the snapshot (for example the desired behavior for server timestamps
	* that have not yet been set to their final value).
	* @returns The data at the specified field location or undefined if no such
	* field exists in the document.
	*/
	get(e, t = {}) {
		if (this._document) {
			const n = this._document.data.field(__PRIVATE_fieldPathFromArgument("DocumentSnapshot.get", e));
			if (null !== n) return this._userDataWriter.convertValue(n, t.serverTimestamps);
		}
	}
	/**
	* Returns a JSON-serializable representation of this `DocumentSnapshot` instance.
	*
	* @returns a JSON representation of this object.  Throws a {@link FirestoreError} if this
	* `DocumentSnapshot` has pending writes.
	*/ toJSON() {
		if (this.metadata.hasPendingWrites) throw new FirestoreError(N.FAILED_PRECONDITION, "DocumentSnapshot.toJSON() attempted to serialize a document with pending writes. Await waitForPendingWrites() before invoking toJSON().");
		const e = this._document, t = {};
		if (t.type = DocumentSnapshot._jsonSchemaVersion, t.bundle = "", t.bundleSource = "DocumentSnapshot", t.bundleName = this._key.toString(), !e || !e.isValidDocument() || !e.isFoundDocument()) return t;
		this._userDataWriter.convertObjectMap(e.data.value.mapValue.fields, "previous");
		return t.bundle = (this._firestore, this.ref.path, "NOT SUPPORTED"), t;
	}
};
function documentSnapshotFromJSON(e, t, n) {
	if (__PRIVATE_validateJSON(t, DocumentSnapshot._jsonSchema)) {
		if (t.bundle === Tn) throw new FirestoreError(N.INVALID_ARGUMENT, "The provided JSON object was created in a client environment, which is not supported.");
		const r = __PRIVATE_newSerializer(e._databaseId), i = __PRIVATE_createBundleReaderSync(t.bundle, r), s = i.Wu(), o = new __PRIVATE_BundleLoader(i.getMetadata(), r);
		for (const e$1 of s) o.Ga(e$1);
		const _ = o.documents;
		if (1 !== _.length) throw new FirestoreError(N.INVALID_ARGUMENT, `Expected bundle data to contain 1 document, but it contains ${_.length} documents.`);
		const a = __PRIVATE_fromDocument(r, _[0].document), u = new DocumentKey(ResourcePath.fromString(t.bundleName));
		return new DocumentSnapshot(e, new __PRIVATE_LiteUserDataWriter(e), u, a, new SnapshotMetadata(!1, !1), n || null);
	}
}
/**
* A `QueryDocumentSnapshot` contains data read from a document in your
* Firestore database as part of a query. The document is guaranteed to exist
* and its data can be extracted with `.data()` or `.get(<field>)` to get a
* specific field.
*
* A `QueryDocumentSnapshot` offers the same API surface as a
* `DocumentSnapshot`. Since query results contain only existing documents, the
* `exists` property will always be true and `data()` will never return
* 'undefined'.
*/ DocumentSnapshot._jsonSchemaVersion = "firestore/documentSnapshot/1.0", DocumentSnapshot._jsonSchema = {
	type: property("string", DocumentSnapshot._jsonSchemaVersion),
	bundleSource: property("string", "DocumentSnapshot"),
	bundleName: property("string"),
	bundle: property("string")
};
var QueryDocumentSnapshot = class extends DocumentSnapshot {
	/**
	* Retrieves all fields in the document as an `Object`.
	*
	* By default, `serverTimestamp()` values that have not yet been
	* set to their final value will be returned as `null`. You can override
	* this by passing an options object.
	*
	* @override
	* @param options - An options object to configure how data is retrieved from
	* the snapshot (for example the desired behavior for server timestamps that
	* have not yet been set to their final value).
	* @returns An `Object` containing all fields in the document.
	*/
	data(e = {}) {
		return super.data(e);
	}
};
/**
* A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects
* representing the results of a query. The documents can be accessed as an
* array via the `docs` property or enumerated using the `forEach` method. The
* number of documents can be determined via the `empty` and `size`
* properties.
*/ var QuerySnapshot = class QuerySnapshot {
	/** @hideconstructor */
	constructor(e, t, n, r) {
		this._firestore = e, this._userDataWriter = t, this._snapshot = r, this.metadata = new SnapshotMetadata(r.hasPendingWrites, r.fromCache), this.query = n;
	}
	/** An array of all the documents in the `QuerySnapshot`. */ get docs() {
		const e = [];
		return this.forEach(((t) => e.push(t))), e;
	}
	/** The number of documents in the `QuerySnapshot`. */ get size() {
		return this._snapshot.docs.size;
	}
	/** True if there are no documents in the `QuerySnapshot`. */ get empty() {
		return 0 === this.size;
	}
	/**
	* Enumerates all of the documents in the `QuerySnapshot`.
	*
	* @param callback - A callback to be called with a `QueryDocumentSnapshot` for
	* each document in the snapshot.
	* @param thisArg - The `this` binding for the callback.
	*/ forEach(e, t) {
		this._snapshot.docs.forEach(((n) => {
			e.call(t, new QueryDocumentSnapshot(this._firestore, this._userDataWriter, n.key, n, new SnapshotMetadata(this._snapshot.mutatedKeys.has(n.key), this._snapshot.fromCache), this.query.converter));
		}));
	}
	/**
	* Returns an array of the documents changes since the last snapshot. If this
	* is the first snapshot, all documents will be in the list as 'added'
	* changes.
	*
	* @param options - `SnapshotListenOptions` that control whether metadata-only
	* changes (i.e. only `DocumentSnapshot.metadata` changed) should trigger
	* snapshot events.
	*/ docChanges(e = {}) {
		const t = !!e.includeMetadataChanges;
		if (t && this._snapshot.excludesMetadataChanges) throw new FirestoreError(N.INVALID_ARGUMENT, "To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");
		return this._cachedChanges && this._cachedChangesIncludeMetadataChanges === t || (this._cachedChanges = function __PRIVATE_changesFromSnapshot(e$1, t$1) {
			if (e$1._snapshot.oldDocs.isEmpty()) {
				let t$2 = 0;
				return e$1._snapshot.docChanges.map(((n) => {
					const r = new QueryDocumentSnapshot(e$1._firestore, e$1._userDataWriter, n.doc.key, n.doc, new SnapshotMetadata(e$1._snapshot.mutatedKeys.has(n.doc.key), e$1._snapshot.fromCache), e$1.query.converter);
					return n.doc, {
						type: "added",
						doc: r,
						oldIndex: -1,
						newIndex: t$2++
					};
				}));
			}
			{
				let n = e$1._snapshot.oldDocs;
				return e$1._snapshot.docChanges.filter(((e$2) => t$1 || 3 !== e$2.type)).map(((t$2) => {
					const r = new QueryDocumentSnapshot(e$1._firestore, e$1._userDataWriter, t$2.doc.key, t$2.doc, new SnapshotMetadata(e$1._snapshot.mutatedKeys.has(t$2.doc.key), e$1._snapshot.fromCache), e$1.query.converter);
					let i = -1, s = -1;
					return 0 !== t$2.type && (i = n.indexOf(t$2.doc.key), n = n.delete(t$2.doc.key)), 1 !== t$2.type && (n = n.add(t$2.doc), s = n.indexOf(t$2.doc.key)), {
						type: __PRIVATE_resultChangeType(t$2.type),
						doc: r,
						oldIndex: i,
						newIndex: s
					};
				}));
			}
		}(this, t), this._cachedChangesIncludeMetadataChanges = t), this._cachedChanges;
	}
	/**
	* Returns a JSON-serializable representation of this `QuerySnapshot` instance.
	*
	* @returns a JSON representation of this object. Throws a {@link FirestoreError} if this
	* `QuerySnapshot` has pending writes.
	*/ toJSON() {
		if (this.metadata.hasPendingWrites) throw new FirestoreError(N.FAILED_PRECONDITION, "QuerySnapshot.toJSON() attempted to serialize a document with pending writes. Await waitForPendingWrites() before invoking toJSON().");
		const e = {};
		e.type = QuerySnapshot._jsonSchemaVersion, e.bundleSource = "QuerySnapshot", e.bundleName = __PRIVATE_AutoId.newId(), this._firestore._databaseId.database, this._firestore._databaseId.projectId;
		const t = [], n = [], r = [];
		return this.docs.forEach(((e$1) => {
			null !== e$1._document && (t.push(e$1._document), n.push(this._userDataWriter.convertObjectMap(e$1._document.data.value.mapValue.fields, "previous")), r.push(e$1.ref.path));
		})), e.bundle = (this._firestore, this.query._query, e.bundleName, "NOT SUPPORTED"), e;
	}
};
function querySnapshotFromJSON(e, t, n) {
	if (__PRIVATE_validateJSON(t, QuerySnapshot._jsonSchema)) {
		if (t.bundle === Tn) throw new FirestoreError(N.INVALID_ARGUMENT, "The provided JSON object was created in a client environment, which is not supported.");
		const r = __PRIVATE_newSerializer(e._databaseId), i = __PRIVATE_createBundleReaderSync(t.bundle, r), s = i.Wu(), o = new __PRIVATE_BundleLoader(i.getMetadata(), r);
		for (const e$1 of s) o.Ga(e$1);
		if (1 !== o.queries.length) throw new FirestoreError(N.INVALID_ARGUMENT, `Snapshot data expected 1 query but found ${o.queries.length} queries.`);
		const _ = __PRIVATE_fromBundledQuery(o.queries[0].bundledQuery), a = o.documents;
		let u = new DocumentSet();
		a.map(((e$1) => {
			const t$1 = __PRIVATE_fromDocument(r, e$1.document);
			u = u.add(t$1);
		}));
		const c = ViewSnapshot.fromInitialDocuments(_, u, __PRIVATE_documentKeySet(), !1, !1), l = new Query(e, n || null, _);
		return new QuerySnapshot(e, new __PRIVATE_LiteUserDataWriter(e), l, c);
	}
}
function __PRIVATE_resultChangeType(e) {
	switch (e) {
		case 0: return "added";
		case 2:
		case 3: return "modified";
		case 1: return "removed";
		default: return fail(61501, { type: e });
	}
}
/**
* Returns true if the provided snapshots are equal.
*
* @param left - A snapshot to compare.
* @param right - A snapshot to compare.
* @returns true if the snapshots are equal.
*/ function snapshotEqual(e, t) {
	return e instanceof DocumentSnapshot && t instanceof DocumentSnapshot ? e._firestore === t._firestore && e._key.isEqual(t._key) && (null === e._document ? null === t._document : e._document.isEqual(t._document)) && e._converter === t._converter : e instanceof QuerySnapshot && t instanceof QuerySnapshot && e._firestore === t._firestore && queryEqual(e.query, t.query) && e.metadata.isEqual(t.metadata) && e._snapshot.isEqual(t._snapshot);
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Reads the document referred to by this `DocumentReference`.
*
* Note: `getDoc()` attempts to provide up-to-date data when possible by waiting
* for data from the server, but it may return cached data or fail if you are
* offline and the server cannot be reached. To specify this behavior, invoke
* {@link getDocFromCache} or {@link getDocFromServer}.
*
* @param reference - The reference of the document to fetch.
* @returns A Promise resolved with a `DocumentSnapshot` containing the
* current document contents.
*/ function getDoc(e) {
	e = __PRIVATE_cast(e, DocumentReference);
	const t = __PRIVATE_cast(e.firestore, Firestore);
	return __PRIVATE_firestoreClientGetDocumentViaSnapshotListener(ensureFirestoreConfigured(t), e._key).then(((n) => __PRIVATE_convertToDocSnapshot(t, e, n)));
}
QuerySnapshot._jsonSchemaVersion = "firestore/querySnapshot/1.0", QuerySnapshot._jsonSchema = {
	type: property("string", QuerySnapshot._jsonSchemaVersion),
	bundleSource: property("string", "QuerySnapshot"),
	bundleName: property("string"),
	bundle: property("string")
};
var __PRIVATE_ExpUserDataWriter = class extends AbstractUserDataWriter {
	constructor(e) {
		super(), this.firestore = e;
	}
	convertBytes(e) {
		return new Bytes(e);
	}
	convertReference(e) {
		const t = this.convertDocumentKey(e, this.firestore._databaseId);
		return new DocumentReference(this.firestore, null, t);
	}
};
/**
* Reads the document referred to by this `DocumentReference` from cache.
* Returns an error if the document is not currently cached.
*
* @returns A `Promise` resolved with a `DocumentSnapshot` containing the
* current document contents.
*/ function getDocFromCache(e) {
	e = __PRIVATE_cast(e, DocumentReference);
	const t = __PRIVATE_cast(e.firestore, Firestore), n = ensureFirestoreConfigured(t), r = new __PRIVATE_ExpUserDataWriter(t);
	return __PRIVATE_firestoreClientGetDocumentFromLocalCache(n, e._key).then(((n$1) => new DocumentSnapshot(t, r, e._key, n$1, new SnapshotMetadata(null !== n$1 && n$1.hasLocalMutations, !0), e.converter)));
}
/**
* Reads the document referred to by this `DocumentReference` from the server.
* Returns an error if the network is not available.
*
* @returns A `Promise` resolved with a `DocumentSnapshot` containing the
* current document contents.
*/ function getDocFromServer(e) {
	e = __PRIVATE_cast(e, DocumentReference);
	const t = __PRIVATE_cast(e.firestore, Firestore);
	return __PRIVATE_firestoreClientGetDocumentViaSnapshotListener(ensureFirestoreConfigured(t), e._key, { source: "server" }).then(((n) => __PRIVATE_convertToDocSnapshot(t, e, n)));
}
/**
* Executes the query and returns the results as a `QuerySnapshot`.
*
* Note: `getDocs()` attempts to provide up-to-date data when possible by
* waiting for data from the server, but it may return cached data or fail if
* you are offline and the server cannot be reached. To specify this behavior,
* invoke {@link getDocsFromCache} or {@link getDocsFromServer}.
*
* @returns A `Promise` that will be resolved with the results of the query.
*/ function getDocs(e) {
	e = __PRIVATE_cast(e, Query);
	const t = __PRIVATE_cast(e.firestore, Firestore), n = ensureFirestoreConfigured(t), r = new __PRIVATE_ExpUserDataWriter(t);
	return __PRIVATE_validateHasExplicitOrderByForLimitToLast(e._query), __PRIVATE_firestoreClientGetDocumentsViaSnapshotListener(n, e._query).then(((n$1) => new QuerySnapshot(t, r, e, n$1)));
}
/**
* Executes the query and returns the results as a `QuerySnapshot` from cache.
* Returns an empty result set if no documents matching the query are currently
* cached.
*
* @returns A `Promise` that will be resolved with the results of the query.
*/ function getDocsFromCache(e) {
	e = __PRIVATE_cast(e, Query);
	const t = __PRIVATE_cast(e.firestore, Firestore), n = ensureFirestoreConfigured(t), r = new __PRIVATE_ExpUserDataWriter(t);
	return __PRIVATE_firestoreClientGetDocumentsFromLocalCache(n, e._query).then(((n$1) => new QuerySnapshot(t, r, e, n$1)));
}
/**
* Executes the query and returns the results as a `QuerySnapshot` from the
* server. Returns an error if the network is not available.
*
* @returns A `Promise` that will be resolved with the results of the query.
*/ function getDocsFromServer(e) {
	e = __PRIVATE_cast(e, Query);
	const t = __PRIVATE_cast(e.firestore, Firestore), n = ensureFirestoreConfigured(t), r = new __PRIVATE_ExpUserDataWriter(t);
	return __PRIVATE_firestoreClientGetDocumentsViaSnapshotListener(n, e._query, { source: "server" }).then(((n$1) => new QuerySnapshot(t, r, e, n$1)));
}
function setDoc(e, t, n) {
	e = __PRIVATE_cast(e, DocumentReference);
	const r = __PRIVATE_cast(e.firestore, Firestore), i = __PRIVATE_applyFirestoreDataConverter(e.converter, t, n);
	return executeWrite(r, [__PRIVATE_parseSetData(__PRIVATE_newUserDataReader(r), "setDoc", e._key, i, null !== e.converter, n).toMutation(e._key, Precondition.none())]);
}
function updateDoc(e, t, n, ...r) {
	e = __PRIVATE_cast(e, DocumentReference);
	const i = __PRIVATE_cast(e.firestore, Firestore), s = __PRIVATE_newUserDataReader(i);
	let o;
	o = "string" == typeof (t = getModularInstance(t)) || t instanceof FieldPath ? __PRIVATE_parseUpdateVarargs(s, "updateDoc", e._key, t, n, r) : __PRIVATE_parseUpdateData(s, "updateDoc", e._key, t);
	return executeWrite(i, [o.toMutation(e._key, Precondition.exists(!0))]);
}
/**
* Deletes the document referred to by the specified `DocumentReference`.
*
* @param reference - A reference to the document to delete.
* @returns A Promise resolved once the document has been successfully
* deleted from the backend (note that it won't resolve while you're offline).
*/ function deleteDoc(e) {
	return executeWrite(__PRIVATE_cast(e.firestore, Firestore), [new __PRIVATE_DeleteMutation(e._key, Precondition.none())]);
}
/**
* Add a new document to specified `CollectionReference` with the given data,
* assigning it a document ID automatically.
*
* @param reference - A reference to the collection to add this document to.
* @param data - An Object containing the data for the new document.
* @returns A `Promise` resolved with a `DocumentReference` pointing to the
* newly created document after it has been written to the backend (Note that it
* won't resolve while you're offline).
*/ function addDoc(e, t) {
	const n = __PRIVATE_cast(e.firestore, Firestore), r = doc(e), i = __PRIVATE_applyFirestoreDataConverter(e.converter, t);
	return executeWrite(n, [__PRIVATE_parseSetData(__PRIVATE_newUserDataReader(e.firestore), "addDoc", r._key, i, null !== e.converter, {}).toMutation(r._key, Precondition.exists(!1))]).then((() => r));
}
function onSnapshot(e, ...t) {
	e = getModularInstance(e);
	let n = {
		includeMetadataChanges: !1,
		source: "default"
	}, r = 0;
	"object" != typeof t[r] || __PRIVATE_isPartialObserver(t[r]) || (n = t[r++]);
	const i = {
		includeMetadataChanges: n.includeMetadataChanges,
		source: n.source
	};
	if (__PRIVATE_isPartialObserver(t[r])) {
		const e$1 = t[r];
		t[r] = e$1.next?.bind(e$1), t[r + 1] = e$1.error?.bind(e$1), t[r + 2] = e$1.complete?.bind(e$1);
	}
	let s, o, _;
	if (e instanceof DocumentReference) o = __PRIVATE_cast(e.firestore, Firestore), _ = __PRIVATE_newQueryForPath(e._key.path), s = {
		next: (n$1) => {
			t[r] && t[r](__PRIVATE_convertToDocSnapshot(o, e, n$1));
		},
		error: t[r + 1],
		complete: t[r + 2]
	};
	else {
		const n$1 = __PRIVATE_cast(e, Query);
		o = __PRIVATE_cast(n$1.firestore, Firestore), _ = n$1._query;
		const i$1 = new __PRIVATE_ExpUserDataWriter(o);
		s = {
			next: (e$1) => {
				t[r] && t[r](new QuerySnapshot(o, i$1, n$1, e$1));
			},
			error: t[r + 1],
			complete: t[r + 2]
		}, __PRIVATE_validateHasExplicitOrderByForLimitToLast(e._query);
	}
	return function __PRIVATE_firestoreClientListen(e$1, t$1, n$1, r$1) {
		const i$1 = new __PRIVATE_AsyncObserver(r$1), s$1 = new __PRIVATE_QueryListener(t$1, i$1, n$1);
		return e$1.asyncQueue.enqueueAndForget((async () => __PRIVATE_eventManagerListen(await __PRIVATE_getEventManager(e$1), s$1))), () => {
			i$1.Nu(), e$1.asyncQueue.enqueueAndForget((async () => __PRIVATE_eventManagerUnlisten(await __PRIVATE_getEventManager(e$1), s$1)));
		};
	}(ensureFirestoreConfigured(o), _, i, s);
}
function onSnapshotResume(e, t, ...n) {
	const r = getModularInstance(e), i = function __PRIVATE_normalizeSnapshotJsonFields(e$1) {
		const t$1 = {
			bundle: "",
			bundleName: "",
			bundleSource: ""
		};
		for (const r$1 of [
			"bundle",
			"bundleName",
			"bundleSource"
		]) {
			if (!(r$1 in e$1)) {
				t$1.error = `snapshotJson missing required field: ${r$1}`;
				break;
			}
			const n$1 = e$1[r$1];
			if ("string" != typeof n$1) {
				t$1.error = `snapshotJson field '${r$1}' must be a string.`;
				break;
			}
			if (0 === n$1.length) {
				t$1.error = `snapshotJson field '${r$1}' cannot be an empty string.`;
				break;
			}
			"bundle" === r$1 ? t$1.bundle = n$1 : "bundleName" === r$1 ? t$1.bundleName = n$1 : "bundleSource" === r$1 && (t$1.bundleSource = n$1);
		}
		return t$1;
	}(t);
	if (i.error) throw new FirestoreError(N.INVALID_ARGUMENT, i.error);
	let s, o = 0;
	if ("object" != typeof n[o] || __PRIVATE_isPartialObserver(n[o]) || (s = n[o++]), "QuerySnapshot" === i.bundleSource) {
		let e$1 = null;
		if ("object" == typeof n[o] && __PRIVATE_isPartialObserver(n[o])) {
			const t$1 = n[o++];
			e$1 = {
				next: t$1.next,
				error: t$1.error,
				complete: t$1.complete
			};
		} else e$1 = {
			next: n[o++],
			error: n[o++],
			complete: n[o++]
		};
		/**
		* Loads the bundle in a separate task and then invokes {@link onSnapshot} with a
		* {@link Query} that represents the Query in the bundle.
		*
		* @param firestore - The {@link Firestore} instance for the {@link onSnapshot} operation request.
		* @param json - The JSON bundle to load, produced by {@link QuerySnapshot.toJSON}.
		* @param options - Options controlling the listen behavior.
		* @param observer - A single object containing `next` and `error` callbacks.
		* @param converter - An optional object that converts objects from Firestore before the onNext
		* listener is invoked.
		* @returns An unsubscribe function that can be called to cancel the snapshot
		* listener.
		*
		* @internal
		*/
		return function __PRIVATE_onSnapshotQuerySnapshotBundle(e$2, t$1, n$1, r$1, i$1) {
			let s$1, o$1 = !1;
			return loadBundle(e$2, t$1.bundle).then((() => namedQuery(e$2, t$1.bundleName))).then(((e$3) => {
				if (e$3 && !o$1) i$1 && e$3.withConverter(i$1), s$1 = onSnapshot(e$3, n$1 || {}, r$1);
			})).catch(((e$3) => (r$1.error && r$1.error(e$3), () => {}))), () => {
				o$1 || (o$1 = !0, s$1 && s$1());
			};
		}(r, i, s, e$1, n[o]);
	}
	if ("DocumentSnapshot" === i.bundleSource) {
		let e$1 = null;
		if ("object" == typeof n[o] && __PRIVATE_isPartialObserver(n[o])) {
			const t$1 = n[o++];
			e$1 = {
				next: t$1.next,
				error: t$1.error,
				complete: t$1.complete
			};
		} else e$1 = {
			next: n[o++],
			error: n[o++],
			complete: n[o++]
		};
		return function __PRIVATE_onSnapshotDocumentSnapshotBundle(e$2, t$1, n$1, r$1, i$1) {
			let s$1, o$1 = !1;
			return loadBundle(e$2, t$1.bundle).then((() => {
				if (!o$1) {
					const o$2 = new DocumentReference(e$2, i$1 || null, DocumentKey.fromPath(t$1.bundleName));
					s$1 = onSnapshot(o$2, n$1 || {}, r$1);
				}
			})).catch(((e$3) => (r$1.error && r$1.error(e$3), () => {}))), () => {
				o$1 || (o$1 = !0, s$1 && s$1());
			};
		}(r, i, s, e$1, n[o]);
	}
	throw new FirestoreError(N.INVALID_ARGUMENT, `unsupported bundle source: ${i.bundleSource}`);
}
function onSnapshotsInSync(e, t) {
	return __PRIVATE_firestoreClientAddSnapshotsInSyncListener(ensureFirestoreConfigured(e = __PRIVATE_cast(e, Firestore)), __PRIVATE_isPartialObserver(t) ? t : { next: t });
}
/**
* Locally writes `mutations` on the async queue.
* @internal
*/ function executeWrite(e, t) {
	return function __PRIVATE_firestoreClientWrite(e$1, t$1) {
		const n = new __PRIVATE_Deferred();
		return e$1.asyncQueue.enqueueAndForget((async () => __PRIVATE_syncEngineWrite(await __PRIVATE_getSyncEngine(e$1), t$1, n))), n.promise;
	}(ensureFirestoreConfigured(e), t);
}
/**
* Converts a {@link ViewSnapshot} that contains the single document specified by `ref`
* to a {@link DocumentSnapshot}.
*/ function __PRIVATE_convertToDocSnapshot(e, t, n) {
	const r = n.docs.get(t._key), i = new __PRIVATE_ExpUserDataWriter(e);
	return new DocumentSnapshot(e, i, t._key, r, new SnapshotMetadata(n.hasPendingWrites, n.fromCache), t.converter);
}
function getCountFromServer(e) {
	return getAggregateFromServer(e, { count: count() });
}
/**
* Calculates the specified aggregations over the documents in the result
* set of the given query without actually downloading the documents.
*
* Using this function to perform aggregations is efficient because only the
* final aggregation values, not the documents' data, are downloaded. This
* function can perform aggregations of the documents in cases where the result
* set is prohibitively large to download entirely (thousands of documents).
*
* The result received from the server is presented, unaltered, without
* considering any local state. That is, documents in the local cache are not
* taken into consideration, neither are local modifications not yet
* synchronized with the server. Previously-downloaded results, if any, are not
* used. Every invocation of this function necessarily involves a round trip to
* the server.
*
* @param query The query whose result set is aggregated over.
* @param aggregateSpec An `AggregateSpec` object that specifies the aggregates
* to perform over the result set. The AggregateSpec specifies aliases for each
* aggregate, which can be used to retrieve the aggregate result.
* @example
* ```typescript
* const aggregateSnapshot = await getAggregateFromServer(query, {
*   countOfDocs: count(),
*   totalHours: sum('hours'),
*   averageScore: average('score')
* });
*
* const countOfDocs: number = aggregateSnapshot.data().countOfDocs;
* const totalHours: number = aggregateSnapshot.data().totalHours;
* const averageScore: number | null = aggregateSnapshot.data().averageScore;
* ```
*/ function getAggregateFromServer(e, t) {
	const n = __PRIVATE_cast(e.firestore, Firestore), r = ensureFirestoreConfigured(n), i = __PRIVATE_mapToArray(t, ((e$1, t$1) => new __PRIVATE_AggregateImpl(t$1, e$1.aggregateType, e$1._internalFieldPath)));
	return __PRIVATE_firestoreClientRunAggregateQuery(r, e._query, i).then(((t$1) => function __PRIVATE_convertToAggregateQuerySnapshot(e$1, t$2, n$1) {
		const r$1 = new __PRIVATE_ExpUserDataWriter(e$1);
		return new AggregateQuerySnapshot(t$2, r$1, n$1);
	}(n, e, t$1)));
}
var __PRIVATE_MemoryLocalCacheImpl = class {
	constructor(e) {
		this.kind = "memory", this._onlineComponentProvider = OnlineComponentProvider.provider, this._offlineComponentProvider = e?.garbageCollector ? e.garbageCollector._offlineComponentProvider : { build: () => new __PRIVATE_LruGcMemoryOfflineComponentProvider(void 0) };
	}
	toJSON() {
		return { kind: this.kind };
	}
};
var __PRIVATE_PersistentLocalCacheImpl = class {
	constructor(e) {
		let t;
		this.kind = "persistent", e?.tabManager ? (e.tabManager._initialize(e), t = e.tabManager) : (t = persistentSingleTabManager(void 0), t._initialize(e)), this._onlineComponentProvider = t._onlineComponentProvider, this._offlineComponentProvider = t._offlineComponentProvider;
	}
	toJSON() {
		return { kind: this.kind };
	}
};
var __PRIVATE_MemoryEagerGarbageCollectorImpl = class {
	constructor() {
		this.kind = "memoryEager", this._offlineComponentProvider = __PRIVATE_MemoryOfflineComponentProvider.provider;
	}
	toJSON() {
		return { kind: this.kind };
	}
};
var __PRIVATE_MemoryLruGarbageCollectorImpl = class {
	constructor(e) {
		this.kind = "memoryLru", this._offlineComponentProvider = { build: () => new __PRIVATE_LruGcMemoryOfflineComponentProvider(e) };
	}
	toJSON() {
		return { kind: this.kind };
	}
};
/**
* Creates an instance of `MemoryEagerGarbageCollector`. This is also the
* default garbage collector unless it is explicitly specified otherwise.
*/ function memoryEagerGarbageCollector() {
	return new __PRIVATE_MemoryEagerGarbageCollectorImpl();
}
/**
* Creates an instance of `MemoryLruGarbageCollector`.
*
* A target size can be specified as part of the setting parameter. The
* collector will start deleting documents once the cache size exceeds
* the given size. The default cache size is 40MB (40 * 1024 * 1024 bytes).
*/ function memoryLruGarbageCollector(e) {
	return new __PRIVATE_MemoryLruGarbageCollectorImpl(e?.cacheSizeBytes);
}
/**
* Creates an instance of `MemoryLocalCache`. The instance can be set to
* `FirestoreSettings.cache` to tell the SDK which cache layer to use.
*/ function memoryLocalCache(e) {
	return new __PRIVATE_MemoryLocalCacheImpl(e);
}
/**
* Creates an instance of `PersistentLocalCache`. The instance can be set to
* `FirestoreSettings.cache` to tell the SDK which cache layer to use.
*
* Persistent cache cannot be used in a Node.js environment.
*/ function persistentLocalCache(e) {
	return new __PRIVATE_PersistentLocalCacheImpl(e);
}
var __PRIVATE_SingleTabManagerImpl = class {
	constructor(e) {
		this.forceOwnership = e, this.kind = "persistentSingleTab";
	}
	toJSON() {
		return { kind: this.kind };
	}
	/**
	* @internal
	*/ _initialize(e) {
		this._onlineComponentProvider = OnlineComponentProvider.provider, this._offlineComponentProvider = { build: (t) => new __PRIVATE_IndexedDbOfflineComponentProvider(t, e?.cacheSizeBytes, this.forceOwnership) };
	}
};
var __PRIVATE_MultiTabManagerImpl = class {
	constructor() {
		this.kind = "PersistentMultipleTab";
	}
	toJSON() {
		return { kind: this.kind };
	}
	/**
	* @internal
	*/ _initialize(e) {
		this._onlineComponentProvider = OnlineComponentProvider.provider, this._offlineComponentProvider = { build: (t) => new __PRIVATE_MultiTabOfflineComponentProvider(t, e?.cacheSizeBytes) };
	}
};
/**
* Creates an instance of `PersistentSingleTabManager`.
*
* @param settings Configures the created tab manager.
*/ function persistentSingleTabManager(e) {
	return new __PRIVATE_SingleTabManagerImpl(e?.forceOwnership);
}
/**
* Creates an instance of `PersistentMultipleTabManager`.
*/ function persistentMultipleTabManager() {
	return new __PRIVATE_MultiTabManagerImpl();
}
/**
* @license
* Copyright 2022 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ var In = { maxAttempts: 5 };
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* A write batch, used to perform multiple writes as a single atomic unit.
*
* A `WriteBatch` object can be acquired by calling {@link writeBatch}. It
* provides methods for adding writes to the write batch. None of the writes
* will be committed (or visible locally) until {@link WriteBatch.commit} is
* called.
*/
var WriteBatch = class {
	/** @hideconstructor */
	constructor(e, t) {
		this._firestore = e, this._commitHandler = t, this._mutations = [], this._committed = !1, this._dataReader = __PRIVATE_newUserDataReader(e);
	}
	set(e, t, n) {
		this._verifyNotCommitted();
		const r = __PRIVATE_validateReference(e, this._firestore), i = __PRIVATE_applyFirestoreDataConverter(r.converter, t, n), s = __PRIVATE_parseSetData(this._dataReader, "WriteBatch.set", r._key, i, null !== r.converter, n);
		return this._mutations.push(s.toMutation(r._key, Precondition.none())), this;
	}
	update(e, t, n, ...r) {
		this._verifyNotCommitted();
		const i = __PRIVATE_validateReference(e, this._firestore);
		let s;
		return s = "string" == typeof (t = getModularInstance(t)) || t instanceof FieldPath ? __PRIVATE_parseUpdateVarargs(this._dataReader, "WriteBatch.update", i._key, t, n, r) : __PRIVATE_parseUpdateData(this._dataReader, "WriteBatch.update", i._key, t), this._mutations.push(s.toMutation(i._key, Precondition.exists(!0))), this;
	}
	/**
	* Deletes the document referred to by the provided {@link DocumentReference}.
	*
	* @param documentRef - A reference to the document to be deleted.
	* @returns This `WriteBatch` instance. Used for chaining method calls.
	*/ delete(e) {
		this._verifyNotCommitted();
		const t = __PRIVATE_validateReference(e, this._firestore);
		return this._mutations = this._mutations.concat(new __PRIVATE_DeleteMutation(t._key, Precondition.none())), this;
	}
	/**
	* Commits all of the writes in this write batch as a single atomic unit.
	*
	* The result of these writes will only be reflected in document reads that
	* occur after the returned promise resolves. If the client is offline, the
	* write fails. If you would like to see local modifications or buffer writes
	* until the client is online, use the full Firestore SDK.
	*
	* @returns A `Promise` resolved once all of the writes in the batch have been
	* successfully written to the backend as an atomic unit (note that it won't
	* resolve while you're offline).
	*/ commit() {
		return this._verifyNotCommitted(), this._committed = !0, this._mutations.length > 0 ? this._commitHandler(this._mutations) : Promise.resolve();
	}
	_verifyNotCommitted() {
		if (this._committed) throw new FirestoreError(N.FAILED_PRECONDITION, "A write batch can no longer be used after commit() has been called.");
	}
};
function __PRIVATE_validateReference(e, t) {
	if ((e = getModularInstance(e)).firestore !== t) throw new FirestoreError(N.INVALID_ARGUMENT, "Provided document reference is from a different Firestore instance.");
	return e;
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* A reference to a transaction.
*
* The `Transaction` object passed to a transaction's `updateFunction` provides
* the methods to read and write data within the transaction context. See
* {@link runTransaction}.
*/ var Transaction$1 = class {
	/** @hideconstructor */
	constructor(e, t) {
		this._firestore = e, this._transaction = t, this._dataReader = __PRIVATE_newUserDataReader(e);
	}
	/**
	* Reads the document referenced by the provided {@link DocumentReference}.
	*
	* @param documentRef - A reference to the document to be read.
	* @returns A `DocumentSnapshot` with the read data.
	*/ get(e) {
		const t = __PRIVATE_validateReference(e, this._firestore), n = new __PRIVATE_LiteUserDataWriter(this._firestore);
		return this._transaction.lookup([t._key]).then(((e$1) => {
			if (!e$1 || 1 !== e$1.length) return fail(24041);
			const r = e$1[0];
			if (r.isFoundDocument()) return new DocumentSnapshot$1(this._firestore, n, r.key, r, t.converter);
			if (r.isNoDocument()) return new DocumentSnapshot$1(this._firestore, n, t._key, null, t.converter);
			throw fail(18433, { doc: r });
		}));
	}
	set(e, t, n) {
		const r = __PRIVATE_validateReference(e, this._firestore), i = __PRIVATE_applyFirestoreDataConverter(r.converter, t, n), s = __PRIVATE_parseSetData(this._dataReader, "Transaction.set", r._key, i, null !== r.converter, n);
		return this._transaction.set(r._key, s), this;
	}
	update(e, t, n, ...r) {
		const i = __PRIVATE_validateReference(e, this._firestore);
		let s;
		return s = "string" == typeof (t = getModularInstance(t)) || t instanceof FieldPath ? __PRIVATE_parseUpdateVarargs(this._dataReader, "Transaction.update", i._key, t, n, r) : __PRIVATE_parseUpdateData(this._dataReader, "Transaction.update", i._key, t), this._transaction.update(i._key, s), this;
	}
	/**
	* Deletes the document referred to by the provided {@link DocumentReference}.
	*
	* @param documentRef - A reference to the document to be deleted.
	* @returns This `Transaction` instance. Used for chaining method calls.
	*/ delete(e) {
		const t = __PRIVATE_validateReference(e, this._firestore);
		return this._transaction.delete(t._key), this;
	}
};
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* A reference to a transaction.
*
* The `Transaction` object passed to a transaction's `updateFunction` provides
* the methods to read and write data within the transaction context. See
* {@link runTransaction}.
*/ var Transaction = class extends Transaction$1 {
	/** @hideconstructor */
	constructor(e, t) {
		super(e, t), this._firestore = e;
	}
	/**
	* Reads the document referenced by the provided {@link DocumentReference}.
	*
	* @param documentRef - A reference to the document to be read.
	* @returns A `DocumentSnapshot` with the read data.
	*/ get(e) {
		const t = __PRIVATE_validateReference(e, this._firestore), n = new __PRIVATE_ExpUserDataWriter(this._firestore);
		return super.get(e).then(((e$1) => new DocumentSnapshot(this._firestore, n, t._key, e$1._document, new SnapshotMetadata(!1, !1), t.converter)));
	}
};
/**
* Executes the given `updateFunction` and then attempts to commit the changes
* applied within the transaction. If any document read within the transaction
* has changed, Cloud Firestore retries the `updateFunction`. If it fails to
* commit after 5 attempts, the transaction fails.
*
* The maximum number of writes allowed in a single transaction is 500.
*
* @param firestore - A reference to the Firestore database to run this
* transaction against.
* @param updateFunction - The function to execute within the transaction
* context.
* @param options - An options object to configure maximum number of attempts to
* commit.
* @returns If the transaction completed successfully or was explicitly aborted
* (the `updateFunction` returned a failed promise), the promise returned by the
* `updateFunction `is returned here. Otherwise, if the transaction failed, a
* rejected promise with the corresponding failure error is returned.
*/ function runTransaction(e, t, n) {
	e = __PRIVATE_cast(e, Firestore);
	const r = {
		...In,
		...n
	};
	(function __PRIVATE_validateTransactionOptions(e$1) {
		if (e$1.maxAttempts < 1) throw new FirestoreError(N.INVALID_ARGUMENT, "Max attempts must be at least 1");
	})(r);
	return function __PRIVATE_firestoreClientTransaction(e$1, t$1, n$1) {
		const r$1 = new __PRIVATE_Deferred();
		return e$1.asyncQueue.enqueueAndForget((async () => {
			const i = await __PRIVATE_getDatastore(e$1);
			new __PRIVATE_TransactionRunner(e$1.asyncQueue, i, n$1, t$1, r$1).ju();
		})), r$1.promise;
	}(ensureFirestoreConfigured(e), ((n$1) => t(new Transaction(e, n$1))), r);
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Returns a sentinel for use with {@link @firebase/firestore/lite#(updateDoc:1)} or
* {@link @firebase/firestore/lite#(setDoc:1)} with `{merge: true}` to mark a field for deletion.
*/ function deleteField() {
	return new __PRIVATE_DeleteFieldValueImpl("deleteField");
}
/**
* Returns a sentinel used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link @firebase/firestore/lite#(updateDoc:1)} to
* include a server-generated timestamp in the written data.
*/ function serverTimestamp() {
	return new __PRIVATE_ServerTimestampFieldValueImpl("serverTimestamp");
}
/**
* Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link
* @firebase/firestore/lite#(updateDoc:1)} that tells the server to union the given elements with any array
* value that already exists on the server. Each specified element that doesn't
* already exist in the array will be added to the end. If the field being
* modified is not already an array it will be overwritten with an array
* containing exactly the specified elements.
*
* @param elements - The elements to union into the array.
* @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
* `updateDoc()`.
*/ function arrayUnion(...e) {
	return new __PRIVATE_ArrayUnionFieldValueImpl("arrayUnion", e);
}
/**
* Returns a special value that can be used with {@link (setDoc:1)} or {@link
* updateDoc:1} that tells the server to remove the given elements from any
* array value that already exists on the server. All instances of each element
* specified will be removed from the array. If the field being modified is not
* already an array it will be overwritten with an empty array.
*
* @param elements - The elements to remove from the array.
* @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
* `updateDoc()`
*/ function arrayRemove(...e) {
	return new __PRIVATE_ArrayRemoveFieldValueImpl("arrayRemove", e);
}
/**
* Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link
* @firebase/firestore/lite#(updateDoc:1)} that tells the server to increment the field's current value by
* the given value.
*
* If either the operand or the current field value uses floating point
* precision, all arithmetic follows IEEE 754 semantics. If both values are
* integers, values outside of JavaScript's safe number range
* (`Number.MIN_SAFE_INTEGER` to `Number.MAX_SAFE_INTEGER`) are also subject to
* precision loss. Furthermore, once processed by the Firestore backend, all
* integer operations are capped between -2^63 and 2^63-1.
*
* If the current field value is not of type `number`, or if the field does not
* yet exist, the transformation sets the field to the given value.
*
* @param n - The value to increment by.
* @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
* `updateDoc()`
*/ function increment(e) {
	return new __PRIVATE_NumericIncrementFieldValueImpl("increment", e);
}
/**
* Creates a new `VectorValue` constructed with a copy of the given array of numbers.
*
* @param values - Create a `VectorValue` instance with a copy of this array of numbers.
*
* @returns A new `VectorValue` constructed with a copy of the given array of numbers.
*/ function vector(e) {
	return new VectorValue(e);
}
/**
* @license
* Copyright 2020 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Creates a write batch, used for performing multiple writes as a single
* atomic operation. The maximum number of writes allowed in a single {@link WriteBatch}
* is 500.
*
* Unlike transactions, write batches are persisted offline and therefore are
* preferable when you don't need to condition your writes on read data.
*
* @returns A {@link WriteBatch} that can be used to atomically execute multiple
* writes.
*/ function writeBatch(e) {
	return ensureFirestoreConfigured(e = __PRIVATE_cast(e, Firestore)), new WriteBatch(e, ((t) => executeWrite(e, t)));
}
/**
* @license
* Copyright 2021 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/ function setIndexConfiguration(e, t) {
	const n = ensureFirestoreConfigured(e = __PRIVATE_cast(e, Firestore));
	if (!n._uninitializedComponentsProvider || "memory" === n._uninitializedComponentsProvider._offline.kind) return __PRIVATE_logWarn("Cannot enable indexes when persistence is disabled"), Promise.resolve();
	const r = function __PRIVATE_parseIndexes(e$1) {
		const t$1 = "string" == typeof e$1 ? function __PRIVATE_tryParseJson(e$2) {
			try {
				return JSON.parse(e$2);
			} catch (e$3) {
				throw new FirestoreError(N.INVALID_ARGUMENT, "Failed to parse JSON: " + e$3?.message);
			}
		}(e$1) : e$1, n$1 = [];
		if (Array.isArray(t$1.indexes)) for (const e$2 of t$1.indexes) {
			const t$2 = __PRIVATE_tryGetString(e$2, "collectionGroup"), r$1 = [];
			if (Array.isArray(e$2.fields)) for (const t$3 of e$2.fields) {
				const e$3 = __PRIVATE_fieldPathFromDotSeparatedString("setIndexConfiguration", __PRIVATE_tryGetString(t$3, "fieldPath"));
				"CONTAINS" === t$3.arrayConfig ? r$1.push(new IndexSegment(e$3, 2)) : "ASCENDING" === t$3.order ? r$1.push(new IndexSegment(e$3, 0)) : "DESCENDING" === t$3.order && r$1.push(new IndexSegment(e$3, 1));
			}
			n$1.push(new FieldIndex(FieldIndex.UNKNOWN_ID, t$2, r$1, IndexState.empty()));
		}
		return n$1;
	}(t);
	return __PRIVATE_firestoreClientSetIndexConfiguration(n, r);
}
function __PRIVATE_tryGetString(e, t) {
	if ("string" != typeof e[t]) throw new FirestoreError(N.INVALID_ARGUMENT, "Missing string value for: " + t);
	return e[t];
}
/**
* @license
* Copyright 2023 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* A `PersistentCacheIndexManager` for configuring persistent cache indexes used
* for local query execution.
*
* To use, call `getPersistentCacheIndexManager()` to get an instance.
*/ var PersistentCacheIndexManager = class {
	/** @hideconstructor */
	constructor(e) {
		this._firestore = e, this.type = "PersistentCacheIndexManager";
	}
};
/**
* Returns the PersistentCache Index Manager used by the given `Firestore`
* object.
*
* @return The `PersistentCacheIndexManager` instance, or `null` if local
* persistent storage is not in use.
*/ function getPersistentCacheIndexManager(e) {
	e = __PRIVATE_cast(e, Firestore);
	const t = En.get(e);
	if (t) return t;
	if ("persistent" !== ensureFirestoreConfigured(e)._uninitializedComponentsProvider?._offline.kind) return null;
	const r = new PersistentCacheIndexManager(e);
	return En.set(e, r), r;
}
/**
* Enables the SDK to create persistent cache indexes automatically for local
* query execution when the SDK believes cache indexes can help improve
* performance.
*
* This feature is disabled by default.
*/ function enablePersistentCacheIndexAutoCreation(e) {
	__PRIVATE_setPersistentCacheIndexAutoCreationEnabled(e, !0);
}
/**
* Stops creating persistent cache indexes automatically for local query
* execution. The indexes which have been created by calling
* `enablePersistentCacheIndexAutoCreation()` still take effect.
*/ function disablePersistentCacheIndexAutoCreation(e) {
	__PRIVATE_setPersistentCacheIndexAutoCreationEnabled(e, !1);
}
/**
* Removes all persistent cache indexes.
*
* Please note this function will also deletes indexes generated by
* `setIndexConfiguration()`, which is deprecated.
*/ function deleteAllPersistentCacheIndexes(e) {
	__PRIVATE_firestoreClientDeleteAllFieldIndexes(ensureFirestoreConfigured(e._firestore)).then(((e$1) => __PRIVATE_logDebug("deleting all persistent cache indexes succeeded"))).catch(((e$1) => __PRIVATE_logWarn("deleting all persistent cache indexes failed", e$1)));
}
function __PRIVATE_setPersistentCacheIndexAutoCreationEnabled(e, t) {
	__PRIVATE_firestoreClientSetPersistentCacheIndexAutoCreationEnabled(ensureFirestoreConfigured(e._firestore), t).then(((e$1) => __PRIVATE_logDebug(`setting persistent cache index auto creation isEnabled=${t} succeeded`))).catch(((e$1) => __PRIVATE_logWarn(`setting persistent cache index auto creation isEnabled=${t} failed`, e$1)));
}
/**
* Maps `Firestore` instances to their corresponding
* `PersistentCacheIndexManager` instances.
*
* Use a `WeakMap` so that the mapping will be automatically dropped when the
* `Firestore` instance is garbage collected. This emulates a private member
* as described in https://goo.gle/454yvug.
*/ var En = /* @__PURE__ */ new WeakMap();
/**
* @license
* Copyright 2017 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* @internal
* @private
*
* This function is for internal use only.
*
* Returns the `QueryTarget` representation of the given query. Returns `null`
* if the Firestore client associated with the given query has not been
* initialized or has been terminated.
*
* @param query - The Query to convert to proto representation.
*/
function _internalQueryToProtoQueryTarget(e) {
	const n = ensureFirestoreConfigured(__PRIVATE_cast(e.firestore, Firestore))._onlineComponents?.datastore.serializer;
	return void 0 === n ? null : __PRIVATE_toQueryTarget(n, __PRIVATE_queryToTarget(e._query)).ft;
}
/**
* @internal
* @private
*
* This function is for internal use only.
*
* Returns `RunAggregationQueryRequest` which contains the proto representation
* of the given aggregation query request. Returns null if the Firestore client
* associated with the given query has not been initialized or has been
* terminated.
*
* @param query - The Query to convert to proto representation.
* @param aggregateSpec - The set of aggregations and their aliases.
*/ function _internalAggregationQueryToProtoRunAggregationQueryRequest(e, t) {
	const n = __PRIVATE_mapToArray(t, ((e$1, t$1) => new __PRIVATE_AggregateImpl(t$1, e$1.aggregateType, e$1._internalFieldPath))), i = ensureFirestoreConfigured(__PRIVATE_cast(e.firestore, Firestore))._onlineComponents?.datastore.serializer;
	return void 0 === i ? null : __PRIVATE_toRunAggregationQueryRequest(i, __PRIVATE_queryToAggregateTarget(e._query), n, !0).request;
}
/**
* @license
* Copyright 2023 Google LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* Testing hooks for use by Firestore's integration test suite to reach into the
* SDK internals to validate logic and behavior that is not visible from the
* public API surface.
*
* @internal
*/ var TestingHooks = class {
	constructor() {
		throw new Error("instances of this class should not be created");
	}
	/**
	* Registers a callback to be notified when an existence filter mismatch
	* occurs in the Watch listen stream.
	*
	* The relative order in which callbacks are notified is unspecified; do not
	* rely on any particular ordering. If a given callback is registered multiple
	* times then it will be notified multiple times, once per registration.
	*
	* @param callback the callback to invoke upon existence filter mismatch.
	*
	* @return a function that, when called, unregisters the given callback; only
	* the first invocation of the returned function does anything; all subsequent
	* invocations do nothing.
	*/ static onExistenceFilterMismatch(e) {
		return __PRIVATE_TestingHooksSpiImpl.instance.onExistenceFilterMismatch(e);
	}
};
/**
* The implementation of `TestingHooksSpi`.
*/ var __PRIVATE_TestingHooksSpiImpl = class __PRIVATE_TestingHooksSpiImpl {
	constructor() {
		this.Mc = /* @__PURE__ */ new Map();
	}
	static get instance() {
		return dn || (dn = new __PRIVATE_TestingHooksSpiImpl(), function __PRIVATE_setTestingHooksSpi(e) {
			if (wt) throw new Error("a TestingHooksSpi instance is already set");
			wt = e;
		}(dn)), dn;
	}
	lt(e) {
		this.Mc.forEach(((t) => t(e)));
	}
	onExistenceFilterMismatch(e) {
		const t = Symbol(), n = this.Mc;
		return n.set(t, e), () => n.delete(t);
	}
};
var dn = null;
/**
* Cloud Firestore
*
* @packageDocumentation
*/ (function __PRIVATE_registerFirestore(e, t = !0) {
	(function __PRIVATE_setSDKVersion(e$1) {
		x = e$1;
	})(SDK_VERSION), _registerComponent(new Component("firestore", ((e$1, { instanceIdentifier: n, options: r }) => {
		const i = e$1.getProvider("app").getImmediate(), s = new Firestore(new __PRIVATE_FirebaseAuthCredentialsProvider(e$1.getProvider("auth-internal")), new __PRIVATE_FirebaseAppCheckTokenProvider(i, e$1.getProvider("app-check-internal")), function __PRIVATE_databaseIdFromApp(e$2, t$1) {
			if (!Object.prototype.hasOwnProperty.apply(e$2.options, ["projectId"])) throw new FirestoreError(N.INVALID_ARGUMENT, "\"projectId\" not provided in firebase.initializeApp.");
			return new DatabaseId(e$2.options.projectId, t$1);
		}(i, n), i);
		return r = {
			useFetchStreams: t,
			...r
		}, s._setSettings(r), s;
	}), "PUBLIC").setMultipleInstances(!0)), registerVersion(F, M, e), registerVersion(F, M, "esm2020");
})();

//#endregion
export { AbstractUserDataWriter, AggregateField, AggregateQuerySnapshot, Bytes, ln as CACHE_SIZE_UNLIMITED, CollectionReference, DocumentReference, DocumentSnapshot, FieldPath, FieldValue, Firestore, FirestoreError, GeoPoint, LoadBundleTask, PersistentCacheIndexManager, Query, QueryCompositeFilterConstraint, QueryConstraint, QueryDocumentSnapshot, QueryEndAtConstraint, QueryFieldFilterConstraint, QueryLimitConstraint, QueryOrderByConstraint, QuerySnapshot, QueryStartAtConstraint, SnapshotMetadata, Timestamp, Transaction, VectorValue, WriteBatch, __PRIVATE_AutoId as _AutoId, ByteString as _ByteString, DatabaseId as _DatabaseId, DocumentKey as _DocumentKey, __PRIVATE_EmptyAppCheckTokenProvider as _EmptyAppCheckTokenProvider, __PRIVATE_EmptyAuthCredentialsProvider as _EmptyAuthCredentialsProvider, FieldPath$1 as _FieldPath, TestingHooks as _TestingHooks, __PRIVATE_cast as _cast, __PRIVATE_debugAssert as _debugAssert, _internalAggregationQueryToProtoRunAggregationQueryRequest, _internalQueryToProtoQueryTarget, __PRIVATE_isBase64Available as _isBase64Available, __PRIVATE_logWarn as _logWarn, __PRIVATE_validateIsNotUsedTogether as _validateIsNotUsedTogether, addDoc, aggregateFieldEqual, aggregateQuerySnapshotEqual, and, arrayRemove, arrayUnion, average, clearIndexedDbPersistence, collection, collectionGroup, connectFirestoreEmulator, count, deleteAllPersistentCacheIndexes, deleteDoc, deleteField, disableNetwork, disablePersistentCacheIndexAutoCreation, doc, documentId, documentSnapshotFromJSON, enableIndexedDbPersistence, enableMultiTabIndexedDbPersistence, enableNetwork, enablePersistentCacheIndexAutoCreation, endAt, endBefore, ensureFirestoreConfigured, executeWrite, getAggregateFromServer, getCountFromServer, getDoc, getDocFromCache, getDocFromServer, getDocs, getDocsFromCache, getDocsFromServer, getFirestore, getPersistentCacheIndexManager, increment, initializeFirestore, limit, limitToLast, loadBundle, memoryEagerGarbageCollector, memoryLocalCache, memoryLruGarbageCollector, namedQuery, onSnapshot, onSnapshotResume, onSnapshotsInSync, or, orderBy, persistentLocalCache, persistentMultipleTabManager, persistentSingleTabManager, query, queryEqual, querySnapshotFromJSON, refEqual, runTransaction, serverTimestamp, setDoc, setIndexConfiguration, setLogLevel, snapshotEqual, startAfter, startAt, sum, terminate, updateDoc, vector, waitForPendingWrites, where, writeBatch };
//# sourceMappingURL=firebase_firestore.js.map