{"version":3,"file":"firebase_storage.js","names":["name","version","canceled","stop","BlobBuilder","start","url","ref"],"sources":["../../@firebase/storage/dist/index.esm.js"],"sourcesContent":["import { _isFirebaseServerApp, _getProvider, getApp, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { FirebaseError, isCloudWorkstation, pingServer, updateEmulatorBanner, createMockUserToken, getModularInstance, getDefaultEmulatorHostnameAndPort } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n/**\n * Domain name for firebase storage.\n */\nconst DEFAULT_HOST = 'firebasestorage.googleapis.com';\n/**\n * The key in Firebase config json for the storage bucket.\n */\nconst CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\nconst DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\nconst DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n/**\n * 1 second\n */\nconst DEFAULT_MIN_SLEEP_TIME_MILLIS = 1000;\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An error returned by the Firebase Storage SDK.\n * @public\n */\nclass StorageError extends FirebaseError {\n    /**\n     * @param code - A `StorageErrorCode` string to be prefixed with 'storage/' and\n     *  added to the end of the message.\n     * @param message  - Error message.\n     * @param status_ - Corresponding HTTP Status Code\n     */\n    constructor(code, message, status_ = 0) {\n        super(prependCode(code), `Firebase Storage: ${message} (${prependCode(code)})`);\n        this.status_ = status_;\n        /**\n         * Stores custom error data unique to the `StorageError`.\n         */\n        this.customData = { serverResponse: null };\n        this._baseMessage = this.message;\n        // Without this, `instanceof StorageError`, in tests for example,\n        // returns false.\n        Object.setPrototypeOf(this, StorageError.prototype);\n    }\n    get status() {\n        return this.status_;\n    }\n    set status(status) {\n        this.status_ = status;\n    }\n    /**\n     * Compares a `StorageErrorCode` against this error's code, filtering out the prefix.\n     */\n    _codeEquals(code) {\n        return prependCode(code) === this.code;\n    }\n    /**\n     * Optional response message that was added by the server.\n     */\n    get serverResponse() {\n        return this.customData.serverResponse;\n    }\n    set serverResponse(serverResponse) {\n        this.customData.serverResponse = serverResponse;\n        if (this.customData.serverResponse) {\n            this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n        }\n        else {\n            this.message = this._baseMessage;\n        }\n    }\n}\n/**\n * @public\n * Error codes that can be attached to `StorageError` objects.\n */\nvar StorageErrorCode;\n(function (StorageErrorCode) {\n    // Shared between all platforms\n    StorageErrorCode[\"UNKNOWN\"] = \"unknown\";\n    StorageErrorCode[\"OBJECT_NOT_FOUND\"] = \"object-not-found\";\n    StorageErrorCode[\"BUCKET_NOT_FOUND\"] = \"bucket-not-found\";\n    StorageErrorCode[\"PROJECT_NOT_FOUND\"] = \"project-not-found\";\n    StorageErrorCode[\"QUOTA_EXCEEDED\"] = \"quota-exceeded\";\n    StorageErrorCode[\"UNAUTHENTICATED\"] = \"unauthenticated\";\n    StorageErrorCode[\"UNAUTHORIZED\"] = \"unauthorized\";\n    StorageErrorCode[\"UNAUTHORIZED_APP\"] = \"unauthorized-app\";\n    StorageErrorCode[\"RETRY_LIMIT_EXCEEDED\"] = \"retry-limit-exceeded\";\n    StorageErrorCode[\"INVALID_CHECKSUM\"] = \"invalid-checksum\";\n    StorageErrorCode[\"CANCELED\"] = \"canceled\";\n    // JS specific\n    StorageErrorCode[\"INVALID_EVENT_NAME\"] = \"invalid-event-name\";\n    StorageErrorCode[\"INVALID_URL\"] = \"invalid-url\";\n    StorageErrorCode[\"INVALID_DEFAULT_BUCKET\"] = \"invalid-default-bucket\";\n    StorageErrorCode[\"NO_DEFAULT_BUCKET\"] = \"no-default-bucket\";\n    StorageErrorCode[\"CANNOT_SLICE_BLOB\"] = \"cannot-slice-blob\";\n    StorageErrorCode[\"SERVER_FILE_WRONG_SIZE\"] = \"server-file-wrong-size\";\n    StorageErrorCode[\"NO_DOWNLOAD_URL\"] = \"no-download-url\";\n    StorageErrorCode[\"INVALID_ARGUMENT\"] = \"invalid-argument\";\n    StorageErrorCode[\"INVALID_ARGUMENT_COUNT\"] = \"invalid-argument-count\";\n    StorageErrorCode[\"APP_DELETED\"] = \"app-deleted\";\n    StorageErrorCode[\"INVALID_ROOT_OPERATION\"] = \"invalid-root-operation\";\n    StorageErrorCode[\"INVALID_FORMAT\"] = \"invalid-format\";\n    StorageErrorCode[\"INTERNAL_ERROR\"] = \"internal-error\";\n    StorageErrorCode[\"UNSUPPORTED_ENVIRONMENT\"] = \"unsupported-environment\";\n})(StorageErrorCode || (StorageErrorCode = {}));\nfunction prependCode(code) {\n    return 'storage/' + code;\n}\nfunction unknown() {\n    const message = 'An unknown error occurred, please check the error payload for ' +\n        'server response.';\n    return new StorageError(StorageErrorCode.UNKNOWN, message);\n}\nfunction objectNotFound(path) {\n    return new StorageError(StorageErrorCode.OBJECT_NOT_FOUND, \"Object '\" + path + \"' does not exist.\");\n}\nfunction quotaExceeded(bucket) {\n    return new StorageError(StorageErrorCode.QUOTA_EXCEEDED, \"Quota for bucket '\" +\n        bucket +\n        \"' exceeded, please view quota on \" +\n        'https://firebase.google.com/pricing/.');\n}\nfunction unauthenticated() {\n    const message = 'User is not authenticated, please authenticate using Firebase ' +\n        'Authentication and try again.';\n    return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\nfunction unauthorizedApp() {\n    return new StorageError(StorageErrorCode.UNAUTHORIZED_APP, 'This app does not have permission to access Firebase Storage on this project.');\n}\nfunction unauthorized(path) {\n    return new StorageError(StorageErrorCode.UNAUTHORIZED, \"User does not have permission to access '\" + path + \"'.\");\n}\nfunction retryLimitExceeded() {\n    return new StorageError(StorageErrorCode.RETRY_LIMIT_EXCEEDED, 'Max retry time for operation exceeded, please try again.');\n}\nfunction canceled() {\n    return new StorageError(StorageErrorCode.CANCELED, 'User canceled the upload/download.');\n}\nfunction invalidUrl(url) {\n    return new StorageError(StorageErrorCode.INVALID_URL, \"Invalid URL '\" + url + \"'.\");\n}\nfunction invalidDefaultBucket(bucket) {\n    return new StorageError(StorageErrorCode.INVALID_DEFAULT_BUCKET, \"Invalid default bucket '\" + bucket + \"'.\");\n}\nfunction noDefaultBucket() {\n    return new StorageError(StorageErrorCode.NO_DEFAULT_BUCKET, 'No default bucket ' +\n        \"found. Did you set the '\" +\n        CONFIG_STORAGE_BUCKET_KEY +\n        \"' property when initializing the app?\");\n}\nfunction cannotSliceBlob() {\n    return new StorageError(StorageErrorCode.CANNOT_SLICE_BLOB, 'Cannot slice blob for upload. Please retry the upload.');\n}\nfunction serverFileWrongSize() {\n    return new StorageError(StorageErrorCode.SERVER_FILE_WRONG_SIZE, 'Server recorded incorrect upload file size, please retry the upload.');\n}\nfunction noDownloadURL() {\n    return new StorageError(StorageErrorCode.NO_DOWNLOAD_URL, 'The given file does not have any download URLs.');\n}\nfunction missingPolyFill(polyFill) {\n    return new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, `${polyFill} is missing. Make sure to install the required polyfills. See https://firebase.google.com/docs/web/environments-js-sdk#polyfills for more information.`);\n}\n/**\n * @internal\n */\nfunction invalidArgument(message) {\n    return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\nfunction appDeleted() {\n    return new StorageError(StorageErrorCode.APP_DELETED, 'The Firebase app was deleted.');\n}\n/**\n * @param name - The name of the operation that was invalid.\n *\n * @internal\n */\nfunction invalidRootOperation(name) {\n    return new StorageError(StorageErrorCode.INVALID_ROOT_OPERATION, \"The operation '\" +\n        name +\n        \"' cannot be performed on a root reference, create a non-root \" +\n        \"reference using child, such as .child('file.png').\");\n}\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nfunction invalidFormat(format, message) {\n    return new StorageError(StorageErrorCode.INVALID_FORMAT, \"String does not match format '\" + format + \"': \" + message);\n}\n/**\n * @param message - A message describing the internal error.\n */\nfunction internalError(message) {\n    throw new StorageError(StorageErrorCode.INTERNAL_ERROR, 'Internal error: ' + message);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Firebase Storage location data.\n *\n * @internal\n */\nclass Location {\n    constructor(bucket, path) {\n        this.bucket = bucket;\n        this.path_ = path;\n    }\n    get path() {\n        return this.path_;\n    }\n    get isRoot() {\n        return this.path.length === 0;\n    }\n    fullServerUrl() {\n        const encode = encodeURIComponent;\n        return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n    }\n    bucketOnlyServerUrl() {\n        const encode = encodeURIComponent;\n        return '/b/' + encode(this.bucket) + '/o';\n    }\n    static makeFromBucketSpec(bucketString, host) {\n        let bucketLocation;\n        try {\n            bucketLocation = Location.makeFromUrl(bucketString, host);\n        }\n        catch (e) {\n            // Not valid URL, use as-is. This lets you put bare bucket names in\n            // config.\n            return new Location(bucketString, '');\n        }\n        if (bucketLocation.path === '') {\n            return bucketLocation;\n        }\n        else {\n            throw invalidDefaultBucket(bucketString);\n        }\n    }\n    static makeFromUrl(url, host) {\n        let location = null;\n        const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n        function gsModify(loc) {\n            if (loc.path.charAt(loc.path.length - 1) === '/') {\n                loc.path_ = loc.path_.slice(0, -1);\n            }\n        }\n        const gsPath = '(/(.*))?$';\n        const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n        const gsIndices = { bucket: 1, path: 3 };\n        function httpModify(loc) {\n            loc.path_ = decodeURIComponent(loc.path);\n        }\n        const version = 'v[A-Za-z0-9_]+';\n        const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n        const firebaseStoragePath = '(/([^?#]*).*)?$';\n        const firebaseStorageRegExp = new RegExp(`^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`, 'i');\n        const firebaseStorageIndices = { bucket: 1, path: 3 };\n        const cloudStorageHost = host === DEFAULT_HOST\n            ? '(?:storage.googleapis.com|storage.cloud.google.com)'\n            : host;\n        const cloudStoragePath = '([^?#]*)';\n        const cloudStorageRegExp = new RegExp(`^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`, 'i');\n        const cloudStorageIndices = { bucket: 1, path: 2 };\n        const groups = [\n            { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n            {\n                regex: firebaseStorageRegExp,\n                indices: firebaseStorageIndices,\n                postModify: httpModify\n            },\n            {\n                regex: cloudStorageRegExp,\n                indices: cloudStorageIndices,\n                postModify: httpModify\n            }\n        ];\n        for (let i = 0; i < groups.length; i++) {\n            const group = groups[i];\n            const captures = group.regex.exec(url);\n            if (captures) {\n                const bucketValue = captures[group.indices.bucket];\n                let pathValue = captures[group.indices.path];\n                if (!pathValue) {\n                    pathValue = '';\n                }\n                location = new Location(bucketValue, pathValue);\n                group.postModify(location);\n                break;\n            }\n        }\n        if (location == null) {\n            throw invalidUrl(url);\n        }\n        return location;\n    }\n}\n\n/**\n * A request whose promise always fails.\n */\nclass FailRequest {\n    constructor(error) {\n        this.promise_ = Promise.reject(error);\n    }\n    /** @inheritDoc */\n    getPromise() {\n        return this.promise_;\n    }\n    /** @inheritDoc */\n    cancel(_appDelete = false) { }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Accepts a callback for an action to perform (`doRequest`),\n * and then a callback for when the backoff has completed (`backoffCompleteCb`).\n * The callback sent to start requires an argument to call (`onRequestComplete`).\n * When `start` calls `doRequest`, it passes a callback for when the request has\n * completed, `onRequestComplete`. Based on this, the backoff continues, with\n * another call to `doRequest` and the above loop continues until the timeout\n * is hit, or a successful response occurs.\n * @description\n * @param doRequest Callback to perform request\n * @param backoffCompleteCb Callback to call when backoff has been completed\n */\nfunction start(doRequest, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nbackoffCompleteCb, timeout) {\n    // TODO(andysoto): make this code cleaner (probably refactor into an actual\n    // type instead of a bunch of functions with state shared in the closure)\n    let waitSeconds = 1;\n    // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n    // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let retryTimeoutId = null;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let globalTimeoutId = null;\n    let hitTimeout = false;\n    let cancelState = 0;\n    function canceled() {\n        return cancelState === 2;\n    }\n    let triggeredCallback = false;\n    function triggerCallback(...args) {\n        if (!triggeredCallback) {\n            triggeredCallback = true;\n            backoffCompleteCb.apply(null, args);\n        }\n    }\n    function callWithDelay(millis) {\n        retryTimeoutId = setTimeout(() => {\n            retryTimeoutId = null;\n            doRequest(responseHandler, canceled());\n        }, millis);\n    }\n    function clearGlobalTimeout() {\n        if (globalTimeoutId) {\n            clearTimeout(globalTimeoutId);\n        }\n    }\n    function responseHandler(success, ...args) {\n        if (triggeredCallback) {\n            clearGlobalTimeout();\n            return;\n        }\n        if (success) {\n            clearGlobalTimeout();\n            triggerCallback.call(null, success, ...args);\n            return;\n        }\n        const mustStop = canceled() || hitTimeout;\n        if (mustStop) {\n            clearGlobalTimeout();\n            triggerCallback.call(null, success, ...args);\n            return;\n        }\n        if (waitSeconds < 64) {\n            /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n            waitSeconds *= 2;\n        }\n        let waitMillis;\n        if (cancelState === 1) {\n            cancelState = 2;\n            waitMillis = 0;\n        }\n        else {\n            waitMillis = (waitSeconds + Math.random()) * 1000;\n        }\n        callWithDelay(waitMillis);\n    }\n    let stopped = false;\n    function stop(wasTimeout) {\n        if (stopped) {\n            return;\n        }\n        stopped = true;\n        clearGlobalTimeout();\n        if (triggeredCallback) {\n            return;\n        }\n        if (retryTimeoutId !== null) {\n            if (!wasTimeout) {\n                cancelState = 2;\n            }\n            clearTimeout(retryTimeoutId);\n            callWithDelay(0);\n        }\n        else {\n            if (!wasTimeout) {\n                cancelState = 1;\n            }\n        }\n    }\n    callWithDelay(0);\n    globalTimeoutId = setTimeout(() => {\n        hitTimeout = true;\n        stop(true);\n    }, timeout);\n    return stop;\n}\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nfunction stop(id) {\n    id(false);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction isJustDef(p) {\n    return p !== void 0;\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isFunction(p) {\n    return typeof p === 'function';\n}\nfunction isNonArrayObject(p) {\n    return typeof p === 'object' && !Array.isArray(p);\n}\nfunction isString(p) {\n    return typeof p === 'string' || p instanceof String;\n}\nfunction isNativeBlob(p) {\n    return isNativeBlobDefined() && p instanceof Blob;\n}\nfunction isNativeBlobDefined() {\n    return typeof Blob !== 'undefined';\n}\nfunction validateNumber(argument, minValue, maxValue, value) {\n    if (value < minValue) {\n        throw invalidArgument(`Invalid value for '${argument}'. Expected ${minValue} or greater.`);\n    }\n    if (value > maxValue) {\n        throw invalidArgument(`Invalid value for '${argument}'. Expected ${maxValue} or less.`);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction makeUrl(urlPart, host, protocol) {\n    let origin = host;\n    if (protocol == null) {\n        origin = `https://${host}`;\n    }\n    return `${protocol}://${origin}/v0${urlPart}`;\n}\nfunction makeQueryString(params) {\n    const encode = encodeURIComponent;\n    let queryPart = '?';\n    for (const key in params) {\n        if (params.hasOwnProperty(key)) {\n            const nextPart = encode(key) + '=' + encode(params[key]);\n            queryPart = queryPart + nextPart + '&';\n        }\n    }\n    // Chop off the extra '&' or '?' on the end\n    queryPart = queryPart.slice(0, -1);\n    return queryPart;\n}\n\n/**\n * Error codes for requests made by the XhrIo wrapper.\n */\nvar ErrorCode;\n(function (ErrorCode) {\n    ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\n    ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\n    ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\n})(ErrorCode || (ErrorCode = {}));\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Checks the status code to see if the action should be retried.\n *\n * @param status Current HTTP status code returned by server.\n * @param additionalRetryCodes additional retry codes to check against\n */\nfunction isRetryStatusCode(status, additionalRetryCodes) {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    const isFiveHundredCode = status >= 500 && status < 600;\n    const extraRetryCodes = [\n        // Request Timeout: web server didn't receive full request in time.\n        408,\n        // Too Many Requests: you're getting rate-limited, basically.\n        429\n    ];\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n    const isAdditionalRetryCode = additionalRetryCodes.indexOf(status) !== -1;\n    return isFiveHundredCode || isExtraRetryCode || isAdditionalRetryCode;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Handles network logic for all Storage Requests, including error reporting and\n * retries with backoff.\n *\n * @param I - the type of the backend's network response.\n * @param - O the output type used by the rest of the SDK. The conversion\n * happens in the specified `callback_`.\n */\nclass NetworkRequest {\n    constructor(url_, method_, headers_, body_, successCodes_, additionalRetryCodes_, callback_, errorCallback_, timeout_, progressCallback_, connectionFactory_, retry = true, isUsingEmulator = false) {\n        this.url_ = url_;\n        this.method_ = method_;\n        this.headers_ = headers_;\n        this.body_ = body_;\n        this.successCodes_ = successCodes_;\n        this.additionalRetryCodes_ = additionalRetryCodes_;\n        this.callback_ = callback_;\n        this.errorCallback_ = errorCallback_;\n        this.timeout_ = timeout_;\n        this.progressCallback_ = progressCallback_;\n        this.connectionFactory_ = connectionFactory_;\n        this.retry = retry;\n        this.isUsingEmulator = isUsingEmulator;\n        this.pendingConnection_ = null;\n        this.backoffId_ = null;\n        this.canceled_ = false;\n        this.appDelete_ = false;\n        this.promise_ = new Promise((resolve, reject) => {\n            this.resolve_ = resolve;\n            this.reject_ = reject;\n            this.start_();\n        });\n    }\n    /**\n     * Actually starts the retry loop.\n     */\n    start_() {\n        const doTheRequest = (backoffCallback, canceled) => {\n            if (canceled) {\n                backoffCallback(false, new RequestEndStatus(false, null, true));\n                return;\n            }\n            const connection = this.connectionFactory_();\n            this.pendingConnection_ = connection;\n            const progressListener = progressEvent => {\n                const loaded = progressEvent.loaded;\n                const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n                if (this.progressCallback_ !== null) {\n                    this.progressCallback_(loaded, total);\n                }\n            };\n            if (this.progressCallback_ !== null) {\n                connection.addUploadProgressListener(progressListener);\n            }\n            // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            connection\n                .send(this.url_, this.method_, this.isUsingEmulator, this.body_, this.headers_)\n                .then(() => {\n                if (this.progressCallback_ !== null) {\n                    connection.removeUploadProgressListener(progressListener);\n                }\n                this.pendingConnection_ = null;\n                const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n                const status = connection.getStatus();\n                if (!hitServer ||\n                    (isRetryStatusCode(status, this.additionalRetryCodes_) &&\n                        this.retry)) {\n                    const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n                    backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\n                    return;\n                }\n                const successCode = this.successCodes_.indexOf(status) !== -1;\n                backoffCallback(true, new RequestEndStatus(successCode, connection));\n            });\n        };\n        /**\n         * @param requestWentThrough - True if the request eventually went\n         *     through, false if it hit the retry limit or was canceled.\n         */\n        const backoffDone = (requestWentThrough, status) => {\n            const resolve = this.resolve_;\n            const reject = this.reject_;\n            const connection = status.connection;\n            if (status.wasSuccessCode) {\n                try {\n                    const result = this.callback_(connection, connection.getResponse());\n                    if (isJustDef(result)) {\n                        resolve(result);\n                    }\n                    else {\n                        resolve();\n                    }\n                }\n                catch (e) {\n                    reject(e);\n                }\n            }\n            else {\n                if (connection !== null) {\n                    const err = unknown();\n                    err.serverResponse = connection.getErrorText();\n                    if (this.errorCallback_) {\n                        reject(this.errorCallback_(connection, err));\n                    }\n                    else {\n                        reject(err);\n                    }\n                }\n                else {\n                    if (status.canceled) {\n                        const err = this.appDelete_ ? appDeleted() : canceled();\n                        reject(err);\n                    }\n                    else {\n                        const err = retryLimitExceeded();\n                        reject(err);\n                    }\n                }\n            }\n        };\n        if (this.canceled_) {\n            backoffDone(false, new RequestEndStatus(false, null, true));\n        }\n        else {\n            this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n        }\n    }\n    /** @inheritDoc */\n    getPromise() {\n        return this.promise_;\n    }\n    /** @inheritDoc */\n    cancel(appDelete) {\n        this.canceled_ = true;\n        this.appDelete_ = appDelete || false;\n        if (this.backoffId_ !== null) {\n            stop(this.backoffId_);\n        }\n        if (this.pendingConnection_ !== null) {\n            this.pendingConnection_.abort();\n        }\n    }\n}\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nclass RequestEndStatus {\n    constructor(wasSuccessCode, connection, canceled) {\n        this.wasSuccessCode = wasSuccessCode;\n        this.connection = connection;\n        this.canceled = !!canceled;\n    }\n}\nfunction addAuthHeader_(headers, authToken) {\n    if (authToken !== null && authToken.length > 0) {\n        headers['Authorization'] = 'Firebase ' + authToken;\n    }\n}\nfunction addVersionHeader_(headers, firebaseVersion) {\n    headers['X-Firebase-Storage-Version'] =\n        'webjs/' + (firebaseVersion ?? 'AppManager');\n}\nfunction addGmpidHeader_(headers, appId) {\n    if (appId) {\n        headers['X-Firebase-GMPID'] = appId;\n    }\n}\nfunction addAppCheckHeader_(headers, appCheckToken) {\n    if (appCheckToken !== null) {\n        headers['X-Firebase-AppCheck'] = appCheckToken;\n    }\n}\nfunction makeRequest(requestInfo, appId, authToken, appCheckToken, requestFactory, firebaseVersion, retry = true, isUsingEmulator = false) {\n    const queryPart = makeQueryString(requestInfo.urlParams);\n    const url = requestInfo.url + queryPart;\n    const headers = Object.assign({}, requestInfo.headers);\n    addGmpidHeader_(headers, appId);\n    addAuthHeader_(headers, authToken);\n    addVersionHeader_(headers, firebaseVersion);\n    addAppCheckHeader_(headers, appCheckToken);\n    return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, requestFactory, retry, isUsingEmulator);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction getBlobBuilder() {\n    if (typeof BlobBuilder !== 'undefined') {\n        return BlobBuilder;\n    }\n    else if (typeof WebKitBlobBuilder !== 'undefined') {\n        return WebKitBlobBuilder;\n    }\n    else {\n        return undefined;\n    }\n}\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nfunction getBlob$1(...args) {\n    const BlobBuilder = getBlobBuilder();\n    if (BlobBuilder !== undefined) {\n        const bb = new BlobBuilder();\n        for (let i = 0; i < args.length; i++) {\n            bb.append(args[i]);\n        }\n        return bb.getBlob();\n    }\n    else {\n        if (isNativeBlobDefined()) {\n            return new Blob(args);\n        }\n        else {\n            throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, \"This browser doesn't seem to support creating Blobs\");\n        }\n    }\n}\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nfunction sliceBlob(blob, start, end) {\n    if (blob.webkitSlice) {\n        return blob.webkitSlice(start, end);\n    }\n    else if (blob.mozSlice) {\n        return blob.mozSlice(start, end);\n    }\n    else if (blob.slice) {\n        return blob.slice(start, end);\n    }\n    return null;\n}\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Converts a Base64 encoded string to a binary string. */\nfunction decodeBase64(encoded) {\n    if (typeof atob === 'undefined') {\n        throw missingPolyFill('base-64');\n    }\n    return atob(encoded);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nconst StringFormat = {\n    /**\n     * Indicates the string should be interpreted \"raw\", that is, as normal text.\n     * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\n     * sequence.\n     * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\n     * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\n     */\n    RAW: 'raw',\n    /**\n     * Indicates the string should be interpreted as base64-encoded data.\n     * Padding characters (trailing '='s) are optional.\n     * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\n     * ad 69 8e fb e1 3a b7 bf eb 97\n     */\n    BASE64: 'base64',\n    /**\n     * Indicates the string should be interpreted as base64url-encoded data.\n     * Padding characters (trailing '='s) are optional.\n     * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\n     * ad 69 8e fb e1 3a b7 bf eb 97\n     */\n    BASE64URL: 'base64url',\n    /**\n     * Indicates the string is a data URL, such as one obtained from\n     * canvas.toDataURL().\n     * Example: the string 'data:application/octet-stream;base64,aaaa'\n     * becomes the byte sequence\n     * 69 a6 9a\n     * (the content-type \"application/octet-stream\" is also applied, but can\n     * be overridden in the metadata object).\n     */\n    DATA_URL: 'data_url'\n};\nclass StringData {\n    constructor(data, contentType) {\n        this.data = data;\n        this.contentType = contentType || null;\n    }\n}\n/**\n * @internal\n */\nfunction dataFromString(format, stringData) {\n    switch (format) {\n        case StringFormat.RAW:\n            return new StringData(utf8Bytes_(stringData));\n        case StringFormat.BASE64:\n        case StringFormat.BASE64URL:\n            return new StringData(base64Bytes_(format, stringData));\n        case StringFormat.DATA_URL:\n            return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\n        // do nothing\n    }\n    // assert(false);\n    throw unknown();\n}\nfunction utf8Bytes_(value) {\n    const b = [];\n    for (let i = 0; i < value.length; i++) {\n        let c = value.charCodeAt(i);\n        if (c <= 127) {\n            b.push(c);\n        }\n        else {\n            if (c <= 2047) {\n                b.push(192 | (c >> 6), 128 | (c & 63));\n            }\n            else {\n                if ((c & 64512) === 55296) {\n                    // The start of a surrogate pair.\n                    const valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n                    if (!valid) {\n                        // The second surrogate wasn't there.\n                        b.push(239, 191, 189);\n                    }\n                    else {\n                        const hi = c;\n                        const lo = value.charCodeAt(++i);\n                        c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\n                        b.push(240 | (c >> 18), 128 | ((c >> 12) & 63), 128 | ((c >> 6) & 63), 128 | (c & 63));\n                    }\n                }\n                else {\n                    if ((c & 64512) === 56320) {\n                        // Invalid low surrogate.\n                        b.push(239, 191, 189);\n                    }\n                    else {\n                        b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\n                    }\n                }\n            }\n        }\n    }\n    return new Uint8Array(b);\n}\nfunction percentEncodedBytes_(value) {\n    let decoded;\n    try {\n        decoded = decodeURIComponent(value);\n    }\n    catch (e) {\n        throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n    }\n    return utf8Bytes_(decoded);\n}\nfunction base64Bytes_(format, value) {\n    switch (format) {\n        case StringFormat.BASE64: {\n            const hasMinus = value.indexOf('-') !== -1;\n            const hasUnder = value.indexOf('_') !== -1;\n            if (hasMinus || hasUnder) {\n                const invalidChar = hasMinus ? '-' : '_';\n                throw invalidFormat(format, \"Invalid character '\" +\n                    invalidChar +\n                    \"' found: is it base64url encoded?\");\n            }\n            break;\n        }\n        case StringFormat.BASE64URL: {\n            const hasPlus = value.indexOf('+') !== -1;\n            const hasSlash = value.indexOf('/') !== -1;\n            if (hasPlus || hasSlash) {\n                const invalidChar = hasPlus ? '+' : '/';\n                throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\");\n            }\n            value = value.replace(/-/g, '+').replace(/_/g, '/');\n            break;\n        }\n        // do nothing\n    }\n    let bytes;\n    try {\n        bytes = decodeBase64(value);\n    }\n    catch (e) {\n        if (e.message.includes('polyfill')) {\n            throw e;\n        }\n        throw invalidFormat(format, 'Invalid character found');\n    }\n    const array = new Uint8Array(bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n        array[i] = bytes.charCodeAt(i);\n    }\n    return array;\n}\nclass DataURLParts {\n    constructor(dataURL) {\n        this.base64 = false;\n        this.contentType = null;\n        const matches = dataURL.match(/^data:([^,]+)?,/);\n        if (matches === null) {\n            throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\n        }\n        const middle = matches[1] || null;\n        if (middle != null) {\n            this.base64 = endsWith(middle, ';base64');\n            this.contentType = this.base64\n                ? middle.substring(0, middle.length - ';base64'.length)\n                : middle;\n        }\n        this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n    }\n}\nfunction dataURLBytes_(dataUrl) {\n    const parts = new DataURLParts(dataUrl);\n    if (parts.base64) {\n        return base64Bytes_(StringFormat.BASE64, parts.rest);\n    }\n    else {\n        return percentEncodedBytes_(parts.rest);\n    }\n}\nfunction dataURLContentType_(dataUrl) {\n    const parts = new DataURLParts(dataUrl);\n    return parts.contentType;\n}\nfunction endsWith(s, end) {\n    const longEnough = s.length >= end.length;\n    if (!longEnough) {\n        return false;\n    }\n    return s.substring(s.length - end.length) === end;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n *\n * @internal\n */\nclass FbsBlob {\n    constructor(data, elideCopy) {\n        let size = 0;\n        let blobType = '';\n        if (isNativeBlob(data)) {\n            this.data_ = data;\n            size = data.size;\n            blobType = data.type;\n        }\n        else if (data instanceof ArrayBuffer) {\n            if (elideCopy) {\n                this.data_ = new Uint8Array(data);\n            }\n            else {\n                this.data_ = new Uint8Array(data.byteLength);\n                this.data_.set(new Uint8Array(data));\n            }\n            size = this.data_.length;\n        }\n        else if (data instanceof Uint8Array) {\n            if (elideCopy) {\n                this.data_ = data;\n            }\n            else {\n                this.data_ = new Uint8Array(data.length);\n                this.data_.set(data);\n            }\n            size = data.length;\n        }\n        this.size_ = size;\n        this.type_ = blobType;\n    }\n    size() {\n        return this.size_;\n    }\n    type() {\n        return this.type_;\n    }\n    slice(startByte, endByte) {\n        if (isNativeBlob(this.data_)) {\n            const realBlob = this.data_;\n            const sliced = sliceBlob(realBlob, startByte, endByte);\n            if (sliced === null) {\n                return null;\n            }\n            return new FbsBlob(sliced);\n        }\n        else {\n            const slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\n            return new FbsBlob(slice, true);\n        }\n    }\n    static getBlob(...args) {\n        if (isNativeBlobDefined()) {\n            const blobby = args.map((val) => {\n                if (val instanceof FbsBlob) {\n                    return val.data_;\n                }\n                else {\n                    return val;\n                }\n            });\n            return new FbsBlob(getBlob$1.apply(null, blobby));\n        }\n        else {\n            const uint8Arrays = args.map((val) => {\n                if (isString(val)) {\n                    return dataFromString(StringFormat.RAW, val).data;\n                }\n                else {\n                    // Blobs don't exist, so this has to be a Uint8Array.\n                    return val.data_;\n                }\n            });\n            let finalLength = 0;\n            uint8Arrays.forEach((array) => {\n                finalLength += array.byteLength;\n            });\n            const merged = new Uint8Array(finalLength);\n            let index = 0;\n            uint8Arrays.forEach((array) => {\n                for (let i = 0; i < array.length; i++) {\n                    merged[index++] = array[i];\n                }\n            });\n            return new FbsBlob(merged, true);\n        }\n    }\n    uploadData() {\n        return this.data_;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nfunction jsonObjectOrNull(s) {\n    let obj;\n    try {\n        obj = JSON.parse(s);\n    }\n    catch (e) {\n        return null;\n    }\n    if (isNonArrayObject(obj)) {\n        return obj;\n    }\n    else {\n        return null;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n/**\n * @return Null if the path is already at the root.\n */\nfunction parent(path) {\n    if (path.length === 0) {\n        return null;\n    }\n    const index = path.lastIndexOf('/');\n    if (index === -1) {\n        return '';\n    }\n    const newPath = path.slice(0, index);\n    return newPath;\n}\nfunction child(path, childPath) {\n    const canonicalChildPath = childPath\n        .split('/')\n        .filter(component => component.length > 0)\n        .join('/');\n    if (path.length === 0) {\n        return canonicalChildPath;\n    }\n    else {\n        return path + '/' + canonicalChildPath;\n    }\n}\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nfunction lastComponent(path) {\n    const index = path.lastIndexOf('/', path.length - 2);\n    if (index === -1) {\n        return path;\n    }\n    else {\n        return path.slice(index + 1);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction noXform_(metadata, value) {\n    return value;\n}\nclass Mapping {\n    constructor(server, local, writable, xform) {\n        this.server = server;\n        this.local = local || server;\n        this.writable = !!writable;\n        this.xform = xform || noXform_;\n    }\n}\nlet mappings_ = null;\nfunction xformPath(fullPath) {\n    if (!isString(fullPath) || fullPath.length < 2) {\n        return fullPath;\n    }\n    else {\n        return lastComponent(fullPath);\n    }\n}\nfunction getMappings() {\n    if (mappings_) {\n        return mappings_;\n    }\n    const mappings = [];\n    mappings.push(new Mapping('bucket'));\n    mappings.push(new Mapping('generation'));\n    mappings.push(new Mapping('metageneration'));\n    mappings.push(new Mapping('name', 'fullPath', true));\n    function mappingsXformPath(_metadata, fullPath) {\n        return xformPath(fullPath);\n    }\n    const nameMapping = new Mapping('name');\n    nameMapping.xform = mappingsXformPath;\n    mappings.push(nameMapping);\n    /**\n     * Coerces the second param to a number, if it is defined.\n     */\n    function xformSize(_metadata, size) {\n        if (size !== undefined) {\n            return Number(size);\n        }\n        else {\n            return size;\n        }\n    }\n    const sizeMapping = new Mapping('size');\n    sizeMapping.xform = xformSize;\n    mappings.push(sizeMapping);\n    mappings.push(new Mapping('timeCreated'));\n    mappings.push(new Mapping('updated'));\n    mappings.push(new Mapping('md5Hash', null, true));\n    mappings.push(new Mapping('cacheControl', null, true));\n    mappings.push(new Mapping('contentDisposition', null, true));\n    mappings.push(new Mapping('contentEncoding', null, true));\n    mappings.push(new Mapping('contentLanguage', null, true));\n    mappings.push(new Mapping('contentType', null, true));\n    mappings.push(new Mapping('metadata', 'customMetadata', true));\n    mappings_ = mappings;\n    return mappings_;\n}\nfunction addRef(metadata, service) {\n    function generateRef() {\n        const bucket = metadata['bucket'];\n        const path = metadata['fullPath'];\n        const loc = new Location(bucket, path);\n        return service._makeStorageReference(loc);\n    }\n    Object.defineProperty(metadata, 'ref', { get: generateRef });\n}\nfunction fromResource(service, resource, mappings) {\n    const metadata = {};\n    metadata['type'] = 'file';\n    const len = mappings.length;\n    for (let i = 0; i < len; i++) {\n        const mapping = mappings[i];\n        metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\n    }\n    addRef(metadata, service);\n    return metadata;\n}\nfunction fromResourceString(service, resourceString, mappings) {\n    const obj = jsonObjectOrNull(resourceString);\n    if (obj === null) {\n        return null;\n    }\n    const resource = obj;\n    return fromResource(service, resource, mappings);\n}\nfunction downloadUrlFromResourceString(metadata, resourceString, host, protocol) {\n    const obj = jsonObjectOrNull(resourceString);\n    if (obj === null) {\n        return null;\n    }\n    if (!isString(obj['downloadTokens'])) {\n        // This can happen if objects are uploaded through GCS and retrieved\n        // through list, so we don't want to throw an Error.\n        return null;\n    }\n    const tokens = obj['downloadTokens'];\n    if (tokens.length === 0) {\n        return null;\n    }\n    const encode = encodeURIComponent;\n    const tokensList = tokens.split(',');\n    const urls = tokensList.map((token) => {\n        const bucket = metadata['bucket'];\n        const path = metadata['fullPath'];\n        const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n        const base = makeUrl(urlPart, host, protocol);\n        const queryString = makeQueryString({\n            alt: 'media',\n            token\n        });\n        return base + queryString;\n    });\n    return urls[0];\n}\nfunction toResourceString(metadata, mappings) {\n    const resource = {};\n    const len = mappings.length;\n    for (let i = 0; i < len; i++) {\n        const mapping = mappings[i];\n        if (mapping.writable) {\n            resource[mapping.server] = metadata[mapping.local];\n        }\n    }\n    return JSON.stringify(resource);\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\nfunction fromBackendResponse(service, bucket, resource) {\n    const listResult = {\n        prefixes: [],\n        items: [],\n        nextPageToken: resource['nextPageToken']\n    };\n    if (resource[PREFIXES_KEY]) {\n        for (const path of resource[PREFIXES_KEY]) {\n            const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n            const reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\n            listResult.prefixes.push(reference);\n        }\n    }\n    if (resource[ITEMS_KEY]) {\n        for (const item of resource[ITEMS_KEY]) {\n            const reference = service._makeStorageReference(new Location(bucket, item['name']));\n            listResult.items.push(reference);\n        }\n    }\n    return listResult;\n}\nfunction fromResponseString(service, bucket, resourceString) {\n    const obj = jsonObjectOrNull(resourceString);\n    if (obj === null) {\n        return null;\n    }\n    const resource = obj;\n    return fromBackendResponse(service, bucket, resource);\n}\n\n/**\n * Contains a fully specified request.\n *\n * @param I - the type of the backend's network response.\n * @param O - the output response type used by the rest of the SDK.\n */\nclass RequestInfo {\n    constructor(url, method, \n    /**\n     * Returns the value with which to resolve the request's promise. Only called\n     * if the request is successful. Throw from this function to reject the\n     * returned Request's promise with the thrown error.\n     * Note: The XhrIo passed to this function may be reused after this callback\n     * returns. Do not keep a reference to it in any way.\n     */\n    handler, timeout) {\n        this.url = url;\n        this.method = method;\n        this.handler = handler;\n        this.timeout = timeout;\n        this.urlParams = {};\n        this.headers = {};\n        this.body = null;\n        this.errorHandler = null;\n        /**\n         * Called with the current number of bytes uploaded and total size (-1 if not\n         * computable) of the request body (i.e. used to report upload progress).\n         */\n        this.progressCallback = null;\n        this.successCodes = [200];\n        this.additionalRetryCodes = [];\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Throws the UNKNOWN StorageError if cndn is false.\n */\nfunction handlerCheck(cndn) {\n    if (!cndn) {\n        throw unknown();\n    }\n}\nfunction metadataHandler(service, mappings) {\n    function handler(xhr, text) {\n        const metadata = fromResourceString(service, text, mappings);\n        handlerCheck(metadata !== null);\n        return metadata;\n    }\n    return handler;\n}\nfunction listHandler(service, bucket) {\n    function handler(xhr, text) {\n        const listResult = fromResponseString(service, bucket, text);\n        handlerCheck(listResult !== null);\n        return listResult;\n    }\n    return handler;\n}\nfunction downloadUrlHandler(service, mappings) {\n    function handler(xhr, text) {\n        const metadata = fromResourceString(service, text, mappings);\n        handlerCheck(metadata !== null);\n        return downloadUrlFromResourceString(metadata, text, service.host, service._protocol);\n    }\n    return handler;\n}\nfunction sharedErrorHandler(location) {\n    function errorHandler(xhr, err) {\n        let newErr;\n        if (xhr.getStatus() === 401) {\n            if (\n            // This exact message string is the only consistent part of the\n            // server's error response that identifies it as an App Check error.\n            xhr.getErrorText().includes('Firebase App Check token is invalid')) {\n                newErr = unauthorizedApp();\n            }\n            else {\n                newErr = unauthenticated();\n            }\n        }\n        else {\n            if (xhr.getStatus() === 402) {\n                newErr = quotaExceeded(location.bucket);\n            }\n            else {\n                if (xhr.getStatus() === 403) {\n                    newErr = unauthorized(location.path);\n                }\n                else {\n                    newErr = err;\n                }\n            }\n        }\n        newErr.status = xhr.getStatus();\n        newErr.serverResponse = err.serverResponse;\n        return newErr;\n    }\n    return errorHandler;\n}\nfunction objectErrorHandler(location) {\n    const shared = sharedErrorHandler(location);\n    function errorHandler(xhr, err) {\n        let newErr = shared(xhr, err);\n        if (xhr.getStatus() === 404) {\n            newErr = objectNotFound(location.path);\n        }\n        newErr.serverResponse = err.serverResponse;\n        return newErr;\n    }\n    return errorHandler;\n}\nfunction getMetadata$2(service, location, mappings) {\n    const urlPart = location.fullServerUrl();\n    const url = makeUrl(urlPart, service.host, service._protocol);\n    const method = 'GET';\n    const timeout = service.maxOperationRetryTime;\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n    requestInfo.errorHandler = objectErrorHandler(location);\n    return requestInfo;\n}\nfunction list$2(service, location, delimiter, pageToken, maxResults) {\n    const urlParams = {};\n    if (location.isRoot) {\n        urlParams['prefix'] = '';\n    }\n    else {\n        urlParams['prefix'] = location.path + '/';\n    }\n    if (delimiter && delimiter.length > 0) {\n        urlParams['delimiter'] = delimiter;\n    }\n    if (pageToken) {\n        urlParams['pageToken'] = pageToken;\n    }\n    if (maxResults) {\n        urlParams['maxResults'] = maxResults;\n    }\n    const urlPart = location.bucketOnlyServerUrl();\n    const url = makeUrl(urlPart, service.host, service._protocol);\n    const method = 'GET';\n    const timeout = service.maxOperationRetryTime;\n    const requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\n    requestInfo.urlParams = urlParams;\n    requestInfo.errorHandler = sharedErrorHandler(location);\n    return requestInfo;\n}\nfunction getBytes$1(service, location, maxDownloadSizeBytes) {\n    const urlPart = location.fullServerUrl();\n    const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\n    const method = 'GET';\n    const timeout = service.maxOperationRetryTime;\n    const requestInfo = new RequestInfo(url, method, (_, data) => data, timeout);\n    requestInfo.errorHandler = objectErrorHandler(location);\n    if (maxDownloadSizeBytes !== undefined) {\n        requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\n        requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\n    }\n    return requestInfo;\n}\nfunction getDownloadUrl(service, location, mappings) {\n    const urlPart = location.fullServerUrl();\n    const url = makeUrl(urlPart, service.host, service._protocol);\n    const method = 'GET';\n    const timeout = service.maxOperationRetryTime;\n    const requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\n    requestInfo.errorHandler = objectErrorHandler(location);\n    return requestInfo;\n}\nfunction updateMetadata$2(service, location, metadata, mappings) {\n    const urlPart = location.fullServerUrl();\n    const url = makeUrl(urlPart, service.host, service._protocol);\n    const method = 'PATCH';\n    const body = toResourceString(metadata, mappings);\n    const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n    const timeout = service.maxOperationRetryTime;\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n    requestInfo.headers = headers;\n    requestInfo.body = body;\n    requestInfo.errorHandler = objectErrorHandler(location);\n    return requestInfo;\n}\nfunction deleteObject$2(service, location) {\n    const urlPart = location.fullServerUrl();\n    const url = makeUrl(urlPart, service.host, service._protocol);\n    const method = 'DELETE';\n    const timeout = service.maxOperationRetryTime;\n    function handler(_xhr, _text) { }\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\n    requestInfo.successCodes = [200, 204];\n    requestInfo.errorHandler = objectErrorHandler(location);\n    return requestInfo;\n}\nfunction determineContentType_(metadata, blob) {\n    return ((metadata && metadata['contentType']) ||\n        (blob && blob.type()) ||\n        'application/octet-stream');\n}\nfunction metadataForUpload_(location, blob, metadata) {\n    const metadataClone = Object.assign({}, metadata);\n    metadataClone['fullPath'] = location.path;\n    metadataClone['size'] = blob.size();\n    if (!metadataClone['contentType']) {\n        metadataClone['contentType'] = determineContentType_(null, blob);\n    }\n    return metadataClone;\n}\n/**\n * Prepare RequestInfo for uploads as Content-Type: multipart.\n */\nfunction multipartUpload(service, location, mappings, blob, metadata) {\n    const urlPart = location.bucketOnlyServerUrl();\n    const headers = {\n        'X-Goog-Upload-Protocol': 'multipart'\n    };\n    function genBoundary() {\n        let str = '';\n        for (let i = 0; i < 2; i++) {\n            str = str + Math.random().toString().slice(2);\n        }\n        return str;\n    }\n    const boundary = genBoundary();\n    headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n    const metadata_ = metadataForUpload_(location, blob, metadata);\n    const metadataString = toResourceString(metadata_, mappings);\n    const preBlobPart = '--' +\n        boundary +\n        '\\r\\n' +\n        'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n        metadataString +\n        '\\r\\n--' +\n        boundary +\n        '\\r\\n' +\n        'Content-Type: ' +\n        metadata_['contentType'] +\n        '\\r\\n\\r\\n';\n    const postBlobPart = '\\r\\n--' + boundary + '--';\n    const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n    if (body === null) {\n        throw cannotSliceBlob();\n    }\n    const urlParams = { name: metadata_['fullPath'] };\n    const url = makeUrl(urlPart, service.host, service._protocol);\n    const method = 'POST';\n    const timeout = service.maxUploadRetryTime;\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n    requestInfo.urlParams = urlParams;\n    requestInfo.headers = headers;\n    requestInfo.body = body.uploadData();\n    requestInfo.errorHandler = sharedErrorHandler(location);\n    return requestInfo;\n}\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nclass ResumableUploadStatus {\n    constructor(current, total, finalized, metadata) {\n        this.current = current;\n        this.total = total;\n        this.finalized = !!finalized;\n        this.metadata = metadata || null;\n    }\n}\nfunction checkResumeHeader_(xhr, allowed) {\n    let status = null;\n    try {\n        status = xhr.getResponseHeader('X-Goog-Upload-Status');\n    }\n    catch (e) {\n        handlerCheck(false);\n    }\n    const allowedStatus = allowed || ['active'];\n    handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n    return status;\n}\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\n    const urlPart = location.bucketOnlyServerUrl();\n    const metadataForUpload = metadataForUpload_(location, blob, metadata);\n    const urlParams = { name: metadataForUpload['fullPath'] };\n    const url = makeUrl(urlPart, service.host, service._protocol);\n    const method = 'POST';\n    const headers = {\n        'X-Goog-Upload-Protocol': 'resumable',\n        'X-Goog-Upload-Command': 'start',\n        'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n        'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],\n        'Content-Type': 'application/json; charset=utf-8'\n    };\n    const body = toResourceString(metadataForUpload, mappings);\n    const timeout = service.maxUploadRetryTime;\n    function handler(xhr) {\n        checkResumeHeader_(xhr);\n        let url;\n        try {\n            url = xhr.getResponseHeader('X-Goog-Upload-URL');\n        }\n        catch (e) {\n            handlerCheck(false);\n        }\n        handlerCheck(isString(url));\n        return url;\n    }\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\n    requestInfo.urlParams = urlParams;\n    requestInfo.headers = headers;\n    requestInfo.body = body;\n    requestInfo.errorHandler = sharedErrorHandler(location);\n    return requestInfo;\n}\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nfunction getResumableUploadStatus(service, location, url, blob) {\n    const headers = { 'X-Goog-Upload-Command': 'query' };\n    function handler(xhr) {\n        const status = checkResumeHeader_(xhr, ['active', 'final']);\n        let sizeString = null;\n        try {\n            sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n        }\n        catch (e) {\n            handlerCheck(false);\n        }\n        if (!sizeString) {\n            // null or empty string\n            handlerCheck(false);\n        }\n        const size = Number(sizeString);\n        handlerCheck(!isNaN(size));\n        return new ResumableUploadStatus(size, blob.size(), status === 'final');\n    }\n    const method = 'POST';\n    const timeout = service.maxUploadRetryTime;\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\n    requestInfo.headers = headers;\n    requestInfo.errorHandler = sharedErrorHandler(location);\n    return requestInfo;\n}\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nconst RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nfunction continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\n    // TODO(andysoto): standardize on internal asserts\n    // assert(!(opt_status && opt_status.finalized));\n    const status_ = new ResumableUploadStatus(0, 0);\n    if (status) {\n        status_.current = status.current;\n        status_.total = status.total;\n    }\n    else {\n        status_.current = 0;\n        status_.total = blob.size();\n    }\n    if (blob.size() !== status_.total) {\n        throw serverFileWrongSize();\n    }\n    const bytesLeft = status_.total - status_.current;\n    let bytesToUpload = bytesLeft;\n    if (chunkSize > 0) {\n        bytesToUpload = Math.min(bytesToUpload, chunkSize);\n    }\n    const startByte = status_.current;\n    const endByte = startByte + bytesToUpload;\n    let uploadCommand = '';\n    if (bytesToUpload === 0) {\n        uploadCommand = 'finalize';\n    }\n    else if (bytesLeft === bytesToUpload) {\n        uploadCommand = 'upload, finalize';\n    }\n    else {\n        uploadCommand = 'upload';\n    }\n    const headers = {\n        'X-Goog-Upload-Command': uploadCommand,\n        'X-Goog-Upload-Offset': `${status_.current}`\n    };\n    const body = blob.slice(startByte, endByte);\n    if (body === null) {\n        throw cannotSliceBlob();\n    }\n    function handler(xhr, text) {\n        // TODO(andysoto): Verify the MD5 of each uploaded range:\n        // the 'x-range-md5' header comes back with status code 308 responses.\n        // We'll only be able to bail out though, because you can't re-upload a\n        // range that you previously uploaded.\n        const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n        const newCurrent = status_.current + bytesToUpload;\n        const size = blob.size();\n        let metadata;\n        if (uploadStatus === 'final') {\n            metadata = metadataHandler(service, mappings)(xhr, text);\n        }\n        else {\n            metadata = null;\n        }\n        return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\n    }\n    const method = 'POST';\n    const timeout = service.maxUploadRetryTime;\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\n    requestInfo.headers = headers;\n    requestInfo.body = body.uploadData();\n    requestInfo.progressCallback = progressCallback || null;\n    requestInfo.errorHandler = sharedErrorHandler(location);\n    return requestInfo;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An event that is triggered on a task.\n * @internal\n */\nconst TaskEvent = {\n    /**\n     * For this event,\n     * <ul>\n     *   <li>The `next` function is triggered on progress updates and when the\n     *       task is paused/resumed with an `UploadTaskSnapshot` as the first\n     *       argument.</li>\n     *   <li>The `error` function is triggered if the upload is canceled or fails\n     *       for another reason.</li>\n     *   <li>The `complete` function is triggered if the upload completes\n     *       successfully.</li>\n     * </ul>\n     */\n    STATE_CHANGED: 'state_changed'\n};\n// type keys = keyof TaskState\n/**\n * Represents the current state of a running upload.\n * @internal\n */\nconst TaskState = {\n    /** The task is currently transferring data. */\n    RUNNING: 'running',\n    /** The task was paused by the user. */\n    PAUSED: 'paused',\n    /** The task completed successfully. */\n    SUCCESS: 'success',\n    /** The task was canceled. */\n    CANCELED: 'canceled',\n    /** The task failed with an error. */\n    ERROR: 'error'\n};\nfunction taskStateFromInternalTaskState(state) {\n    switch (state) {\n        case \"running\" /* InternalTaskState.RUNNING */:\n        case \"pausing\" /* InternalTaskState.PAUSING */:\n        case \"canceling\" /* InternalTaskState.CANCELING */:\n            return TaskState.RUNNING;\n        case \"paused\" /* InternalTaskState.PAUSED */:\n            return TaskState.PAUSED;\n        case \"success\" /* InternalTaskState.SUCCESS */:\n            return TaskState.SUCCESS;\n        case \"canceled\" /* InternalTaskState.CANCELED */:\n            return TaskState.CANCELED;\n        case \"error\" /* InternalTaskState.ERROR */:\n            return TaskState.ERROR;\n        default:\n            // TODO(andysoto): assert(false);\n            return TaskState.ERROR;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Observer {\n    constructor(nextOrObserver, error, complete) {\n        const asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\n        if (asFunctions) {\n            this.next = nextOrObserver;\n            this.error = error ?? undefined;\n            this.complete = complete ?? undefined;\n        }\n        else {\n            const observer = nextOrObserver;\n            this.next = observer.next;\n            this.error = observer.error;\n            this.complete = observer.complete;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns a function that invokes f with its arguments asynchronously as a\n * microtask, i.e. as soon as possible after the current script returns back\n * into browser code.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction async(f) {\n    return (...argsToForward) => {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        Promise.resolve().then(() => f(...argsToForward));\n    };\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** An override for the text-based Connection. Used in tests. */\nlet textFactoryOverride = null;\n/**\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\n */\nclass XhrConnection {\n    constructor() {\n        this.sent_ = false;\n        this.xhr_ = new XMLHttpRequest();\n        this.initXhr();\n        this.errorCode_ = ErrorCode.NO_ERROR;\n        this.sendPromise_ = new Promise(resolve => {\n            this.xhr_.addEventListener('abort', () => {\n                this.errorCode_ = ErrorCode.ABORT;\n                resolve();\n            });\n            this.xhr_.addEventListener('error', () => {\n                this.errorCode_ = ErrorCode.NETWORK_ERROR;\n                resolve();\n            });\n            this.xhr_.addEventListener('load', () => {\n                resolve();\n            });\n        });\n    }\n    send(url, method, isUsingEmulator, body, headers) {\n        if (this.sent_) {\n            throw internalError('cannot .send() more than once');\n        }\n        if (isCloudWorkstation(url) && isUsingEmulator) {\n            this.xhr_.withCredentials = true;\n        }\n        this.sent_ = true;\n        this.xhr_.open(method, url, true);\n        if (headers !== undefined) {\n            for (const key in headers) {\n                if (headers.hasOwnProperty(key)) {\n                    this.xhr_.setRequestHeader(key, headers[key].toString());\n                }\n            }\n        }\n        if (body !== undefined) {\n            this.xhr_.send(body);\n        }\n        else {\n            this.xhr_.send();\n        }\n        return this.sendPromise_;\n    }\n    getErrorCode() {\n        if (!this.sent_) {\n            throw internalError('cannot .getErrorCode() before sending');\n        }\n        return this.errorCode_;\n    }\n    getStatus() {\n        if (!this.sent_) {\n            throw internalError('cannot .getStatus() before sending');\n        }\n        try {\n            return this.xhr_.status;\n        }\n        catch (e) {\n            return -1;\n        }\n    }\n    getResponse() {\n        if (!this.sent_) {\n            throw internalError('cannot .getResponse() before sending');\n        }\n        return this.xhr_.response;\n    }\n    getErrorText() {\n        if (!this.sent_) {\n            throw internalError('cannot .getErrorText() before sending');\n        }\n        return this.xhr_.statusText;\n    }\n    /** Aborts the request. */\n    abort() {\n        this.xhr_.abort();\n    }\n    getResponseHeader(header) {\n        return this.xhr_.getResponseHeader(header);\n    }\n    addUploadProgressListener(listener) {\n        if (this.xhr_.upload != null) {\n            this.xhr_.upload.addEventListener('progress', listener);\n        }\n    }\n    removeUploadProgressListener(listener) {\n        if (this.xhr_.upload != null) {\n            this.xhr_.upload.removeEventListener('progress', listener);\n        }\n    }\n}\nclass XhrTextConnection extends XhrConnection {\n    initXhr() {\n        this.xhr_.responseType = 'text';\n    }\n}\nfunction newTextConnection() {\n    return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\n}\nclass XhrBytesConnection extends XhrConnection {\n    initXhr() {\n        this.xhr_.responseType = 'arraybuffer';\n    }\n}\nfunction newBytesConnection() {\n    return new XhrBytesConnection();\n}\nclass XhrBlobConnection extends XhrConnection {\n    initXhr() {\n        this.xhr_.responseType = 'blob';\n    }\n}\nfunction newBlobConnection() {\n    return new XhrBlobConnection();\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\n * upload and manage callbacks for various events.\n * @internal\n */\nclass UploadTask {\n    isExponentialBackoffExpired() {\n        return this.sleepTime > this.maxSleepTime;\n    }\n    /**\n     * @param ref - The firebaseStorage.Reference object this task came\n     *     from, untyped to avoid cyclic dependencies.\n     * @param blob - The blob to upload.\n     */\n    constructor(ref, blob, metadata = null) {\n        /**\n         * Number of bytes transferred so far.\n         */\n        this._transferred = 0;\n        this._needToFetchStatus = false;\n        this._needToFetchMetadata = false;\n        this._observers = [];\n        this._error = undefined;\n        this._uploadUrl = undefined;\n        this._request = undefined;\n        this._chunkMultiplier = 1;\n        this._resolve = undefined;\n        this._reject = undefined;\n        this._ref = ref;\n        this._blob = blob;\n        this._metadata = metadata;\n        this._mappings = getMappings();\n        this._resumable = this._shouldDoResumable(this._blob);\n        this._state = \"running\" /* InternalTaskState.RUNNING */;\n        this._errorHandler = error => {\n            this._request = undefined;\n            this._chunkMultiplier = 1;\n            if (error._codeEquals(StorageErrorCode.CANCELED)) {\n                this._needToFetchStatus = true;\n                this.completeTransitions_();\n            }\n            else {\n                const backoffExpired = this.isExponentialBackoffExpired();\n                if (isRetryStatusCode(error.status, [])) {\n                    if (backoffExpired) {\n                        error = retryLimitExceeded();\n                    }\n                    else {\n                        this.sleepTime = Math.max(this.sleepTime * 2, DEFAULT_MIN_SLEEP_TIME_MILLIS);\n                        this._needToFetchStatus = true;\n                        this.completeTransitions_();\n                        return;\n                    }\n                }\n                this._error = error;\n                this._transition(\"error\" /* InternalTaskState.ERROR */);\n            }\n        };\n        this._metadataErrorHandler = error => {\n            this._request = undefined;\n            if (error._codeEquals(StorageErrorCode.CANCELED)) {\n                this.completeTransitions_();\n            }\n            else {\n                this._error = error;\n                this._transition(\"error\" /* InternalTaskState.ERROR */);\n            }\n        };\n        this.sleepTime = 0;\n        this.maxSleepTime = this._ref.storage.maxUploadRetryTime;\n        this._promise = new Promise((resolve, reject) => {\n            this._resolve = resolve;\n            this._reject = reject;\n            this._start();\n        });\n        // Prevent uncaught rejections on the internal promise from bubbling out\n        // to the top level with a dummy handler.\n        this._promise.then(null, () => { });\n    }\n    _makeProgressCallback() {\n        const sizeBefore = this._transferred;\n        return loaded => this._updateProgress(sizeBefore + loaded);\n    }\n    _shouldDoResumable(blob) {\n        return blob.size() > 256 * 1024;\n    }\n    _start() {\n        if (this._state !== \"running\" /* InternalTaskState.RUNNING */) {\n            // This can happen if someone pauses us in a resume callback, for example.\n            return;\n        }\n        if (this._request !== undefined) {\n            return;\n        }\n        if (this._resumable) {\n            if (this._uploadUrl === undefined) {\n                this._createResumable();\n            }\n            else {\n                if (this._needToFetchStatus) {\n                    this._fetchStatus();\n                }\n                else {\n                    if (this._needToFetchMetadata) {\n                        // Happens if we miss the metadata on upload completion.\n                        this._fetchMetadata();\n                    }\n                    else {\n                        this.pendingTimeout = setTimeout(() => {\n                            this.pendingTimeout = undefined;\n                            this._continueUpload();\n                        }, this.sleepTime);\n                    }\n                }\n            }\n        }\n        else {\n            this._oneShotUpload();\n        }\n    }\n    _resolveToken(callback) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        Promise.all([\n            this._ref.storage._getAuthToken(),\n            this._ref.storage._getAppCheckToken()\n        ]).then(([authToken, appCheckToken]) => {\n            switch (this._state) {\n                case \"running\" /* InternalTaskState.RUNNING */:\n                    callback(authToken, appCheckToken);\n                    break;\n                case \"canceling\" /* InternalTaskState.CANCELING */:\n                    this._transition(\"canceled\" /* InternalTaskState.CANCELED */);\n                    break;\n                case \"pausing\" /* InternalTaskState.PAUSING */:\n                    this._transition(\"paused\" /* InternalTaskState.PAUSED */);\n                    break;\n            }\n        });\n    }\n    // TODO(andysoto): assert false\n    _createResumable() {\n        this._resolveToken((authToken, appCheckToken) => {\n            const requestInfo = createResumableUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\n            const createRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n            this._request = createRequest;\n            createRequest.getPromise().then((url) => {\n                this._request = undefined;\n                this._uploadUrl = url;\n                this._needToFetchStatus = false;\n                this.completeTransitions_();\n            }, this._errorHandler);\n        });\n    }\n    _fetchStatus() {\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\n        const url = this._uploadUrl;\n        this._resolveToken((authToken, appCheckToken) => {\n            const requestInfo = getResumableUploadStatus(this._ref.storage, this._ref._location, url, this._blob);\n            const statusRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n            this._request = statusRequest;\n            statusRequest.getPromise().then(status => {\n                status = status;\n                this._request = undefined;\n                this._updateProgress(status.current);\n                this._needToFetchStatus = false;\n                if (status.finalized) {\n                    this._needToFetchMetadata = true;\n                }\n                this.completeTransitions_();\n            }, this._errorHandler);\n        });\n    }\n    _continueUpload() {\n        const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n        const status = new ResumableUploadStatus(this._transferred, this._blob.size());\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\n        const url = this._uploadUrl;\n        this._resolveToken((authToken, appCheckToken) => {\n            let requestInfo;\n            try {\n                requestInfo = continueResumableUpload(this._ref._location, this._ref.storage, url, this._blob, chunkSize, this._mappings, status, this._makeProgressCallback());\n            }\n            catch (e) {\n                this._error = e;\n                this._transition(\"error\" /* InternalTaskState.ERROR */);\n                return;\n            }\n            const uploadRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken, \n            /*retry=*/ false // Upload requests should not be retried as each retry should be preceded by another query request. Which is handled in this file.\n            );\n            this._request = uploadRequest;\n            uploadRequest.getPromise().then((newStatus) => {\n                this._increaseMultiplier();\n                this._request = undefined;\n                this._updateProgress(newStatus.current);\n                if (newStatus.finalized) {\n                    this._metadata = newStatus.metadata;\n                    this._transition(\"success\" /* InternalTaskState.SUCCESS */);\n                }\n                else {\n                    this.completeTransitions_();\n                }\n            }, this._errorHandler);\n        });\n    }\n    _increaseMultiplier() {\n        const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n        // Max chunk size is 32M.\n        if (currentSize * 2 < 32 * 1024 * 1024) {\n            this._chunkMultiplier *= 2;\n        }\n    }\n    _fetchMetadata() {\n        this._resolveToken((authToken, appCheckToken) => {\n            const requestInfo = getMetadata$2(this._ref.storage, this._ref._location, this._mappings);\n            const metadataRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n            this._request = metadataRequest;\n            metadataRequest.getPromise().then(metadata => {\n                this._request = undefined;\n                this._metadata = metadata;\n                this._transition(\"success\" /* InternalTaskState.SUCCESS */);\n            }, this._metadataErrorHandler);\n        });\n    }\n    _oneShotUpload() {\n        this._resolveToken((authToken, appCheckToken) => {\n            const requestInfo = multipartUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\n            const multipartRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n            this._request = multipartRequest;\n            multipartRequest.getPromise().then(metadata => {\n                this._request = undefined;\n                this._metadata = metadata;\n                this._updateProgress(this._blob.size());\n                this._transition(\"success\" /* InternalTaskState.SUCCESS */);\n            }, this._errorHandler);\n        });\n    }\n    _updateProgress(transferred) {\n        const old = this._transferred;\n        this._transferred = transferred;\n        // A progress update can make the \"transferred\" value smaller (e.g. a\n        // partial upload not completed by server, after which the \"transferred\"\n        // value may reset to the value at the beginning of the request).\n        if (this._transferred !== old) {\n            this._notifyObservers();\n        }\n    }\n    _transition(state) {\n        if (this._state === state) {\n            return;\n        }\n        switch (state) {\n            case \"canceling\" /* InternalTaskState.CANCELING */:\n            case \"pausing\" /* InternalTaskState.PAUSING */:\n                // TODO(andysoto):\n                // assert(this.state_ === InternalTaskState.RUNNING ||\n                //        this.state_ === InternalTaskState.PAUSING);\n                this._state = state;\n                if (this._request !== undefined) {\n                    this._request.cancel();\n                }\n                else if (this.pendingTimeout) {\n                    clearTimeout(this.pendingTimeout);\n                    this.pendingTimeout = undefined;\n                    this.completeTransitions_();\n                }\n                break;\n            case \"running\" /* InternalTaskState.RUNNING */:\n                // TODO(andysoto):\n                // assert(this.state_ === InternalTaskState.PAUSED ||\n                //        this.state_ === InternalTaskState.PAUSING);\n                const wasPaused = this._state === \"paused\" /* InternalTaskState.PAUSED */;\n                this._state = state;\n                if (wasPaused) {\n                    this._notifyObservers();\n                    this._start();\n                }\n                break;\n            case \"paused\" /* InternalTaskState.PAUSED */:\n                // TODO(andysoto):\n                // assert(this.state_ === InternalTaskState.PAUSING);\n                this._state = state;\n                this._notifyObservers();\n                break;\n            case \"canceled\" /* InternalTaskState.CANCELED */:\n                // TODO(andysoto):\n                // assert(this.state_ === InternalTaskState.PAUSED ||\n                //        this.state_ === InternalTaskState.CANCELING);\n                this._error = canceled();\n                this._state = state;\n                this._notifyObservers();\n                break;\n            case \"error\" /* InternalTaskState.ERROR */:\n                // TODO(andysoto):\n                // assert(this.state_ === InternalTaskState.RUNNING ||\n                //        this.state_ === InternalTaskState.PAUSING ||\n                //        this.state_ === InternalTaskState.CANCELING);\n                this._state = state;\n                this._notifyObservers();\n                break;\n            case \"success\" /* InternalTaskState.SUCCESS */:\n                // TODO(andysoto):\n                // assert(this.state_ === InternalTaskState.RUNNING ||\n                //        this.state_ === InternalTaskState.PAUSING ||\n                //        this.state_ === InternalTaskState.CANCELING);\n                this._state = state;\n                this._notifyObservers();\n                break;\n        }\n    }\n    completeTransitions_() {\n        switch (this._state) {\n            case \"pausing\" /* InternalTaskState.PAUSING */:\n                this._transition(\"paused\" /* InternalTaskState.PAUSED */);\n                break;\n            case \"canceling\" /* InternalTaskState.CANCELING */:\n                this._transition(\"canceled\" /* InternalTaskState.CANCELED */);\n                break;\n            case \"running\" /* InternalTaskState.RUNNING */:\n                this._start();\n                break;\n        }\n    }\n    /**\n     * A snapshot of the current task state.\n     */\n    get snapshot() {\n        const externalState = taskStateFromInternalTaskState(this._state);\n        return {\n            bytesTransferred: this._transferred,\n            totalBytes: this._blob.size(),\n            state: externalState,\n            metadata: this._metadata,\n            task: this,\n            ref: this._ref\n        };\n    }\n    /**\n     * Adds a callback for an event.\n     * @param type - The type of event to listen for.\n     * @param nextOrObserver -\n     *     The `next` function, which gets called for each item in\n     *     the event stream, or an observer object with some or all of these three\n     *     properties (`next`, `error`, `complete`).\n     * @param error - A function that gets called with a `StorageError`\n     *     if the event stream ends due to an error.\n     * @param completed - A function that gets called if the\n     *     event stream ends normally.\n     * @returns\n     *     If only the event argument is passed, returns a function you can use to\n     *     add callbacks (see the examples above). If more than just the event\n     *     argument is passed, returns a function you can call to unregister the\n     *     callbacks.\n     */\n    on(type, nextOrObserver, error, completed) {\n        // Note: `type` isn't being used. Its type is also incorrect. TaskEvent should not be a string.\n        const observer = new Observer(nextOrObserver || undefined, error || undefined, completed || undefined);\n        this._addObserver(observer);\n        return () => {\n            this._removeObserver(observer);\n        };\n    }\n    /**\n     * This object behaves like a Promise, and resolves with its snapshot data\n     * when the upload completes.\n     * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\n     * @param onRejected - The rejection callback.\n     */\n    then(onFulfilled, onRejected) {\n        // These casts are needed so that TypeScript can infer the types of the\n        // resulting Promise.\n        return this._promise.then(onFulfilled, onRejected);\n    }\n    /**\n     * Equivalent to calling `then(null, onRejected)`.\n     */\n    catch(onRejected) {\n        return this.then(null, onRejected);\n    }\n    /**\n     * Adds the given observer.\n     */\n    _addObserver(observer) {\n        this._observers.push(observer);\n        this._notifyObserver(observer);\n    }\n    /**\n     * Removes the given observer.\n     */\n    _removeObserver(observer) {\n        const i = this._observers.indexOf(observer);\n        if (i !== -1) {\n            this._observers.splice(i, 1);\n        }\n    }\n    _notifyObservers() {\n        this._finishPromise();\n        const observers = this._observers.slice();\n        observers.forEach(observer => {\n            this._notifyObserver(observer);\n        });\n    }\n    _finishPromise() {\n        if (this._resolve !== undefined) {\n            let triggered = true;\n            switch (taskStateFromInternalTaskState(this._state)) {\n                case TaskState.SUCCESS:\n                    async(this._resolve.bind(null, this.snapshot))();\n                    break;\n                case TaskState.CANCELED:\n                case TaskState.ERROR:\n                    const toCall = this._reject;\n                    async(toCall.bind(null, this._error))();\n                    break;\n                default:\n                    triggered = false;\n                    break;\n            }\n            if (triggered) {\n                this._resolve = undefined;\n                this._reject = undefined;\n            }\n        }\n    }\n    _notifyObserver(observer) {\n        const externalState = taskStateFromInternalTaskState(this._state);\n        switch (externalState) {\n            case TaskState.RUNNING:\n            case TaskState.PAUSED:\n                if (observer.next) {\n                    async(observer.next.bind(observer, this.snapshot))();\n                }\n                break;\n            case TaskState.SUCCESS:\n                if (observer.complete) {\n                    async(observer.complete.bind(observer))();\n                }\n                break;\n            case TaskState.CANCELED:\n            case TaskState.ERROR:\n                if (observer.error) {\n                    async(observer.error.bind(observer, this._error))();\n                }\n                break;\n            default:\n                // TODO(andysoto): assert(false);\n                if (observer.error) {\n                    async(observer.error.bind(observer, this._error))();\n                }\n        }\n    }\n    /**\n     * Resumes a paused task. Has no effect on a currently running or failed task.\n     * @returns True if the operation took effect, false if ignored.\n     */\n    resume() {\n        const valid = this._state === \"paused\" /* InternalTaskState.PAUSED */ ||\n            this._state === \"pausing\" /* InternalTaskState.PAUSING */;\n        if (valid) {\n            this._transition(\"running\" /* InternalTaskState.RUNNING */);\n        }\n        return valid;\n    }\n    /**\n     * Pauses a currently running task. Has no effect on a paused or failed task.\n     * @returns True if the operation took effect, false if ignored.\n     */\n    pause() {\n        const valid = this._state === \"running\" /* InternalTaskState.RUNNING */;\n        if (valid) {\n            this._transition(\"pausing\" /* InternalTaskState.PAUSING */);\n        }\n        return valid;\n    }\n    /**\n     * Cancels a currently running or paused task. Has no effect on a complete or\n     * failed task.\n     * @returns True if the operation took effect, false if ignored.\n     */\n    cancel() {\n        const valid = this._state === \"running\" /* InternalTaskState.RUNNING */ ||\n            this._state === \"pausing\" /* InternalTaskState.PAUSING */;\n        if (valid) {\n            this._transition(\"canceling\" /* InternalTaskState.CANCELING */);\n        }\n        return valid;\n    }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @internal\n * @param _location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nclass Reference {\n    constructor(_service, location) {\n        this._service = _service;\n        if (location instanceof Location) {\n            this._location = location;\n        }\n        else {\n            this._location = Location.makeFromUrl(location, _service.host);\n        }\n    }\n    /**\n     * Returns the URL for the bucket and path this object references,\n     *     in the form gs://<bucket>/<object-path>\n     * @override\n     */\n    toString() {\n        return 'gs://' + this._location.bucket + '/' + this._location.path;\n    }\n    _newRef(service, location) {\n        return new Reference(service, location);\n    }\n    /**\n     * A reference to the root of this object's bucket.\n     */\n    get root() {\n        const location = new Location(this._location.bucket, '');\n        return this._newRef(this._service, location);\n    }\n    /**\n     * The name of the bucket containing this reference's object.\n     */\n    get bucket() {\n        return this._location.bucket;\n    }\n    /**\n     * The full path of this object.\n     */\n    get fullPath() {\n        return this._location.path;\n    }\n    /**\n     * The short name of this object, which is the last component of the full path.\n     * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\n     */\n    get name() {\n        return lastComponent(this._location.path);\n    }\n    /**\n     * The `StorageService` instance this `StorageReference` is associated with.\n     */\n    get storage() {\n        return this._service;\n    }\n    /**\n     * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\n     * this reference is the root.\n     */\n    get parent() {\n        const newPath = parent(this._location.path);\n        if (newPath === null) {\n            return null;\n        }\n        const location = new Location(this._location.bucket, newPath);\n        return new Reference(this._service, location);\n    }\n    /**\n     * Utility function to throw an error in methods that do not accept a root reference.\n     */\n    _throwIfRoot(name) {\n        if (this._location.path === '') {\n            throw invalidRootOperation(name);\n        }\n    }\n}\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded bytes.\n */\nfunction getBytesInternal(ref, maxDownloadSizeBytes) {\n    ref._throwIfRoot('getBytes');\n    const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\n    return ref.storage\n        .makeRequestWithTokens(requestInfo, newBytesConnection)\n        .then(bytes => maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n            bytes.slice(0, maxDownloadSizeBytes)\n        : bytes);\n}\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded blob.\n */\nfunction getBlobInternal(ref, maxDownloadSizeBytes) {\n    ref._throwIfRoot('getBlob');\n    const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\n    return ref.storage\n        .makeRequestWithTokens(requestInfo, newBlobConnection)\n        .then(blob => maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n            blob.slice(0, maxDownloadSizeBytes)\n        : blob);\n}\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n *\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns A Promise containing an UploadResult\n */\nfunction uploadBytes$1(ref, data, metadata) {\n    ref._throwIfRoot('uploadBytes');\n    const requestInfo = multipartUpload(ref.storage, ref._location, getMappings(), new FbsBlob(data, true), metadata);\n    return ref.storage\n        .makeRequestWithTokens(requestInfo, newTextConnection)\n        .then(finalMetadata => {\n        return {\n            metadata: finalMetadata,\n            ref\n        };\n    });\n}\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns An UploadTask\n */\nfunction uploadBytesResumable$1(ref, data, metadata) {\n    ref._throwIfRoot('uploadBytesResumable');\n    return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns A Promise containing an UploadResult\n */\nfunction uploadString$1(ref, value, format = StringFormat.RAW, metadata) {\n    ref._throwIfRoot('uploadString');\n    const data = dataFromString(format, value);\n    const metadataClone = { ...metadata };\n    if (metadataClone['contentType'] == null && data.contentType != null) {\n        metadataClone['contentType'] = data.contentType;\n    }\n    return uploadBytes$1(ref, data.data, metadataClone);\n}\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nfunction listAll$1(ref) {\n    const accumulator = {\n        prefixes: [],\n        items: []\n    };\n    return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @param ref\n * @param accumulator\n * @param pageToken\n */\nasync function listAllHelper(ref, accumulator, pageToken) {\n    const opt = {\n        // maxResults is 1000 by default.\n        pageToken\n    };\n    const nextPage = await list$1(ref, opt);\n    accumulator.prefixes.push(...nextPage.prefixes);\n    accumulator.items.push(...nextPage.items);\n    if (nextPage.nextPageToken != null) {\n        await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n    }\n}\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nfunction list$1(ref, options) {\n    if (options != null) {\n        if (typeof options.maxResults === 'number') {\n            validateNumber('options.maxResults', \n            /* minValue= */ 1, \n            /* maxValue= */ 1000, options.maxResults);\n        }\n    }\n    const op = options || {};\n    const requestInfo = list$2(ref.storage, ref._location, \n    /*delimiter= */ '/', op.pageToken, op.maxResults);\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retrieved, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\nfunction getMetadata$1(ref) {\n    ref._throwIfRoot('getMetadata');\n    const requestInfo = getMetadata$2(ref.storage, ref._location, getMappings());\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\nfunction updateMetadata$1(ref, metadata) {\n    ref._throwIfRoot('updateMetadata');\n    const requestInfo = updateMetadata$2(ref.storage, ref._location, metadata, getMappings());\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nfunction getDownloadURL$1(ref) {\n    ref._throwIfRoot('getDownloadURL');\n    const requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\n    return ref.storage\n        .makeRequestWithTokens(requestInfo, newTextConnection)\n        .then(url => {\n        if (url === null) {\n            throw noDownloadURL();\n        }\n        return url;\n    });\n}\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nfunction deleteObject$1(ref) {\n    ref._throwIfRoot('deleteObject');\n    const requestInfo = deleteObject$2(ref.storage, ref._location);\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n *\n * @param ref - StorageReference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n *\n */\nfunction _getChild$1(ref, childPath) {\n    const newPath = child(ref._location.path, childPath);\n    const location = new Location(ref._location.bucket, newPath);\n    return new Reference(ref.storage, location);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction isUrl(path) {\n    return /^[A-Za-z]+:\\/\\//.test(path);\n}\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\nfunction refFromURL(service, url) {\n    return new Reference(service, url);\n}\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\nfunction refFromPath(ref, path) {\n    if (ref instanceof FirebaseStorageImpl) {\n        const service = ref;\n        if (service._bucket == null) {\n            throw noDefaultBucket();\n        }\n        const reference = new Reference(service, service._bucket);\n        if (path != null) {\n            return refFromPath(reference, path);\n        }\n        else {\n            return reference;\n        }\n    }\n    else {\n        // ref is a Reference\n        if (path !== undefined) {\n            return _getChild$1(ref, path);\n        }\n        else {\n            return ref;\n        }\n    }\n}\nfunction ref$1(serviceOrRef, pathOrUrl) {\n    if (pathOrUrl && isUrl(pathOrUrl)) {\n        if (serviceOrRef instanceof FirebaseStorageImpl) {\n            return refFromURL(serviceOrRef, pathOrUrl);\n        }\n        else {\n            throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');\n        }\n    }\n    else {\n        return refFromPath(serviceOrRef, pathOrUrl);\n    }\n}\nfunction extractBucket(host, config) {\n    const bucketString = config?.[CONFIG_STORAGE_BUCKET_KEY];\n    if (bucketString == null) {\n        return null;\n    }\n    return Location.makeFromBucketSpec(bucketString, host);\n}\nfunction connectStorageEmulator$1(storage, host, port, options = {}) {\n    storage.host = `${host}:${port}`;\n    const useSsl = isCloudWorkstation(host);\n    // Workaround to get cookies in Firebase Studio\n    if (useSsl) {\n        void pingServer(`https://${storage.host}/b`);\n        updateEmulatorBanner('Storage', true);\n    }\n    storage._isUsingEmulator = true;\n    storage._protocol = useSsl ? 'https' : 'http';\n    const { mockUserToken } = options;\n    if (mockUserToken) {\n        storage._overrideAuthToken =\n            typeof mockUserToken === 'string'\n                ? mockUserToken\n                : createMockUserToken(mockUserToken, storage.app.options.projectId);\n    }\n}\n/**\n * A service that provides Firebase Storage Reference instances.\n * @param opt_url - gs:// url to a custom Storage Bucket\n *\n * @internal\n */\nclass FirebaseStorageImpl {\n    constructor(\n    /**\n     * FirebaseApp associated with this StorageService instance.\n     */\n    app, _authProvider, \n    /**\n     * @internal\n     */\n    _appCheckProvider, \n    /**\n     * @internal\n     */\n    _url, _firebaseVersion, _isUsingEmulator = false) {\n        this.app = app;\n        this._authProvider = _authProvider;\n        this._appCheckProvider = _appCheckProvider;\n        this._url = _url;\n        this._firebaseVersion = _firebaseVersion;\n        this._isUsingEmulator = _isUsingEmulator;\n        this._bucket = null;\n        /**\n         * This string can be in the formats:\n         * - host\n         * - host:port\n         */\n        this._host = DEFAULT_HOST;\n        this._protocol = 'https';\n        this._appId = null;\n        this._deleted = false;\n        this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n        this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n        this._requests = new Set();\n        if (_url != null) {\n            this._bucket = Location.makeFromBucketSpec(_url, this._host);\n        }\n        else {\n            this._bucket = extractBucket(this._host, this.app.options);\n        }\n    }\n    /**\n     * The host string for this service, in the form of `host` or\n     * `host:port`.\n     */\n    get host() {\n        return this._host;\n    }\n    set host(host) {\n        this._host = host;\n        if (this._url != null) {\n            this._bucket = Location.makeFromBucketSpec(this._url, host);\n        }\n        else {\n            this._bucket = extractBucket(host, this.app.options);\n        }\n    }\n    /**\n     * The maximum time to retry uploads in milliseconds.\n     */\n    get maxUploadRetryTime() {\n        return this._maxUploadRetryTime;\n    }\n    set maxUploadRetryTime(time) {\n        validateNumber('time', \n        /* minValue=*/ 0, \n        /* maxValue= */ Number.POSITIVE_INFINITY, time);\n        this._maxUploadRetryTime = time;\n    }\n    /**\n     * The maximum time to retry operations other than uploads or downloads in\n     * milliseconds.\n     */\n    get maxOperationRetryTime() {\n        return this._maxOperationRetryTime;\n    }\n    set maxOperationRetryTime(time) {\n        validateNumber('time', \n        /* minValue=*/ 0, \n        /* maxValue= */ Number.POSITIVE_INFINITY, time);\n        this._maxOperationRetryTime = time;\n    }\n    async _getAuthToken() {\n        if (this._overrideAuthToken) {\n            return this._overrideAuthToken;\n        }\n        const auth = this._authProvider.getImmediate({ optional: true });\n        if (auth) {\n            const tokenData = await auth.getToken();\n            if (tokenData !== null) {\n                return tokenData.accessToken;\n            }\n        }\n        return null;\n    }\n    async _getAppCheckToken() {\n        if (_isFirebaseServerApp(this.app) && this.app.settings.appCheckToken) {\n            return this.app.settings.appCheckToken;\n        }\n        const appCheck = this._appCheckProvider.getImmediate({ optional: true });\n        if (appCheck) {\n            const result = await appCheck.getToken();\n            // TODO: What do we want to do if there is an error getting the token?\n            // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n            // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n            // the token (actual or dummy) to send requests.\n            return result.token;\n        }\n        return null;\n    }\n    /**\n     * Stop running requests and prevent more from being created.\n     */\n    _delete() {\n        if (!this._deleted) {\n            this._deleted = true;\n            this._requests.forEach(request => request.cancel());\n            this._requests.clear();\n        }\n        return Promise.resolve();\n    }\n    /**\n     * Returns a new firebaseStorage.Reference object referencing this StorageService\n     * at the given Location.\n     */\n    _makeStorageReference(loc) {\n        return new Reference(this, loc);\n    }\n    /**\n     * @param requestInfo - HTTP RequestInfo object\n     * @param authToken - Firebase auth token\n     */\n    _makeRequest(requestInfo, requestFactory, authToken, appCheckToken, retry = true) {\n        if (!this._deleted) {\n            const request = makeRequest(requestInfo, this._appId, authToken, appCheckToken, requestFactory, this._firebaseVersion, retry, this._isUsingEmulator);\n            this._requests.add(request);\n            // Request removes itself from set when complete.\n            request.getPromise().then(() => this._requests.delete(request), () => this._requests.delete(request));\n            return request;\n        }\n        else {\n            return new FailRequest(appDeleted());\n        }\n    }\n    async makeRequestWithTokens(requestInfo, requestFactory) {\n        const [authToken, appCheckToken] = await Promise.all([\n            this._getAuthToken(),\n            this._getAppCheckToken()\n        ]);\n        return this._makeRequest(requestInfo, requestFactory, authToken, appCheckToken).getPromise();\n    }\n}\n\nconst name = \"@firebase/storage\";\nconst version = \"0.14.0\";\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Type constant for Firebase Storage.\n */\nconst STORAGE_TYPE = 'storage';\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Downloads the data at the object's location. Returns an error if the object\n * is not found.\n *\n * To use this functionality, you have to whitelist your app's origin in your\n * Cloud Storage bucket. See also\n * https://cloud.google.com/storage/docs/configuring-cors\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A Promise containing the object's bytes\n */\nfunction getBytes(ref, maxDownloadSizeBytes) {\n    ref = getModularInstance(ref);\n    return getBytesInternal(ref, maxDownloadSizeBytes);\n}\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns A Promise containing an UploadResult\n */\nfunction uploadBytes(ref, data, metadata) {\n    ref = getModularInstance(ref);\n    return uploadBytes$1(ref, data, metadata);\n}\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the string to upload.\n * @returns A Promise containing an UploadResult\n */\nfunction uploadString(ref, value, format, metadata) {\n    ref = getModularInstance(ref);\n    return uploadString$1(ref, value, format, metadata);\n}\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns An UploadTask\n */\nfunction uploadBytesResumable(ref, data, metadata) {\n    ref = getModularInstance(ref);\n    return uploadBytesResumable$1(ref, data, metadata);\n}\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retrieved, the promise is\n * rejected.\n * @public\n * @param ref - {@link StorageReference} to get metadata from.\n */\nfunction getMetadata(ref) {\n    ref = getModularInstance(ref);\n    return getMetadata$1(ref);\n}\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - {@link StorageReference} to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves with the new metadata for this object.\n */\nfunction updateMetadata(ref, metadata) {\n    ref = getModularInstance(ref);\n    return updateMetadata$1(ref, metadata);\n}\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - {@link StorageReference} to get list from.\n * @param options - See {@link ListOptions} for details.\n * @returns A `Promise` that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nfunction list(ref, options) {\n    ref = getModularInstance(ref);\n    return list$1(ref, options);\n}\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: `listAll` may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - {@link StorageReference} to get list from.\n *\n * @returns A `Promise` that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nfunction listAll(ref) {\n    ref = getModularInstance(ref);\n    return listAll$1(ref);\n}\n/**\n * Returns the download URL for the given {@link StorageReference}.\n * @public\n * @param ref - {@link StorageReference} to get the download URL for.\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nfunction getDownloadURL(ref) {\n    ref = getModularInstance(ref);\n    return getDownloadURL$1(ref);\n}\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - {@link StorageReference} for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nfunction deleteObject(ref) {\n    ref = getModularInstance(ref);\n    return deleteObject$1(ref);\n}\nfunction ref(serviceOrRef, pathOrUrl) {\n    serviceOrRef = getModularInstance(serviceOrRef);\n    return ref$1(serviceOrRef, pathOrUrl);\n}\n/**\n * @internal\n */\nfunction _getChild(ref, childPath) {\n    return _getChild$1(ref, childPath);\n}\n/**\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\n * @public\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\n * If not passed, uses the app's default Storage Bucket.\n * @returns A {@link FirebaseStorage} instance.\n */\nfunction getStorage(app = getApp(), bucketUrl) {\n    app = getModularInstance(app);\n    const storageProvider = _getProvider(app, STORAGE_TYPE);\n    const storageInstance = storageProvider.getImmediate({\n        identifier: bucketUrl\n    });\n    const emulator = getDefaultEmulatorHostnameAndPort('storage');\n    if (emulator) {\n        connectStorageEmulator(storageInstance, ...emulator);\n    }\n    return storageInstance;\n}\n/**\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\n *\n * @param storage - The {@link FirebaseStorage} instance\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 5001)\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\n * token to use for unit testing Security Rules.\n * @public\n */\nfunction connectStorageEmulator(storage, host, port, options = {}) {\n    connectStorageEmulator$1(storage, host, port, options);\n}\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Downloads the data at the object's location. Returns an error if the object\n * is not found.\n *\n * To use this functionality, you have to whitelist your app's origin in your\n * Cloud Storage bucket. See also\n * https://cloud.google.com/storage/docs/configuring-cors\n *\n * This API is not available in Node.\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A Promise that resolves with a Blob containing the object's bytes\n */\nfunction getBlob(ref, maxDownloadSizeBytes) {\n    ref = getModularInstance(ref);\n    return getBlobInternal(ref, maxDownloadSizeBytes);\n}\n/**\n * Downloads the data at the object's location. Raises an error event if the\n * object is not found.\n *\n * This API is only available in Node.\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A stream with the object's data as bytes\n */\nfunction getStream(ref, maxDownloadSizeBytes) {\n    throw new Error('getStream() is only supported by NodeJS builds');\n}\n\n/**\n * Cloud Storage for Firebase\n *\n * @packageDocumentation\n */\nfunction factory(container, { instanceIdentifier: url }) {\n    const app = container.getProvider('app').getImmediate();\n    const authProvider = container.getProvider('auth-internal');\n    const appCheckProvider = container.getProvider('app-check-internal');\n    return new FirebaseStorageImpl(app, authProvider, appCheckProvider, url, SDK_VERSION);\n}\nfunction registerStorage() {\n    _registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\n    //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\n    registerVersion(name, version, '');\n    // BUILD_TARGET will be replaced by values like esm, cjs, etc during the compilation\n    registerVersion(name, version, 'esm2020');\n}\nregisterStorage();\n\nexport { StorageError, StorageErrorCode, StringFormat, FbsBlob as _FbsBlob, Location as _Location, TaskEvent as _TaskEvent, TaskState as _TaskState, UploadTask as _UploadTask, dataFromString as _dataFromString, _getChild, invalidArgument as _invalidArgument, invalidRootOperation as _invalidRootOperation, connectStorageEmulator, deleteObject, getBlob, getBytes, getDownloadURL, getMetadata, getStorage, getStream, list, listAll, ref, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };\n//# sourceMappingURL=index.esm.js.map\n"],"mappings":"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"}